{"version":3,"sources":["pages/login-page/login-page.component.jsx"],"names":["Login","props","handleSubmit","event","preventDefault","setState","email","password","user","handleLogin","googleSignInStart","currentUser","console","log","state","handleChange","target","value","name","className","md","type","placeholder","autoComplete","xs","color","onClick","this","style","width","to","active","tabIndex","React","Component","connect","selectCurrentUser","dispatch","googleSignInStartNoSnapshot","emailSignInStart"],"mappings":"0TA2BMA,E,kDAEJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAmBRC,aAAe,SAAAC,GAEbA,EAAMC,iBACN,EAAKC,SAAS,CAACC,MAAO,GAAIC,SAAU,GAAIC,KAAM,MAvB7B,EA0BnBC,YAAc,WACZ,MAA2C,EAAKR,MAAxCS,EAAR,EAAQA,kBAAmBC,EAA3B,EAA2BA,YAC3BD,IACA,EAAKL,SAAS,CAACC,MAAO,GAAIC,SAAU,GAAIC,KAAMG,IAC9CC,QAAQC,IAAI,aAAc,EAAKC,MAAMN,OA9BpB,EAiCnBN,aAAe,SAAAC,GAEbA,EAAMC,iBACN,EAAKC,SAAS,CAACC,MAAO,GAAIC,SAAU,GAAIC,KAAM,MApC7B,EAuCnBO,aAAe,SAAAZ,GAEb,MAAsBA,EAAMa,OAArBC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,KACd,EAAKb,SAAL,eAAgBa,EAAQD,KAvCxB,EAAKH,MAAQ,CACXN,KAAM,GACNF,MAAO,GACPC,SAAU,IANK,E,qDAUnB,c,oBAmCA,WACE,OACE,qBAAKY,UAAU,qDAAf,SACE,cAAC,IAAD,UACE,cAAC,KAAD,CAAMA,UAAU,yBAAhB,SACE,cAAC,IAAD,CAAMC,GAAG,IAAT,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOD,UAAU,MAAjB,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,uCACA,mBAAGA,UAAU,aAAb,qCACA,eAAC,IAAD,CAAaA,UAAU,OAAvB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOD,KAAK,iBAGhB,cAAC,IAAD,CAAQG,KAAK,OAAOC,YAAY,QAAQC,aAAa,aAGvD,eAAC,IAAD,CAAaJ,UAAU,OAAvB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOD,KAAK,wBAGhB,cAAC,IAAD,CAAQG,KAAK,WAAWC,YAAY,WAAWC,aAAa,wBAG9D,eAAC,KAAD,WACE,cAAC,IAAD,CAAMC,GAAG,IAAT,SACE,cAAC,IAAD,CAASC,MAAM,UAAUN,UAAU,OAAnC,qBAEF,cAAC,IAAD,CAAMK,GAAG,IAAT,SACE,uBAAOH,KAAK,SAASK,QAASC,KAAKlB,YAAaQ,MAAM,sBAAsBE,UAAU,0CAMhG,cAAC,IAAD,CAAOA,UAAU,4CAA4CS,MAAO,CAAEC,MAAO,OAA7E,SACE,cAAC,IAAD,CAAWV,UAAU,cAArB,SACE,gCACE,yCAGA,cAAC,IAAD,CAAMW,GAAG,YAAT,SACE,cAAC,IAAD,CAASL,MAAM,UAAUN,UAAU,OAAOY,QAAM,EAACC,UAAW,EAA5D,mD,GA/FJC,IAAMC,WAwHXC,uBAJS,SAAArB,GAAK,MAAK,CAChCH,YAAayB,YAAkBtB,OAPN,SAAAuB,GAAQ,MAAK,CACtC3B,kBAAmB,kBAAM2B,EAASC,gBAClCC,iBAAkB,SAACjC,EAAOC,GAAR,OAChB8B,EAASE,YAAiB,CAAEjC,QAAOC,kBAOxB4B,CAGbnC","file":"static/js/42.3baea6c6.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport {\r\n  googleSignInStart,\r\n  googleSignInStartNoSnapshot,\r\n  emailSignInStart\r\n} from '../../redux/user/user.actions';\r\nimport { selectCurrentUser } from '../../redux/user/user.selectors';\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCol,\r\n  CContainer,\r\n  CForm,\r\n  CInput,\r\n  CInputGroup,\r\n  CInputGroupPrepend,\r\n  CInputGroupText,\r\n  CRow\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\n\r\n\r\nclass Login extends React.Component\r\n{\r\n  constructor(props) {\r\n    super(props); \r\n\r\n    this.state = {\r\n      user: {},\r\n      email: '',\r\n      password: ''\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    /* if (user.providerData.length > 0) {\r\n      let location = useLocation();\r\n      let { from } = location.state || { from: { pathname: \"/goaml\" } };\r\n      let history = useHistory();\r\n      history.replace(from);\r\n      history.push('/goaml');\r\n    } */\r\n  }\r\n\r\n  handleSubmit = event =>\r\n  {\r\n    event.preventDefault();\r\n    this.setState({email: \"\", password: \"\", user: { }})\r\n  }\r\n\r\n  handleLogin = () =>{\r\n    const { googleSignInStart, currentUser } = this.props;\r\n    googleSignInStart();\r\n    this.setState({email: \"\", password: \"\", user: currentUser})\r\n    console.log(\"Userrrrr: \", this.state.user);\r\n  }\r\n\r\n  handleSubmit = event =>\r\n  {\r\n    event.preventDefault();\r\n    this.setState({email: \"\", password: \"\", user: { }})\r\n  }\r\n\r\n  handleChange = event =>\r\n  {\r\n    const {value, name} = event.target;\r\n    this.setState({[name] : value})\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"c-app c-default-layout flex-row align-items-center\">\r\n        <CContainer>\r\n          <CRow className=\"justify-content-center\">\r\n            <CCol md=\"8\">\r\n              <CCardGroup>\r\n                <CCard className=\"p-4\">\r\n                  <CCardBody>\r\n                    <CForm>\r\n                      <h1>Login</h1>\r\n                      <p className=\"text-muted\">Sign In to your account</p>\r\n                      <CInputGroup className=\"mb-3\">\r\n                        <CInputGroupPrepend>\r\n                          <CInputGroupText>\r\n                            <CIcon name=\"cil-user\" />\r\n                          </CInputGroupText>\r\n                        </CInputGroupPrepend>\r\n                        <CInput type=\"text\" placeholder=\"email\" autoComplete=\"email\" />\r\n                        {/* <CInput type=\"text\" name=\"email\" value={this.state.email} onChange={this.handleChange} placeholder=\"email\" autoComplete=\"email\" /> */}\r\n                      </CInputGroup>\r\n                      <CInputGroup className=\"mb-4\">\r\n                        <CInputGroupPrepend>\r\n                          <CInputGroupText>\r\n                            <CIcon name=\"cil-lock-locked\" />\r\n                          </CInputGroupText>\r\n                        </CInputGroupPrepend>\r\n                        <CInput type=\"password\" placeholder=\"Password\" autoComplete=\"current-password\" />\r\n                        {/* <CInput type=\"password\" name=\"password\" value={this.state.password} placeholder=\"Password\" autoComplete=\"current-password\" /> */}\r\n                      </CInputGroup>\r\n                      <CRow>\r\n                        <CCol xs=\"6\">\r\n                          <CButton color=\"primary\" className=\"px-4\">Login</CButton>\r\n                        </CCol>\r\n                        <CCol xs=\"6\">\r\n                          <input type=\"submit\" onClick={this.handleLogin} value=\"Sign in with Google\" className=\"btn btn-danger text-right\"></input>\r\n                        </CCol>\r\n                      </CRow>\r\n                    </CForm>\r\n                  </CCardBody>\r\n                </CCard>\r\n                <CCard className=\"text-white bg-primary py-5 d-md-down-none\" style={{ width: '44%' }}>\r\n                  <CCardBody className=\"text-center\">\r\n                    <div>\r\n                      <h2>Sign up</h2>\r\n                      {/* <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut\r\n                        labore et dolore magna aliqua.</p> */}\r\n                      <Link to=\"/register\">\r\n                        <CButton color=\"primary\" className=\"mt-3\" active tabIndex={-1}>Register Now!</CButton>\r\n                      </Link>\r\n                    </div>\r\n                  </CCardBody>\r\n                </CCard>\r\n              </CCardGroup>\r\n            </CCol>\r\n          </CRow>\r\n        </CContainer>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  googleSignInStart: () => dispatch(googleSignInStartNoSnapshot()),\r\n  emailSignInStart: (email, password) =>\r\n    dispatch(emailSignInStart({ email, password }))\r\n});\r\n\r\nconst mapStateToProps = state => ({\r\n  currentUser: selectCurrentUser(state)\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Login);\r\n\r\n"],"sourceRoot":""}