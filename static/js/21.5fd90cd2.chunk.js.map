{"version":3,"sources":["views/users/UsersData.js","redux/goaml-utils/goaml-utils.js","redux/report-type/report-type.actions.js","redux/report-type/report-type.selectors.js","components/form-inputs/form-actions.component.jsx","components/form-inputs/form-date.component.jsx","components/form-inputs/form-input.component.jsx","components/form-inputs/form-textarea-component.jsx","components/form-inputs/form-react-select.component.jsx","components/goaml-enums/report-code-enum/report-code-enum.component.jsx","components/goaml-sections/report-type/report-type.component.jsx","components/goaml-tables/combined-table.component.jsx","components/goaml-sections/report-person/report-person.component.jsx","components/goaml-sections/report-location/report-location.component.jsx","components/goaml-sections/report-indicator/report-indicator.component.jsx","components/goaml-tables/table-transaction.component.jsx","components/form-inputs/form-amount.component.jsx","components/form-inputs/form-radio-text.component.jsx","components/form-inputs/form-dynamic-select.component.jsx","components/goaml-enums/conduction-type-enum/conduction-type-enum.component.jsx","components/goaml-sections/transaction-info/transaction-info.components.jsx","components/goaml-enums/currencies-enum/currencies-enum.component.jsx","components/goaml-enums/transaction-item-status-enum/transaction-item-status-enum.component.jsx","components/goaml-enums/transaction-item-type-enum/transaction-item-type-enum.component.jsx","components/goaml-sections/transaction-item/transaction-item.components.jsx","components/goaml-enums/country-code-enum/country-code-enum.component.jsx","components/goaml-enums/funds-type-enum/funds-type-enum.component.jsx","components/goaml-enums/party-type-enum/party-type-enum.components.jsx","components/goaml-sections/transaction-party-info/transaction-to-party-info.component.jsx","components/goaml-tables/table-person.component.jsx","components/form-inputs/form-email.component.jsx","components/form-inputs/form-gender-select.component.jsx","components/goaml-tables/table-address.component.jsx","components/goaml-enums/contact-type-enum/contact-type-enum.component.jsx","components/goaml-sections/template-address/template-address.components.jsx","components/goaml-sections/report-addresses/report-addresses.component.jsx","components/goaml-tables/table-identity.component.jsx","components/goaml-enums/identifier-type-enum/identifier-type-enum.component.jsx","components/goaml-sections/template-identification/template-identification.components.jsx","components/goaml-sections/report-identifications/report-identifications.component.jsx","components/goaml-tables/table-phone.component.jsx","components/goaml-enums/communication-type-enum/communication-type-enum.component.jsx","components/goaml-sections/template-phone/template-phone.components.jsx","components/goaml-sections/report-phones/report-phones.components.jsx","components/goaml-sections/template-person/template-person.component.jsx","components/goaml-sections/transaction-person/transaction-person.component.jsx","components/goaml-sections/transaction-party-info/transaction-from-party-info.component.jsx","components/goaml-enums/entity-legal-form-enum/entity-legal-form-enum.component.jsx","components/goaml-tables/table-director.component.jsx","components/goaml-enums/entity-person-role-enum/entity-person-role-enum.component.jsx","components/goaml-sections/template-director/template-director.components.jsx","components/goaml-sections/transaction-director/transaction-director.component.jsx","components/goaml-sections/transaction-entity/transaction-entity.components.jsx","components/goaml-enums/account-type-enum/account-type-enum.component.jsx","components/goaml-tables/table-signatory.component.jsx","components/goaml-enums/account-person-role-enum/account-person-role-enum.component.jsx","components/goaml-sections/template-signatory/template-signatory.components.jsx","components/goaml-sections/transaction-signatory/transaction-signatory.component.jsx","components/goaml-sections/transaction-account/transaction-account.components.jsx","components/goaml-sections/transaction-party/transaction-party.types.js","components/goaml-sections/transaction-party/transaction-party.component.jsx","components/goaml-sections/template-transaction/template-transaction.component.jsx","components/goaml-sections/report-transactions/report-transactions.component.jsx","components/goaml-core/converter-json-xml.js","components/goaml-core/report-generator.component.jsx","components/goaml-core/report-downloader.js","pages/goaml-page/goaml-page.component.jsx"],"names":["usersData","id","name","registered","role","status","RetrieveTransactionFromReport","fullReport","internal_ref_number","transaction","find","reportTransaction","SetReportType","reportType","type","ReportTypeActionTypes","SET_REPORT_TYPE","payload","selectReportType","createSelector","state","FormActions","saveText","handleCancelClick","handleSaveClick","className","color","onClick","FormDate","label","handleChange","placeholder","otherProps","htmlFor","onChange","FormInput","required","FormTextArea","rows","FormReactSelect","this","props","options","animatedComponents","makeAnimated","length","closeMenuOnSelect","components","defaultValue","isMulti","React","Component","ReportCodeEnum","reportIndicators","value","connect","dispatch","setReportType","report","error","useState","collapsed","setCollapsed","showElements","reportState","setComponentState","touched","setTouched","onFocus","onBlur","isEmpty","showError","setShowError","checkInputs","e","inputState","val","Object","entries","key","target","console","log","event","xs","timeout","in","unmountOnExit","show","row","onKeyUp","entity_id","rentity_id","rentity_branch","entity_reference","map","item","report_code","fiu_ref_number","submission_date","action","reason","alert","getBadge","CombinedTable","fields","tableData","items","hover","striped","bordered","size","itemsPerPage","pagination","scopedSlots","ReportPerson","Id","FirstName","LastName","IdNumber","Passport","closed","ReportLocation","Address","City","State","Postal","Country","report_indicators","TransactionTable","transactionData","FormAmount","FormRadioText","checked","width","disabled","FormDynamicSelect","custom","option","description","ConductionTypeEnum","handleSaveInfoClick","radioItems","setTransactionState","setCheck","onChecked","method","transactionnumber","transmode_comment","amount_local","transmode_code","date_transaction","date_posting","teller","authorized","transaction_location","late_deposit","transaction_description","class","existingTxn","reportTxns","txn","push","CurrenciesEnum","TransactionItemStatusEnum","TransactionItemTypeEnum","checkData","item_type","previous_register_to","presently_register_to","status_code","registration_number","item_make","disposed_value","size_UOM","identification_number","comments","estimate_value","currency_code","registration_date","status_commets","CountryCodeEnum","FundsTypeEnum","PartyTypeEnum","TransactionToPartyInfo","transRef","partyType","handleSavePartyInfo","transpartyInfo","setTranspartyInfo","to_funds_code","from_funds_comment","to_funds_comment","to_country","foreign_currency_code","foreign_exchange_rate","foreign_amount","from_funds_code","from_country","fromPtyInfo","partyInfo","to_foreign_currency","PersonTable","FormEmail","FormGenderSelect","index","AddressTable","ContactTypeEnum","TemplateAddress","handleAddressSave","templateAddress","address_type","city","country_code","address","town","zip","ReportAddresses","tab1Title","tab2Title","activeTab","variant","data-tab","IdentificationTable","IdentifierTypeEnum","IdentificationTemplate","handleIdentificationSave","templateIdentification","issued_by","number","issue_country","issue_date","expiry_date","ReportIdentifications","PhoneTable","CommunicationTypeEnum","PhoneTemplate","handlePhoneSave","templatePhone","tph_contact_type","tph_number","tph_communication_type","tph_extension","tph_country_prefix","ReportPhones","PersonTemplate","alias","OnSave","templatePerson","first_name","title","mothers_name","nationality1","passport_number","source_of_wealth","middle_name","gender","birthdate","residence","nationality2","occupation","employer_name","last_name","prefix","birth_place","email","ssn","tax_number","tax_reg_number","phone","phones","addresses","identification","date_deceased","nationality3","TransactionPersons","collapseMulti","setCollapseMulti","newCollapse","slice","toggleMulti","conductor","t_conductor","from_foreign_currency","EntityLegalFormEnum","DirectorTable","EntityPersonRoleEnum","DirectorTemplate","entityDirectorInfo","setEntityDirectorInfo","txnRef","person","t_person","director","TransactionDirectors","TransactionEntity","templateEntity","business","incorporation_state","url","commercial_name","incorporation_number","incorporation_country_code","incorporation_legal_form","incorporation_date","business_closed","director_id","AccountTypeEnum","SignatoryTable","AccountPersonRoleEnum","SignatoryTemplate","componentState","is_primary","TransactionSignatories","TransactionAccount","stateAccount","setStateAccount","account","iban","non_banking_institution","opened","account_name","institution_name","swift","balance","closedt","personal_account_type","branch","date_balance","client_number","beneficiary","beneficiary_comment","transaction_entity","signatory","TransactionsPartyTypes","FROM","TO","MY_CLIENT","PERSON_CLIENT","ACCOUNT_CLIENT","ENTITY_CLIENT","NOT_MY_CLIENT","PERSON_NOT_CLIENT","ACCOUNT_NOT_CLIENT","ENTITY_NOT_CLIENT","TransactionParty","displayPartyType","handleSaveParty","fromMyClientParty","fromNotMyClientParty","toMyClientParty","toNotMyClientParty","transitState","setTransitState","txnParty","filteredParties","reportTxn","Info","Items","filter","hasOwnProperty","Item","fromPerson","fromEntity","from_entity","toPerson","toEntity","handleSaveItem","ReportTransactions","obj2xml","OBJtoXML","obj","xml","prop","Array","array","replace","exportObj","exportName","dataStr","encodeURIComponent","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","remove","downloadObjectAsXml","GoAmlPage"],"mappings":"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","file":"static/js/21.5fd90cd2.chunk.js","sourcesContent":["const usersData = [\r\n  {id: 0, name: 'John Doe', registered: '2018/01/01', role: 'Guest', status: 'Pending'},\r\n  {id: 1, name: 'Samppa Nori', registered: '2018/01/01', role: 'Member', status: 'Active'},\r\n  {id: 2, name: 'Estavan Lykos', registered: '2018/02/01', role: 'Staff', status: 'Banned'},\r\n  {id: 3, name: 'Chetan Mohamed', registered: '2018/02/01', role: 'Admin', status: 'Inactive'},\r\n  {id: 4, name: 'Derick Maximinus', registered: '2018/03/01', role: 'Member', status: 'Pending'},\r\n  {id: 5, name: 'Friderik Dávid', registered: '2018/01/21', role: 'Staff', status: 'Active'},\r\n  {id: 6, name: 'Yiorgos Avraamu', registered: '2018/01/01', role: 'Member', status: 'Active'},\r\n  {id: 7, name: 'Avram Tarasios', registered: '2018/02/01', role: 'Staff', status: 'Banned'},\r\n  {id: 8, name: 'Quintin Ed', registered: '2018/02/01', role: 'Admin', status: 'Inactive'},\r\n  {id: 9, name: 'Enéas Kwadwo', registered: '2018/03/01', role: 'Member', status: 'Pending'},\r\n  {id: 10, name: 'Agapetus Tadeáš', registered: '2018/01/21', role: 'Staff', status: 'Active'},\r\n  {id: 11, name: 'Carwyn Fachtna', registered: '2018/01/01', role: 'Member', status: 'Active'},\r\n  {id: 12, name: 'Nehemiah Tatius', registered: '2018/02/01', role: 'Staff', status: 'Banned'},\r\n  {id: 13, name: 'Ebbe Gemariah', registered: '2018/02/01', role: 'Admin', status: 'Inactive'},\r\n  {id: 14, name: 'Eustorgios Amulius', registered: '2018/03/01', role: 'Member', status: 'Pending'},\r\n  {id: 15, name: 'Leopold Gáspár', registered: '2018/01/21', role: 'Staff', status: 'Active'},\r\n  {id: 16, name: 'Pompeius René', registered: '2018/01/01', role: 'Member', status: 'Active'},\r\n  {id: 17, name: 'Paĉjo Jadon', registered: '2018/02/01', role: 'Staff', status: 'Banned'},\r\n  {id: 18, name: 'Micheal Mercurius', registered: '2018/02/01', role: 'Admin', status: 'Inactive'},\r\n  {id: 19, name: 'Ganesha Dubhghall', registered: '2018/03/01', role: 'Member', status: 'Pending'},\r\n  {id: 20, name: 'Hiroto Šimun', registered: '2018/01/21', role: 'Staff', status: 'Active'},\r\n  {id: 21, name: 'Vishnu Serghei', registered: '2018/01/01', role: 'Member', status: 'Active'},\r\n  {id: 22, name: 'Zbyněk Phoibos', registered: '2018/02/01', role: 'Staff', status: 'Banned'},\r\n  {id: 23, name: 'Aulus Agmundr', registered: '2018/01/01', role: 'Member', status: 'Pending'},\r\n  {id: 42, name: 'Ford Prefect', registered: '2001/05/25', role: 'Alien', status: 'Don\\'t panic!'}\r\n]\r\n\r\nexport default usersData\r\n","import ReportPersonTypes from '../report-person/report-person.types';\r\n\r\n\r\nexport const RetrieveTransactionFromReport = (fullReport, internal_ref_number) => {\r\n    const existingTxn = fullReport.transaction.find(\r\n        reportTransaction => reportTransaction.internal_ref_number === internal_ref_number\r\n    );\r\n    return existingTxn;\r\n}\r\n\r\n\r\nexport const AddTransactionToGoAmlReport = (reportType, templateTxn) => {\r\n    if(templateTxn == null)\r\n        return;\r\n    if(templateTxn.internal_ref_number == null)\r\n        return;\r\n\r\n    const existingTxn = reportType.Items.find(\r\n        reportTransaction => reportTransaction.internal_ref_number === templateTxn.internal_ref_number\r\n    );\r\n    \r\n    if (existingTxn) {\r\n        const reportTxns = reportType.Items.map(reportTransaction =>\r\n            reportTransaction.internal_ref_number === templateTxn.internal_ref_number\r\n                ? { ...reportTransaction, ...templateTxn }\r\n                : reportTransaction\r\n        );\r\n        return reportTxns;\r\n    }\r\n}; \r\n\r\nexport const AddPersonToGoAmlReport = (reportType, templatePerson, personType, reportTypeFieldReference) => {\r\n\r\n    console.log(\"Awa: \", reportType, templatePerson, personType, reportTypeFieldReference);\r\n\r\n    switch (personType.trim()) {\r\n        case ReportPersonTypes.t_from_my_client_t_conductor:\r\n        case ReportPersonTypes.t_from_my_client_t_from_person:\r\n            let reportTxn = null;\r\n            const existingReportTransaction = reportType.Items.find(\r\n                reportTransaction => reportTransaction.internal_ref_number === reportTypeFieldReference\r\n            );\r\n            switch (personType) {\r\n                case ReportPersonTypes.t_from_my_client_t_conductor:\r\n                    if (existingReportTransaction) {\r\n                        reportTxn = reportType.Items.map(reportTransaction =>\r\n                            reportTransaction.internal_ref_number === reportTypeFieldReference\r\n                                ? { ...reportTransaction, t_conductor: templatePerson }\r\n                                : reportTransaction\r\n                        );\r\n                        console.log(\"Awa111A: \", reportTxn);\r\n                        return reportTxn;\r\n                    }\r\n                    console.log(\"Awa111B: \", reportTxn);\r\n                    break;\r\n                case ReportPersonTypes.t_from_my_client_t_from_person:  \r\n                    if (existingReportTransaction) {\r\n                        reportTxn = reportType.Items.map(reportTransaction =>\r\n                            reportTransaction.internal_ref_number === reportTypeFieldReference\r\n                                //? {...reportTransaction, Items: {...Items, templatePerson}} \r\n                                ? reportTransaction.Items.push(templatePerson) \r\n                                : reportTransaction\r\n                        );\r\n\r\n                        console.log(\"Awa112A: \", reportTxn);\r\n                        return reportTxn;\r\n                    }\r\n                    console.log(\"Awa112B: \", reportTxn);  \r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            console.log(\"Awa222: \", reportType, templatePerson, personType, reportTypeFieldReference);\r\n            \r\n            //return {...reportType, Items: reportTxn};\r\n            break;\r\n        case \"t_from_my_client.from_person22\":\r\n            console.log(reportType);\r\n            //return [...reportType, { ...reportTransactionToAdd, quantity: 1 }];\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n};","import ReportTypeActionTypes from './report-type.types'\r\nimport { AddPersonToGoAmlReport } from '../goaml-utils/goaml-utils'\r\n\r\nexport const GetReportType = () => ({\r\n  type: ReportTypeActionTypes.GET_REPORT_TYPE\r\n});\r\n\r\nexport const SetReportType = reportType => ({\r\n  type: ReportTypeActionTypes.SET_REPORT_TYPE,\r\n  payload: reportType\r\n});\r\n\r\nexport const AddPersonToReport = (reportType, templatePerson, reportTypeFieldName, reportTypeFieldReference) => {\r\n  return ({\r\n    type: \"AWA_RE\",\r\n    payload: AddPersonToGoAmlReport(reportType, templatePerson, reportTypeFieldName, reportTypeFieldReference)\r\n  });\r\n};\r\n","import { createSelector } from 'reselect';\r\n\r\nconst ReportType = state => state.reportType;\r\n\r\nexport const selectReportType = createSelector(\r\n    [ReportType],\r\n    reportType => reportType.reportType\r\n  );\r\n\r\n  ","import React from 'react'\r\nimport { CButton } from '@coreui/react'\r\n\r\nconst FormActions = ({saveText, handleCancelClick, handleSaveClick}) => {\r\n\r\n    return (\r\n        <div className=\"form-actions\">\r\n            <CButton color=\"primary\" onClick={handleSaveClick}>{ !saveText ? \"Save changes\": saveText }</CButton>\r\n            <CButton color=\"secondary\" className=\"btn-cancel-form-actions\" onClick={handleCancelClick}>Cancel</CButton>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormActions;","import {\r\n  CFormGroup,\r\n  CInput,\r\n  CLabel\r\n} from '@coreui/react';\r\nimport React from 'react';\r\n\r\nconst FormDate = ({ label, name, placeholder, handleChange, ...otherProps }) => (\r\n  <CFormGroup>\r\n    {label ? (\r\n      <CLabel htmlFor={name}>{label}</CLabel>\r\n    ) : null}\r\n      <CInput type=\"datetime\" id={name} name={name} onChange={handleChange} {...otherProps} />\r\n  </CFormGroup>\r\n);\r\n\r\nexport default FormDate;\r\n","import {\r\n  CFormGroup,\r\n  CInput,\r\n  CLabel\r\n} from '@coreui/react';\r\nimport React from 'react';\r\n\r\nconst FormInput = ({ label, name, placeholder, type, handleChange, ...otherProps }) => (\r\n  <CFormGroup>\r\n    {label ? (\r\n      <CLabel htmlFor={name}>{label}</CLabel>\r\n    ) : null}\r\n      <CInput id={name} name={name} type={type} onChange={handleChange} {...otherProps} placeholder={placeholder} required=\"required\" />\r\n  </CFormGroup>\r\n);\r\n\r\nexport default FormInput;\r\n","import React from 'react';\r\nimport {\r\n    CFormGroup,\r\n    CTextarea,\r\n    CLabel  } from '@coreui/react'\r\n\r\nconst FormTextArea = ({ label, name, rows, placeholder, handleChange }) => (\r\n    <CFormGroup>\r\n        {label ? (\r\n            <CLabel htmlFor={name}>{label}</CLabel>\r\n        ) : null}\r\n        <CTextarea \r\n            name={name} \r\n            id={name} \r\n            rows={rows}\r\n            placeholder={placeholder}\r\n            onChange={handleChange}\r\n        />\r\n    </CFormGroup>\r\n  );\r\n\r\nexport default FormTextArea;\r\n","import {\r\n    CFormGroup,\r\n    CLabel\r\n} from '@coreui/react';\r\nimport React from 'react';\r\nimport Select from 'react-select';\r\nimport makeAnimated from 'react-select/animated';\r\n\r\n\r\nclass FormReactSelect extends React.Component {\r\n    constructor() {\r\n      super();\r\n    }\r\n    \r\n    render() {\r\n        const { options, label, name, handleChange } = this.props;\r\n        const animatedComponents = makeAnimated();\r\n  \r\n        return (\r\n          <CFormGroup>\r\n              {label ? (\r\n                  <CLabel htmlFor={name}>{label}</CLabel>\r\n                  ) : null}\r\n              {options && options.length > 0 && (\r\n                  <div className=\"col-xs-12\">\r\n                      <Select\r\n                          name={name} \r\n                          id={name} \r\n                          onChange={handleChange}\r\n                          closeMenuOnSelect={false}\r\n                          components={animatedComponents}\r\n                          defaultValue={name}\r\n                          isMulti\r\n                          options={options}\r\n                      />\r\n                  </div>\r\n              )}\r\n          </CFormGroup>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FormReactSelect;\r\n","import React from 'react';\r\nimport FormReactSelect from '../../form-inputs/form-react-select.component';\r\n\r\nclass ReportCodeEnum extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            reportIndicators : [\r\n                {value: 'CTR', label:'Cash Transaction Report'},\r\n                {value: 'STR', label:'Suspicious Transaction Report'},\r\n                {value: 'EFT', label:'Electronic Funds Transfer'},\r\n                {value: 'IFT', label:'International Funds Transfer'},\r\n                {value: 'TFR', label:'Terror Financing Report'},\r\n                {value: 'BCR', label:'Border Cash Report'},\r\n                {value: 'UTR', label:'Unusual Transaction Report'},\r\n                {value: 'AIF', label:'Additional Information File'},\r\n                {value: 'IRI', label:'Incoming Request for Information – International'},\r\n                {value: 'ORI', label:'Outgoing Request for Information – International'},\r\n                {value: 'IRD', label:'Incoming Request for Information – Domestic'},\r\n                {value: 'ORD', label:'Outgoing Request for Information – Domestic'}\r\n            ]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { reportIndicators } = this.state;\r\n        const { name, label, handleChange } = this.props;\r\n        \r\n        return(\r\n            <FormReactSelect label={label} name={name} handleChange={handleChange} options={reportIndicators} />\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default ReportCodeEnum;","import CIcon from '@coreui/icons-react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup,\r\n    CRow\r\n} from '@coreui/react';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { SetReportType } from '../../../redux/report-type/report-type.actions';\r\nimport { selectReportType } from '../../../redux/report-type/report-type.selectors';\r\nimport FormActions from '../../form-inputs/form-actions.component';\r\nimport FormDate from '../../form-inputs/form-date.component';\r\nimport FormInput from '../../form-inputs/form-input.component';\r\nimport FormTextArea from '../../form-inputs/form-textarea-component';\r\nimport ReportCodeEnum from '../../goaml-enums/report-code-enum/report-code-enum.component';\r\n\r\n\r\nconst ReportType = ({ name, error, reportType, setReportType }) => {\r\n\r\n    const [collapsed, setCollapsed] = React.useState(true)\r\n    const [showElements] = React.useState(true)\r\n    const [reportState, setComponentState] = React.useState({\r\n        \"rentity_id\": 0,\r\n        \"rentity_branch\": '',\r\n        \"entity_reference\": '',\r\n        \"report_code\": '',\r\n        \"fiu_ref_number\": '',\r\n        \"submission_date\": '',\r\n        \"action\": '',\r\n        \"reason\": '',\r\n        \"submission_code\": '',\r\n        \"currency_code_local\": '',\r\n        \"entity_reference\": ''\r\n    })\r\n\r\n    const [touched, setTouched] = React.useState(false);\r\n    const onFocus = () => setTouched(true)\r\n    const onBlur = () => setTouched(false)\r\n\r\n    const [showError, setShowError] = React.useState({isEmpty: false, value: ''});\r\n\r\n    const checkInputs = (e, inputState) => {\r\n        let error = false;\r\n        let val = {};\r\n        let myValidation = reportState;\r\n        if (typeof myValidation === 'string'|| 'integer' || 'boolean'){\r\n            for (const [key, value] of Object.entries(inputState)) {\r\n                if (e.target.name === key) {\r\n                    value === null ? error = true : error = false; \r\n                    val = key;\r\n                } \r\n            }\r\n        }\r\n        setShowError({\r\n            isEmpty: error,\r\n            value: val\r\n         });\r\n    }\r\n\r\n    console.log('error', showError);\r\n\r\n    const handleChange = event => {\r\n        console.log(event.target);\r\n        const { name, value } = event.target;\r\n        setComponentState({ ...reportState, [name]: value });\r\n    };\r\n\r\n    const handleReactSelectTyeChange = event => {\r\n        let type = event.map((item) => {\r\n            return item.value\r\n        })\r\n        setComponentState({ ...reportState, report_code: type });\r\n    };\r\n\r\n    const handleSaveClick = () => {\r\n        if(!reportState.rentity_id || !reportState.rentity_branch || !reportState.entity_reference || !reportState.report_code \r\n            || !reportState.fiu_ref_number || !reportState.submission_date || !reportState.reason || !reportState.action){\r\n            alert('please complete this field');\r\n        }\r\n        return setReportType({ ...reportType, ...reportState});\r\n        }\r\n\r\n    const handleCancelClick = () => {\r\n        console.log(\"Hello: \", reportType);\r\n    }\r\n\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                    <CCard>\r\n                        <CCardHeader>\r\n                            {name}\r\n                            <div className=\"card-header-actions\">\r\n                                <CButton\r\n                                    color=\"link\"\r\n                                    className=\"card-header-action btn-minimize\"\r\n                                    onClick={() => setCollapsed(!collapsed)}\r\n                                >\r\n                                    <CIcon name={collapsed ? 'cil-chevron-bottom' : 'cil-chevron-top'} />\r\n                                </CButton>\r\n                            </div>\r\n                        </CCardHeader>\r\n                        <CCollapse show={collapsed} timeout={1000}>\r\n                            <CCardBody>\r\n                                <CForm className=\"form-horizontal\">\r\n                                    <CFormGroup row>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormInput \r\n                                                label=\"Entity\"\r\n                                                type=\"numbers\"\r\n                                                name=\"rentity_id\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                handleChange={handleChange}\r\n                                                onKeyUp={(e) => checkInputs(e, reportState)} \r\n                                                value={reportState.entity_id} \r\n                                                className={`form-control ${!reportState.rentity_id && touched && 'is-invalid'}${reportState.rentity_id && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormInput \r\n                                                label=\"Reporting Entity Branch\" \r\n                                                name=\"rentity_branch\" \r\n                                                placeholder=\"Enter ...\"\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                handleChange={handleChange}\r\n                                                onKeyUp={(e) => checkInputs(e, reportState)} \r\n                                                value={reportState.rentity_branch} \r\n                                                className={`form-control ${!reportState.rentity_branch && touched && 'is-invalid'} ${reportState.rentity_branch && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormInput \r\n                                                label=\"Reporting Entity Reference\" \r\n                                                name=\"entity_reference\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                handleChange={handleChange}\r\n                                                onKeyUp={(e) => checkInputs(e, reportState)} \r\n                                                value={reportState.entity_reference} \r\n                                                className={`form-control ${!reportState.entity_reference && touched && 'is-invalid'} ${reportState.entity_reference && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <ReportCodeEnum \r\n                                                label=\"Type*\" \r\n                                                name=\"report_code\" \r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                handleChange={handleReactSelectTyeChange}\r\n                                                onKeyUp={(e) => checkInputs(e, reportState)} \r\n                                                value={reportState.report_code} \r\n                                                className={`form-select ${!reportState.report_code && touched && 'is-invalid'} ${reportState.report_code && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormInput \r\n                                                label=\"FIU Ref Number\" \r\n                                                name=\"fiu_ref_number\" \r\n                                                placeholder=\"Enter ...\"\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus} \r\n                                                handleChange={handleChange}\r\n                                                onKeyUp={(e) => checkInputs(e, reportState)} \r\n                                                value={reportState.fiu_ref_number}  \r\n                                                className={`form-control ${!reportState.fiu_ref_number && touched && 'is-invalid'} ${reportState.fiu_ref_number && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        {/* <CCol xs=\"4\">\r\n                                        <FormInput \r\n                                                label=\"Entity Reference\" \r\n                                                name=\"entity_reference\" \r\n                                                placeholder=\"Enter ...\"\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus} \r\n                                                handleChange={handleChange}\r\n                                                onKeyUp={(e) => checkInputs(e, reportState)} \r\n                                                value={reportState.entity_reference}  \r\n                                                className={`form-control ${!reportState.entity_reference && touched && 'is-invalid'} ${reportState.entity_reference && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol> */}\r\n                                        <CCol xs=\"4\">\r\n                                            <FormDate \r\n                                                type=\"date\"\r\n                                                label=\"Submission Date*\" \r\n                                                name=\"submission_date\" \r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                handleChange={handleChange}\r\n                                                onKeyUp={(e) => checkInputs(e, reportState)} \r\n                                                value={reportState.submission_date}  \r\n                                                className={`form-select ${!reportState.submission_date && touched && 'is-invalid'} ${reportState.submission_date && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormInput \r\n                                                label=\"Action\" \r\n                                                name=\"action\" \r\n                                                placeholder=\"Enter ...\"\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus} \r\n                                                handleChange={handleChange}\r\n                                                onKeyUp={(e) => checkInputs(e, reportState)} \r\n                                                value={reportState.action}  \r\n                                                className={`form-control ${!reportState.action && touched && 'is-invalid'} ${reportState.action && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <FormTextArea \r\n                                                label=\"Reason for Reporting\" \r\n                                                name=\"reason\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                handleChange={handleChange}\r\n                                                onKeyUp={(e) => checkInputs(e, reportState)} \r\n                                                value={reportState.reason}  \r\n                                                className={`form-select ${!reportState.reason && touched && 'is-invalid'} ${reportState.reason && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                    </CFormGroup>\r\n                                    <FormActions \r\n                                        saveText=\"Save Report Type\"\r\n                                        handleSaveClick={handleSaveClick}\r\n                                        handleCancelClick={handleCancelClick}\r\n                                    >\r\n                                        </FormActions>\r\n                                </CForm>\r\n                            </CCardBody>\r\n                        </CCollapse>\r\n                    </CCard>\r\n                </CFade>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    reportType: selectReportType(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setReportType: report => dispatch(SetReportType(report))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReportType);\r\n","import CIcon from '@coreui/icons-react'\r\nimport {\r\n  CBadge, CButton,\r\n\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CCollapse,\r\n  CDataTable,\r\n  CRow\r\n} from '@coreui/react'\r\nimport React from 'react'\r\n// import { bool } from 'prop-types'\r\n\r\nconst getBadge = status => {\r\n  switch (status) {\r\n    case 'Active': return 'success'\r\n    case 'Inactive': return 'secondary'\r\n    case 'Pending': return 'warning'\r\n    case 'Banned': return 'danger'\r\n    default: return 'primary'\r\n  }\r\n}\r\n\r\nconst CombinedTable = ({name, fields, tableData, ...otherProps}) => {\r\n\r\n  let [collapsed, setCollapsed] = React.useState(false);\r\n  // let [showElements, setShowElements] = React.useState(true);\r\n\r\n  return (\r\n    <>\r\n        <CRow>\r\n            <CCol>\r\n              <CCard>\r\n                <CCardHeader>\r\n                  {name}\r\n                  <div className=\"card-header-actions\">\r\n                        <CButton \r\n                        color=\"link\" \r\n                        className=\"card-header-action btn-minimize\" \r\n                        onClick={() => setCollapsed(!collapsed)}\r\n                        >\r\n                        <CIcon name={collapsed ? 'cil-chevron-bottom':'cil-chevron-top'} />\r\n                        </CButton>\r\n                    </div>\r\n                </CCardHeader>\r\n                <CCollapse show={collapsed} timeout={1000}>\r\n                  <CCardBody>\r\n                    <CDataTable\r\n                    items={tableData}\r\n                    fields={fields}\r\n                    hover\r\n                    striped\r\n                    bordered\r\n                    size=\"sm\"\r\n                    itemsPerPage={10}\r\n                    pagination\r\n                    scopedSlots = {{\r\n                        'status':\r\n                        (item)=>(\r\n                            <td>\r\n                            <CBadge color={getBadge(item.status)}>\r\n                                {item.status}\r\n                            </CBadge>\r\n                            </td>\r\n                        )\r\n                    }}\r\n                    />\r\n                  </CCardBody>\r\n                </CCollapse>\r\n              </CCard>\r\n            </CCol>\r\n        </CRow>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CombinedTable\r\n","import React from 'react';\r\nimport CombinedTable from '../../goaml-tables/combined-table.component'\r\n\r\nconst fields = ['Id','FirstName', 'LastName', 'Date of Birth', 'IdNumber', 'Passport', 'status']\r\n\r\nclass ReportPerson extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            usersData : [\r\n                {\r\n                Id: 1,\r\n                FirstName: \"John\",\r\n                LastName: \"Doe\",\r\n                \"Date of Birth\": \"18/03/1992\",\r\n                IdNumber: \"A25529928\",\r\n                Passport: \"\",\r\n                status: 'Active'\r\n            }]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { usersData } = this.state;\r\n        const { name } = this.props;\r\n        \r\n        return(\r\n            <CombinedTable name=\"Reporting Person\" closed={\"true\"} fields={fields} tableData={usersData} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default ReportPerson;","import React from 'react';\r\nimport CombinedTable from '../../goaml-tables/combined-table.component'\r\n\r\nconst fields = ['Id','Address', 'City', 'State', 'Postal', 'Country']\r\n\r\nclass ReportLocation extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            usersData : [\r\n            {\r\n                Id: 1,\r\n                Address: \"Building 21\",\r\n                City: \"Victoria Island\",\r\n                State: \"Lagos\",\r\n                Postal: \"01104\",\r\n                Country: \"Nigeria\"\r\n            }]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { usersData } = this.state;\r\n        const { name } = this.props;\r\n        \r\n        return(\r\n            <CombinedTable name=\"Reporting Location\" fields={fields} tableData={usersData} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default ReportLocation;","import React from 'react';\r\nimport ReportCodeEnum from '../../goaml-enums/report-code-enum/report-code-enum.component';\r\nimport FormActions from '../../form-inputs/form-actions.component';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup,\r\n    CRow\r\n  } from '@coreui/react';\r\nimport CIcon from '@coreui/icons-react';\r\nimport { connect } from 'react-redux';\r\nimport { SetReportType } from '../../../redux/report-type/report-type.actions';\r\nimport { selectReportType } from '../../../redux/report-type/report-type.selectors';\r\n\r\n\r\nconst ReportIndicator = ({ name, reportType, setReportType, ...otherProps }) => {\r\n\r\n    let [collapsed, setCollapsed] = React.useState(true)\r\n    let [showElements, setShowElements] = React.useState(true)\r\n\r\n    const handleReactSelectTyeChange = event => {\r\n        let type = event.map((item) => {\r\n            return item.value\r\n        })\r\n        reportType.report_indicators = type;\r\n    };\r\n    \r\n    const handleSaveClick = () => {\r\n        setReportType(reportType);\r\n    }\r\n\r\n    const handleCancelClick = () => {\r\n        console.log(\"Hello: \", reportType);\r\n    }\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                <CCard>\r\n                    <CCardHeader>\r\n                        {name}\r\n                        <div className=\"card-header-actions\">\r\n                            <CButton \r\n                            color=\"link\" \r\n                            className=\"card-header-action btn-minimize\" \r\n                            onClick={() => setCollapsed(!collapsed)}\r\n                            >\r\n                            <CIcon name={collapsed ? 'cil-chevron-bottom':'cil-chevron-top'} />\r\n                            </CButton>\r\n                        </div>\r\n                    </CCardHeader>\r\n                    <CCollapse show={collapsed} timeout={1000}>\r\n                    <CCardBody>\r\n                        <CForm className=\"form-horizontal\">\r\n                            <CFormGroup row>\r\n                                <CCol xs=\"12\">\r\n                                    <ReportCodeEnum name=\"report_indicators\" handleChange={handleReactSelectTyeChange} />\r\n                                </CCol>\r\n                            </CFormGroup>\r\n                            <FormActions handleSaveClick={handleSaveClick} handleCancelClick={handleCancelClick}></FormActions>\r\n                        </CForm>\r\n                    </CCardBody>\r\n                    </CCollapse>\r\n                </CCard>\r\n                </CFade>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    reportType: selectReportType(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setReportType: reportType => dispatch(SetReportType(reportType))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReportIndicator);\r\n","import React from 'react';\r\nimport usersData from '../../views/users/UsersData';\r\nimport CombinedTable from './combined-table.component';\r\n\r\nconst fields = ['name','registered', 'role', 'status']\r\n\r\nclass TransactionTable extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            transactionData : usersData\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { transactionData } = this.state;\r\n        // const { name } = this.props;\r\n        \r\n        return(\r\n            <CombinedTable name=\"Transactions Table\" fields={fields} tableData={transactionData} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default TransactionTable;","import React from 'react';\r\nimport {\r\n    CFormGroup,\r\n    CInput,\r\n    CLabel  } from '@coreui/react'\r\n\r\nconst FormAmount = ({ label, name, placeholder, handleChange, ...otherProps }) => (\r\n  <CFormGroup>\r\n    {label ? (\r\n      <CLabel htmlFor={name}>{label}</CLabel>\r\n    ) : null}\r\n      <CInput id={name} name={name} onChange={handleChange} {...otherProps} placeholder={placeholder} />\r\n  </CFormGroup>\r\n);\r\n\r\nexport default FormAmount;\r\n","import {\r\n    CCol, CInput,\r\n\r\n    CLabel\r\n} from '@coreui/react';\r\nimport React from 'react';\r\nimport './form-radio-text.style.css';\r\n\r\nconst FormRadioText = ({ label, name, value, checked, placeholder, width, items, handleChange }) => (\r\n    <div className=\"form-group\">\r\n                {label ? (\r\n                    <CLabel htmlFor={name}>{label}</CLabel>\r\n                ) : null}\r\n                <div className=\"row\">\r\n                    {items ? \r\n                    items.map((item) => {\r\n                        return(\r\n                            <CCol xs={width}>\r\n                                <div className=\"input-group\">\r\n                                    <span className=\"input-group-addon\">\r\n                                        <input type=\"radio\" onChange={handleChange} name={name} checked={checked} />\r\n                                    </span>\r\n                                    <CInput name={name} defaultValue={item} disabled />\r\n                                </div>\r\n                            </CCol>\r\n                        )\r\n                    }) : null}\r\n                </div>\r\n            </div>\r\n  );\r\n\r\nexport default FormRadioText;","import React from 'react';\r\nimport {\r\n    CFormGroup,\r\n    CLabel,\r\n    CSelect  } from '@coreui/react'\r\n\r\nconst FormDynamicSelect = ({ options, label, name, handleChange }) => (\r\n  <CFormGroup>\r\n      {label ? (\r\n          <CLabel htmlFor={name}>{label}</CLabel>\r\n          ) : null}\r\n      {options && options.length > 0 && (\r\n          <CSelect custom name={name} id={name} onChange={handleChange}>\r\n              {options.map((option) => {\r\n                  return <option value={option.value}>{option.description}</option>;\r\n              })}\r\n          </CSelect>\r\n      )}\r\n  </CFormGroup>\r\n);\r\n\r\nexport default FormDynamicSelect;","import React from 'react';\r\nimport FormDynamicSelect from '../../form-inputs/form-dynamic-select.component'\r\n\r\nclass ConductionTypeEnum extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            options : [\r\n                {value: 'A', description:'In-branch/Office'},\r\n                {value: 'B', description:'ATM'},\r\n                {value: 'C', description:'Electronic transaction'}\r\n            ]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { options } = this.state;\r\n        const { name, label, handleChange } = this.props;\r\n        \r\n        return(\r\n            <FormDynamicSelect label={label} name={name} options={options} handleChange={handleChange} />\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default ConductionTypeEnum;","import CIcon from '@coreui/icons-react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup,\r\n    CRow\r\n} from '@coreui/react';\r\nimport React from 'react';\r\n// import { useForm } from \"react-hook-form\";\r\nimport { connect } from 'react-redux';\r\nimport { RetrieveTransactionFromReport } from '../../../redux/goaml-utils/goaml-utils';\r\nimport { SetReportType } from '../../../redux/report-type/report-type.actions';\r\nimport { selectReportType } from '../../../redux/report-type/report-type.selectors';\r\nimport FormActions from '../../form-inputs/form-actions.component';\r\nimport FormAmount from '../../form-inputs/form-amount.component';\r\nimport FormDate from '../../form-inputs/form-date.component';\r\nimport FormInput from '../../form-inputs/form-input.component';\r\nimport FormRadioText from '../../form-inputs/form-radio-text.component';\r\nimport FormTextArea from '../../form-inputs/form-textarea-component';\r\nimport ConductionTypeEnum from '../../goaml-enums/conduction-type-enum/conduction-type-enum.component';\r\n\r\nconst TransactionInfo = ({ label, name, reportType, setReportType, handleSaveInfoClick, ...otherProps }) => {\r\n\r\n    const [collapsed, setCollapsed] = React.useState(false)\r\n    const [showElements, setShowElements] = React.useState(true)\r\n    let radioItems = [\"Yes\", \"No\"];\r\n    const [transaction, setTransactionState] = React.useState({\r\n        \"transactionnumber\": 0,\r\n        \"internal_ref_number\": '',\r\n        \"transaction_location\": '',\r\n        \"transaction_description\": '',\r\n        \"date_transaction\": '',\r\n        \"teller\": '',\r\n        \"authorized\": '',\r\n        \"late_deposit\": false,\r\n        \"txn_from\": false,\r\n        \"txn_to\": false,\r\n        \"date_posting\": '',\r\n        // \"date_postingSpecified\": false,\r\n        //\"value_dateSpecified\": false,\r\n        \"transmode_code\": true,\r\n        \"transmode_comment\": '',\r\n        \"amount_local\": '',\r\n        \"Items\": [],\r\n        \"goods_services\": '',\r\n        \"comments\": ''\r\n    })\r\n    const [check, setCheck] = React.useState(false);\r\n    const onChecked = (e) => {\r\n        const { name, value } = e.target;\r\n        console.log({name, value})\r\n        setCheck({[name]: value})\r\n    }\r\n\r\n    const [touched, setTouched] = React.useState(false);\r\n    const onFocus = () => setTouched(true)\r\n    const onBlur = () => setTouched(false)\r\n\r\n    const [showError, setShowError] = React.useState({isEmpty: false, value: ''});\r\n\r\n    const checkInputs = (e, inputState) => {\r\n        let error = false;\r\n        let val = {};\r\n        let myValidation;\r\n        if (typeof myValidation === 'string' || 'integer' || 'boolean'){\r\n            for (const [key, value] of Object.entries(inputState)) {\r\n                if (e.target.name === key) {\r\n                    value === null ? error = true : error = false; \r\n                    val = key;\r\n                }\r\n            }\r\n        }\r\n        setShowError({\r\n            isEmpty: error,\r\n            value: val\r\n         });\r\n    }\r\n    \r\n    console.log('error', showError)\r\n\r\n    const handleChange = event => {\r\n        const { name, value } = event.target;\r\n        setTransactionState({ ...transaction, [name]: value });\r\n    };\r\n\r\n    const handleSaveClick = () => {\r\n        console.log(existingTxn);\r\n        if (!transaction.transactionnumber || !transaction.transmode_code || !transaction.internal_ref_number || !transaction.date_transaction ||\r\n            !transaction.transaction_description || !transaction.transaction_location ||  !transaction.teller || !transaction.authorized\r\n            || !transaction.date_posting || !transaction.amount_local){\r\n            alert('please complete this field');\r\n        }\r\n        const existingTxn = RetrieveTransactionFromReport(reportType, transaction);\r\n        if (existingTxn) {\r\n            setTransactionState({ ...transaction, ...existingTxn });\r\n            let reportTxns = reportType.transaction.map(reportTransaction =>\r\n                reportTransaction.internal_ref_number === transaction.internal_ref_number\r\n                    ? transaction\r\n                    : reportTransaction\r\n            );\r\n            handleSaveInfoClick(reportTxns, transaction);\r\n        }\r\n        else {\r\n            let txn = reportType.transaction;\r\n            txn.push(transaction)\r\n            handleSaveInfoClick(txn, transaction);\r\n        }\r\n    }\r\n\r\n    const handleCancelClick = () => {\r\n        console.log(\"Hello: \", reportType);\r\n    }\r\n\r\n//     const { register, handleSubmit, watch, errors } = useForm();\r\n//   const onSubmit = data => console.log(data);\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                    <CCard>\r\n                        <CCardHeader>\r\n                            {label}\r\n                            <div className=\"card-header-actions\">\r\n                                <CButton\r\n                                    color=\"link\"\r\n                                    className=\"card-header-action btn-minimize\"\r\n                                    onClick={() => setCollapsed(!collapsed)}\r\n                                >\r\n                                    <CIcon name={collapsed ? 'cil-chevron-bottom' : 'cil-chevron-top'} />\r\n                                </CButton>\r\n                            </div>\r\n                        </CCardHeader>\r\n                        <CCollapse show={collapsed} timeout={1000}>\r\n                            <CCardBody>\r\n                                <CForm method=\"post\" className=\"form-horizontal\">\r\n                                    <CFormGroup row>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormInput \r\n                                                type=\"number\"\r\n                                                label=\"Number*\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                name=\"transactionnumber\"\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, transaction)} \r\n                                                handleChange={handleChange}\r\n                                                value={transaction.transactionnumber} \r\n                                                className={`form-control ${!transaction.transactionnumber && touched && 'is-invalid'} ${transaction.transactionnumber && 'is-valid'}` }\r\n                                            />\r\n                                            <FormInput\r\n                                                type=\"number\"\r\n                                                label=\"TransMode Comment\" \r\n                                                name=\"transmode_comment\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, transaction)}\r\n                                                value={transaction.transmode_comment} \r\n                                                handleChange={handleChange} \r\n                                                className={`form-control ${!transaction.transmode_comment && touched && 'is-invalid'} ${transaction.transmode_comment && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormInput \r\n                                                label=\"Internal Reference Number\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                name=\"internal_ref_number\" \r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, transaction)}\r\n                                                value={transaction.internal_ref_number} \r\n                                                handleChange={handleChange} \r\n                                                className={`form-control ${!transaction.internal_ref_number && touched && 'is-invalid'} ${transaction.internal_ref_number && 'is-valid'}`}\r\n                                            />\r\n                                            <FormAmount \r\n                                                label=\"Local Amount*\" \r\n                                                name=\"amount_local\" \r\n                                                placeholder=\"0.00\" \r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, transaction)}\r\n                                                value={transaction.amount_local} \r\n                                                handleChange={handleChange} \r\n                                                className={`form-control ${!transaction.amount_local && touched && 'is-invalid'} ${transaction.amount_local && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <ConductionTypeEnum \r\n                                                label=\"TransMode Code*\" \r\n                                                name=\"transmode_code\" \r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, transaction)}\r\n                                                handleChange={handleChange} \r\n                                                value={transaction.transmode_code} \r\n                                                className={`form-control ${!transaction.transmode_code && touched && 'is-invalid'} ${transaction.transmode_code && 'is-valid'}`}\r\n                                            />\r\n                                            <FormDate \r\n                                                type=\"date\"\r\n                                                label=\"Trans Date*\" \r\n                                                name=\"date_transaction\" \r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, transaction)}\r\n                                                value={transaction.date_transaction} \r\n                                                handleChange={handleChange} \r\n                                                className={`form-control ${!transaction.date_transaction && touched && 'is-invalid'} ${transaction.date_transaction && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormDate \r\n                                                type=\"date\"\r\n                                                label=\"Post Date*\" \r\n                                                name=\"date_posting\" \r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, transaction)} \r\n                                                value={transaction.date_posting} \r\n                                                handleChange={handleChange} \r\n                                                className={`form-control ${!transaction.date_posting && touched && 'is-invalid'} ${transaction.date_posting && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormInput \r\n                                                label=\"Teller\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                name=\"teller\" \r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                value={transaction.teller} \r\n                                                onKeyUp={(e) => checkInputs(e, transaction)}\r\n                                                handleChange={handleChange} \r\n                                                className={`form-control ${!transaction.teller && touched && 'is-invalid'} ${transaction.teller && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormInput \r\n                                                label=\"Authorised\" \r\n                                                name=\"authorized\" \r\n                                                placeholder=\"Enter ...\"\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus} \r\n                                                value={transaction.authorized} \r\n                                                onKeyUp={(e) => checkInputs(e, transaction)}\r\n                                                handleChange={handleChange} \r\n                                                className={`form-control ${!transaction.authorized && touched && 'is-invalid'} ${transaction.authorized && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <CRow>\r\n                                                <CCol xs=\"6\">\r\n                                                    <FormInput \r\n                                                        label=\"Location*\" \r\n                                                        name=\"transaction_location\" \r\n                                                        placeholder=\"Enter ...\"\r\n                                                        onBlur={onBlur}\r\n                                                        onFocus={onFocus} \r\n                                                        onKeyUp={(e) => checkInputs(e, transaction)}\r\n                                                        value={transaction.transaction_location} \r\n                                                        handleChange={handleChange} \r\n                                                        className={`form-control ${!transaction.transaction_location && touched && 'is-invalid'} ${transaction.transaction_location && 'is-valid'}`}\r\n                                                        />\r\n                                                </CCol>\r\n                                                <CCol xs=\"6\">\r\n                                                    <FormRadioText \r\n                                                        label=\"Late Deposit?\" \r\n                                                        name=\"late_deposit\"\r\n                                                        width=\"6\" \r\n                                                        items={[\"Yes\", \"No\"]}\r\n                                                        handleChange={onChecked}\r\n                                                        defaultValue={transaction.late_deposit}\r\n                                                    />\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <CRow>\r\n                                                <CCol xs=\"6\">\r\n                                                    <FormRadioText \r\n                                                        label=\"From Party?\" \r\n                                                        items={[\"My Client\", \"Not My Client\"]} \r\n                                                        name=\"txn_from\" \r\n                                                        width=\"6\" \r\n                                                        handleChange={onChecked}\r\n                                                        defaultValue={radioItems}\r\n                                                    />\r\n                                                </CCol>\r\n                                                <CCol xs=\"6\">\r\n                                                    <FormRadioText \r\n                                                        label=\"To Party?\" \r\n                                                        name=\"txn_to\"\r\n                                                        width=\"6\" \r\n                                                        handleChange={onChecked}\r\n                                                        defaultValue={radioItems}\r\n                                                        items={[\"My Client\", \"Not My Client\"]}\r\n                                                        />\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <FormTextArea \r\n                                                label=\"Description\" \r\n                                                name=\"transaction_description\"\r\n                                                value={transaction.transaction_description} \r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, transaction)}\r\n                                                handleChange={handleChange} \r\n                                                placeholder=\"Enter ...\" \r\n                                                className={`form-control ${!transaction.transaction_description && touched && 'is-invalid'} ${transaction.transaction_description && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                    </CFormGroup>\r\n                                    <FormActions \r\n                                    type=\"submit\" class=\"btn btn-primary\"\r\n                                        saveText=\"Save Overview\"\r\n                                        handleSaveClick={handleSaveClick} \r\n                                        handleCancelClick={handleCancelClick}>\r\n                                    </FormActions>\r\n                                </CForm>\r\n                            </CCardBody>\r\n                        </CCollapse>\r\n                    </CCard>\r\n                </CFade>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    reportType: selectReportType(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setReportType: reportType => dispatch(SetReportType(reportType))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TransactionInfo);","import React from 'react';\r\nimport FormDynamicSelect from '../../form-inputs/form-dynamic-select.component'\r\n\r\nclass CurrenciesEnum extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            options : [\r\n                {value: 'ADP', description:'Andorran Peseta (no longer in use)'},\r\n                {value: 'AED', description:'United Arab Emirates Dirham'},\r\n                {value: 'AFA', description:'Afghani'},\r\n                {value: 'ALL', description:'Leek'},\r\n                {value: 'AMD', description:'Dram'},\r\n                {value: 'ANG', description:'Netherlands Antilles Guilder'},\r\n                {value: 'AOK', description:'Kwanza'},\r\n                {value: 'AON', description:'New Kwanza'},\r\n                {value: 'ARA', description:'Austral'},\r\n                {value: 'ARP', description:'Argentinean Peso'},\r\n                {value: 'ARS', description:'Argentinean Nuevo Peso'},\r\n                {value: 'ATS', description:'Schilling (no longer in use)'},\r\n                {value: 'AUD', description:'Australian Dollar'},\r\n                {value: 'AWG', description:'Aruban Guilder'},\r\n                {value: 'AZM', description:'Azerbaijani Manat'},\r\n                {value: 'BAM', description:'Convertible Mark'},\r\n                {value: 'BBD', description:'Barbados Dollar'},\r\n                {value: 'BDT', description:'Taka'},\r\n                {value: 'BEC', description:'Convertible Belgian Franc (no longer in use)'},\r\n                {value: 'BEF', description:'Belgian Franc (also known as Frank - no longer in use)'},\r\n                {value: 'BEL', description:'Financial Belgian Franc (no longer in use)'},\r\n                {value: 'BGL', description:'Lev'},\r\n                {value: 'BHD', description:'Bahraini Dinar'},\r\n                {value: 'BIF', description:'Burundi Franc'},\r\n                {value: 'BMD', description:'Bermudian Dollar'},\r\n                {value: 'BND', description:'Brunei Dollar'},\r\n                {value: 'BOB', description:'Boliviano'},\r\n                {value: 'BOP', description:'Bolivian Peso'},\r\n                {value: 'BRC', description:'Cruzeiro'},\r\n                {value: 'BRL', description:'Real'},\r\n                {value: 'BRR', description:'Cruzeiro Real'},\r\n                {value: 'BSD', description:'Bahamian Dollar'},\r\n                {value: 'BTN', description:'Ngultrum'},\r\n                {value: 'BUK', description:'Replaced by MMK'},\r\n                {value: 'BWP', description:'Pula'},\r\n                {value: 'BYR', description:'Belarussian Rouble'},\r\n                {value: 'BZD', description:'Belize Dollar'},\r\n                {value: 'CAD', description:'Canadian Dollar'},\r\n                {value: 'CDF', description:'Congolese Franc'},\r\n                {value: 'CDZ', description:'New Zaïre'},\r\n                {value: 'CHF', description:'Swiss Franc'},\r\n                {value: 'CLF', description:'Unidades de Fomento'},\r\n                {value: 'CLP', description:'Chilean Peso'},\r\n                {value: 'CNY', description:'Yuan Renminbi'},\r\n                {value: 'COP', description:'Colombian Peso'},\r\n                {value: 'CRC', description:'Costa Rican Colón'},\r\n                {value: 'CSK', description:'Koruna of former Czechoslovakia. Now replaced by CZK (Czech Koruna) and '},\r\n                {value: 'SKK', description:'Slovak Koruna)'},\r\n                {value: 'CUP', description:'Cuban Peso'},\r\n                {value: 'CVE', description:'Escudo Caboverdiano'},\r\n                {value: 'CYP', description:'Cypriot Pound'},\r\n                {value: 'CZK', description:'Czech Koruna'},\r\n                {value: 'DDM', description:'Former East German Mark, DEM subsequently in use'},\r\n                {value: 'DEM', description:'Deutsche Mark (no longer in use)'},\r\n                {value: 'DJF', description:'Djibouti Franc'},\r\n                {value: 'DKK', description:'Danish Krone'},\r\n                {value: 'DOP', description:'Dominican Republic Peso'},\r\n                {value: 'DZD', description:'Algerian Dinar'},\r\n                {value: 'ECS', description:'Sucre (no longer in use)'},\r\n                {value: 'EEK', description:'Kroon'},\r\n                {value: 'EGP', description:'Egyptian Pound'},\r\n                {value: 'ERN', description:'Eritrean Nakfa'},\r\n                {value: 'ESA', description:'Spanish Peseta, Account A (no longer in use)'},\r\n                {value: 'ESB', description:'Spanish Peseta, Account B (no longer in use)'},\r\n                {value: 'ESP', description:'Spanish Peseta (no longer in use)'},\r\n                {value: 'ETB', description:'Ethiopian Birr'},\r\n                {value: 'EUR', description:'Euro '},\r\n                {value: 'FIM', description:'Markka (no longer in use)'},\r\n                {value: 'FJD', description:'Fiji Dollar'},\r\n                {value: 'FKP', description:'Falkland Pound'},\r\n                {value: 'FRF', description:'French Franc (no longer in use)'},\r\n                {value: 'GBP', description:'Pound Sterling (United Kingdom Pound)'},\r\n                {value: 'GEL', description:'Lari'},\r\n                {value: 'GHC', description:'Cedi'},\r\n                {value: 'GIP', description:'Gibraltar Pound'},\r\n                {value: 'GMD', description:'Dalasi'},\r\n                {value: 'GNS', description:'Syli (also known as Guinea Franc)'},\r\n                {value: 'GQE', description:'Ekwele'},\r\n                {value: 'GRD', description:'Greek Drachma (no longer in use)'},\r\n                {value: 'GTQ', description:'Quetzal'},\r\n                {value: 'GWP', description:'Guinea-Bissau Peso'},\r\n                {value: 'GYD', description:'Guyana Dollar'},\r\n                {value: 'HKD', description:'Hong Kong Dollar'},\r\n                {value: 'HNL', description:'Lempira'},\r\n                {value: 'HRD', description:'Croatian Dinar'},\r\n                {value: 'HRK', description:'Croatian Kuna'},\r\n                {value: 'HTG', description:'Gourde'},\r\n                {value: 'HUF', description:'Forint'},\r\n                {value: 'IDR', description:'Rupiah'},\r\n                {value: 'IEP', description:'Punt (no longer in use)'},\r\n                {value: 'ILS', description:'Shekel'},\r\n                {value: 'INR', description:'Indian Rupee'},\r\n                {value: 'IQD', description:'Iraqi Dinar'},\r\n                {value: 'IRR', description:'Iranian Rial'},\r\n                {value: 'ISK', description:'Icelandic Króna'},\r\n                {value: 'ITL', description:'Italian Lira (no longer in use)'},\r\n                {value: 'JMD', description:'Jamaican Dollar'},\r\n                {value: 'JOD', description:'Jordanian Dinar'},\r\n                {value: 'JPY', description:'Yen'},\r\n                {value: 'KES', description:'Kenyan Shilling'},\r\n                {value: 'KGS', description:'Kyrgyzstani Som'},\r\n                {value: 'KHR', description:'Riel'},\r\n                {value: 'KMF', description:'Comorian Franc'},\r\n                {value: 'KPW', description:'Democratic Peoples Republic of Korean Won'},\r\n                {value: 'KRW', description:'Republic of Korean Won'},\r\n                {value: 'KWD', description:'Kuwaiti Dinar'},\r\n                {value: 'KYD', description:'Cayman Islands Dollar'},\r\n                {value: 'KZT', description:'Tenge'},\r\n                {value: 'LAK', description:'Kip'},\r\n                {value: 'LBP', description:'Lebanese Pound'},\r\n                {value: 'LKR', description:'Sri Lankan Rupee'},\r\n                {value: 'LRD', description:'Liberian Dollar'},\r\n                {value: 'LSL', description:'Loti'},\r\n                {value: 'LSM', description:'Maloti'},\r\n                {value: 'LTL', description:'Litas'},\r\n                {value: 'LUF', description:'Luxembourg Franc (no longer in use)'},\r\n                {value: 'LVL', description:'Lats'},\r\n                {value: 'LYD', description:'Libyan Dinar'},\r\n                {value: 'MAD', description:'Moroccan Dirham'},\r\n                {value: 'MDL', description:'Moldavian Leu'},\r\n                {value: 'MGF', description:'Malagasy Franc'},\r\n                {value: 'MKD', description:'Macedonian Dinar'},\r\n                {value: 'MLF', description:'Malian Franc'},\r\n                {value: 'MMK', description:'Kyat'},\r\n                {value: 'MNT', description:'Tugrik'},\r\n                {value: 'MOP', description:'Pataca'},\r\n                {value: 'MRO', description:'Ouguiya'},\r\n                {value: 'MTL', description:'Maltese Lira'},\r\n                {value: 'MTP', description:'Maltese Pound, replaced by Maltese Lira'},\r\n                {value: 'MUR', description:'Mauritius Rupee'},\r\n                {value: 'MVR', description:'Rufiyaa'},\r\n                {value: 'MWK', description:'Malawian Kwacha'},\r\n                {value: 'MXN', description:'Mexican New Peso (replacement for Mexican Peso)'},\r\n                {value: 'MXP', description:'Mexican Peso, replaced by Mexican New Peso'},\r\n                {value: 'MYR', description:'Ringgit (also known as Malaysian Dollar)'},\r\n                {value: 'MZM', description:'Metical'},\r\n                {value: 'NAD', description:'Namibian Dollar'},\r\n                {value: 'NGN', description:'Naira'},\r\n                {value: 'NIC', description:'Córdoba'},\r\n                {value: 'NLG', description:'Dutch Guilder (no longer in use)'},\r\n                {value: 'NOK', description:'Norwegian Krone'},\r\n                {value: 'NPR', description:'Nepalese Rupee'},\r\n                {value: 'NZD', description:'New Zealand Dollar'},\r\n                {value: 'OMR', description:'Omani Rial'},\r\n                {value: 'PAB', description:'Balboa'},\r\n                {value: 'PEI', description:'Inti'},\r\n                {value: 'PEN', description:'New Sol'},\r\n                {value: 'PES', description:'Sol (replaced by New Sol [PEN])'},\r\n                {value: 'PGK', description:'Kina'},\r\n                {value: 'PHP', description:'Philippines Peso'},\r\n                {value: 'PKR', description:'Pakistani Rupee'},\r\n                {value: 'PLN', description:'New Zloty'},\r\n                {value: 'PLZ', description:'Zloty (replaced by New Zloty [PLN])'},\r\n                {value: 'PTE', description:'Portuguese Escudo (no longer in use)'},\r\n                {value: 'PYG', description:'Guarani'},\r\n                {value: 'QAR', description:'Qatari Riyal'},\r\n                {value: 'ROL', description:'Romanian Leu'},\r\n                {value: 'RSD', description:'Serbian Dinar'},\r\n                {value: 'RUB', description:' Russian Federation Rouble (formerly RUR)'},\r\n                {value: 'RWF', description:'Rwandan Franc'},\r\n                {value: 'SAR', description:'Saudi Riyal'},\r\n                {value: 'SBD', description:'Solomon Islands Dollar'},\r\n                {value: 'SCR', description:'Seychelles Rupee'},\r\n                {value: 'SDD', description:'Sudanese Dinar'},\r\n                {value: 'SDP', description:'Sudanese Pound'},\r\n                {value: 'SEK', description:'Swedish Krona'},\r\n                {value: 'SGD', description:'Singapore Dollar'},\r\n                {value: 'SHP', description:'St Helena Pound'},\r\n                {value: 'SIT', description:'Tolar'},\r\n                {value: 'SKK', description:'Slovak Koruna'},\r\n                {value: 'SLL', description:'Leone'},\r\n                {value: 'SOS', description:'Somali Shilling'},\r\n                {value: 'SRG', description:'Surinam Guilder'},\r\n                {value: 'STD', description:'Dobra'},\r\n                {value: 'SUR', description:'Union of Soviet Socialist Republics Rouble'},\r\n                {value: 'SVC', description:'El Salvadorian Colón'},\r\n                {value: 'SYP', description:'Syrian Pound'},\r\n                {value: 'SZL', description:'Lilangeni'},\r\n                {value: 'THB', description:'Baht'},\r\n                {value: 'TJR', description:'Tajik Rouble'},\r\n                {value: 'TMM', description:'Turkmenistani Manat'},\r\n                {value: 'TND', description:'Tunisian Dinar'},\r\n                {value: 'TOP', description:'Paanga'},\r\n                {value: 'TPE', description:'Timorian Escudo'},\r\n                {value: 'TRL', description:'Turkish Lira'},\r\n                {value: 'TTD', description:'Trinidad and Tobago Dollar'},\r\n                {value: 'TWD', description:'Taiwan Dollar'},\r\n                {value: 'TZS', description:'Tanzanian Shilling'},\r\n                {value: 'UAH', description:'Hryvna'},\r\n                {value: 'UAK', description:'Karbovanet'},\r\n                {value: 'UGS', description:'Ugandan Shilling'},\r\n                {value: 'UKP', description:'Incorrectly used for GBP'},\r\n                {value: 'USD', description:'United States Dollar'},\r\n                {value: 'USN', description:'United States Dollar (Next day)'},\r\n                {value: 'USS', description:'United States Dollar (Same day)'},\r\n                {value: 'UYP', description:'Uruguayan Peso, replaced by Uruguayan New Peso (UYU)'},\r\n                {value: 'UYU', description:'Uruguayan New Peso'},\r\n                {value: 'UZS', description:'Uzbekistani Som'},\r\n                {value: 'VEB', description:'Bolivar'},\r\n                {value: 'VND', description:'Viet Nam Dông'},\r\n                {value: 'VUV', description:'Vatu'},\r\n                {value: 'WST', description:'Tala'},\r\n                {value: 'XAF', description:'Franc de la Communauté financière africaine'},\r\n                {value: 'XAU', description:'Gold'},\r\n                {value: 'XBA', description:'European Composite Unit'},\r\n                {value: 'XBB', description:'European Monetary Unit'},\r\n                {value: 'XBC', description:'European Unit of Account 9'},\r\n                {value: 'XBD', description:'European Unit of Account 17'},\r\n                {value: 'XCD', description:'East Caribbean Dollar'},\r\n                {value: 'XDR', description:'International Monetary Fund Special Drawing Rights'},\r\n                {value: 'XEU', description:'ECU (not an official currency, replaced by the Euro)'},\r\n                {value: 'XOF', description:'West African Franc'},\r\n                {value: 'XPF', description:'Franc des Comptoirs français du Pacifique'},\r\n                {value: 'YDD', description:'South Yemeni Dinar'},\r\n                {value: 'YER', description:'Yemeni Riyal'},\r\n                {value: 'YUD', description:'Yugoslavian New Dinar (no longer in use)'},\r\n                {value: 'ZAL', description:'Rand (financial)'},\r\n                {value: 'ZAR', description:'Rand'},\r\n                {value: 'ZMK', description:'Zambian Kwacha'},\r\n                {value: 'ZRZ', description:'Replaced by CDZ'},\r\n                {value: 'ZWD', description:'Zimbabwe Dollar'}\r\n            ]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { options } = this.state;\r\n        const { name, label, handleChange } = this.props;\r\n        \r\n        return(\r\n            <FormDynamicSelect label={label} name={name} options={options} handleChange={handleChange} />\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default CurrenciesEnum;","import React from 'react';\r\nimport FormDynamicSelect from '../../form-inputs/form-dynamic-select.component'\r\n\r\nclass TransactionItemStatusEnum extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            options : [\r\n                {value: 'A', description:'Bought'},\r\n                {value: 'B', description:'Sold'},\r\n                {value: 'C', description:'Rent'},\r\n                {value: 'D', description:'Leased'},\r\n                {value: 'E', description:'Mortgaged'},\r\n                {value: 'F', description:'Donated'},\r\n                {value: 'G', description:'Destroyed'},\r\n                {value: 'H', description:'Other'}\r\n            ]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { options } = this.state;\r\n        const { name, label, handleChange } = this.props;\r\n        \r\n        return(\r\n            <FormDynamicSelect label={label} name={name} options={options} handleChange={handleChange} />\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default TransactionItemStatusEnum;","import React from 'react';\r\nimport FormDynamicSelect from '../../form-inputs/form-dynamic-select.component'\r\n\r\nclass TransactionItemTypeEnum extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            options : [\r\n                {value: 'CH', description:'Chemical'},\r\n                {value: 'C', description:'Commodity'},\r\n                {value: 'E', description:'Equipment'},\r\n                {value: 'F', description:'Furniture'},\r\n                {value: 'G', description:'Goods'},\r\n                {value: 'J', description:'Jewellery'},\r\n                {value: 'M', description:'Machines'},\r\n                {value: 'PM', description:'Precious Metal'},\r\n                {value: 'P', description:'Property'},\r\n                {value: 'S', description:'Services'},\r\n                {value: 'V', description:'Vehicle'},\r\n                {value: 'W', description:'Weapon'}\r\n            ]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { options } = this.state;\r\n        const { name, label, handleChange } = this.props;\r\n        \r\n        return(\r\n            <FormDynamicSelect label={label} name={name} options={options} handleChange={handleChange}/>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default TransactionItemTypeEnum;","import CIcon from '@coreui/icons-react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup,\r\n    CRow\r\n} from '@coreui/react';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport FormAmount from 'src/components/form-inputs/form-amount.component';\r\nimport { SetReportType } from '../../../redux/report-type/report-type.actions';\r\nimport { selectReportType } from '../../../redux/report-type/report-type.selectors';\r\nimport FormActions from '../../form-inputs/form-actions.component';\r\nimport FormDate from '../../form-inputs/form-date.component';\r\nimport FormInput from '../../form-inputs/form-input.component';\r\nimport FormTextArea from '../../form-inputs/form-textarea-component';\r\nimport CurrenciesEnum from '../../goaml-enums/currencies-enum/currencies-enum.component';\r\nimport TransactionItemStatusEnum from '../../goaml-enums/transaction-item-status-enum/transaction-item-status-enum.component';\r\nimport TransactionItemTypeEnum from '../../goaml-enums/transaction-item-type-enum/transaction-item-type-enum.component';\r\n\r\nconst TransactionItem = ({ reportType, label, name, setReportType, handleSaveInfoClick, ...otherProps }) => {\r\n\r\n    const [collapsed, setCollapsed] = React.useState(false)\r\n    const [showElements, setShowElements] = React.useState(true)\r\n    let radioItems = [\"Yes\", \"No\"];\r\n    const [transaction, setTransactionState] = React.useState({\r\n        \"item_type\": '',\r\n        \"previous_register_to\": '',\r\n        \"status_code\": '',\r\n        \"size\": '',\r\n        \"registration_number\": '',\r\n        \"item_make\": \"\",\r\n        \"presently_register_to\": '',\r\n        \"disposed_value\": '',\r\n        \"size_UOM\": '',\r\n        \"identification_number\": '',\r\n        \"description\": '',\r\n        \"estimate_value\": 0,\r\n        \"currency_code\": '',\r\n        \"registration_date\": '',\r\n        \"comments\": [],\r\n        \"status_commets\": ''\r\n    });\r\n\r\n    const [touched, setTouched] = React.useState(false);\r\n    const onFocus = () => setTouched(true)\r\n    const onBlur = () => setTouched(false)\r\n\r\n    const [showError, setShowError] = React.useState({isEmpty: false, value: ''});\r\n\r\n    const checkData = (e, inputState) => {\r\n        let error = true;\r\n        let val = {};\r\n        let myValidation;\r\n        if (typeof myValidation === 'string' || 'integer' || 'boolean'){\r\n            for (const [key, value] of Object.entries(inputState)) {\r\n                if (e.target.name === key) {\r\n                    value === null ? error = true : error = false; \r\n                    val = key;\r\n                }\r\n            }\r\n        }\r\n        setShowError({\r\n            isEmpty: error,\r\n            value: val\r\n         });\r\n    }\r\n\r\n    console.log('error', showError)\r\n    \r\n    const handleChange = event => {\r\n        // console.log({event.target});\r\n        const { name, value } = event.target;\r\n        setTransactionState({ ...transaction, [name]: value });\r\n    };\r\n\r\n\r\n    const handleSaveClick = () => {\r\n        if (!transaction.item_type || !transaction.previous_register_to || !transaction.status_code || !transaction.size || !transaction.registration_number ||\r\n            !transaction.item_make || !transaction.disposed_value || !transaction.size_UOM || !transaction.identification_number || !transaction.description ||\r\n            !transaction.estimate_value || !transaction.currency_code || !transaction.registration_date || !transaction.status_commets) {\r\n            alert('please fill this field');\r\n        }\r\n        return setReportType({...reportType, ...transaction});\r\n    }\r\n\r\n    const handleCancelClick = () => {\r\n        console.log(\"Hello: \", reportType);\r\n    }\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                <CCard>\r\n                    <CCardHeader>\r\n                    {label}\r\n                    <div className=\"card-header-actions\">\r\n                        <CButton \r\n                        color=\"link\" \r\n                        className=\"card-header-action btn-minimize\" \r\n                        onClick={() => setCollapsed(!collapsed)}\r\n                        >\r\n                        <CIcon name={collapsed ? 'cil-chevron-bottom':'cil-chevron-top'} />\r\n                        </CButton>\r\n                    </div>\r\n                    </CCardHeader>\r\n                    <CCollapse show={collapsed} timeout={1000}>\r\n                    <CCardBody>\r\n                        <CForm  method=\"post\" className=\"form-horizontal\">\r\n                            <CFormGroup row>\r\n                                <CCol xs=\"4\">\r\n                                    <TransactionItemTypeEnum \r\n                                        label=\"Item Type*\" \r\n                                        name=\"item_Type\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange} \r\n                                        onKeyUp={(e) => checkData(e, transaction)} \r\n                                        className={`form-control ${!transaction.item_type && touched && 'is-invalid'} ${transaction.item_type && 'is-valid'}`}\r\n                                    />\r\n                                    <FormInput \r\n                                        label=\"Previously Registered To\" \r\n                                        name=\"previous_register_to\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange} \r\n                                        onKeyUp={(e) => checkData(e, transaction)} \r\n                                        value={transaction.previous_register_to}\r\n                                        className={`form-control ${!transaction.previous_register_to && touched && 'is-invalid'} ${transaction.presently_register_to && 'is-valid'}`}\r\n                                     />\r\n                                    <TransactionItemStatusEnum \r\n                                        label=\"Status Code\" \r\n                                        name=\"status_code\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange} \r\n                                        onKeyUp={(e) => checkData(e, transaction)}\r\n                                        value={transaction.status_code}\r\n                                        className={`form-control ${!transaction.status_code && touched && 'is-invalid'} ${transaction.status_code && 'is-valid'}`}\r\n                                    />\r\n                                    <FormAmount \r\n                                        label=\"Size\" \r\n                                        name=\"size\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange} \r\n                                        onKeyUp={(e) => checkData(e, transaction)}\r\n                                        value={transaction.size}\r\n                                        className={`form-control ${!transaction.size && touched && 'is-invalid'} ${transaction.size && 'is-valid'}`}\r\n                                    />\r\n                                    <FormInput\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus} \r\n                                        label=\"Registration Number\" \r\n                                        name=\"registration_number\"\r\n                                        placeholder=\"Enter ...\" \r\n                                        handleChange={handleChange} \r\n                                        onKeyUp={(e) => checkData(e, transaction)} \r\n                                        value={transaction.registration_number}\r\n                                        className={`form-control ${!transaction.registration_number && touched && 'is-invalid'} ${transaction.registration_number && 'is-valid'}`}\r\n                                    />\r\n                                </CCol>\r\n                                <CCol xs=\"4\">\r\n                                    <FormInput \r\n                                        label=\"Item Make*\" \r\n                                        name=\"item_make\"\r\n                                        placeholder=\"Enter ...\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange} \r\n                                        onKeyUp={(e) => checkData(e, transaction)} \r\n                                        value={transaction.item_make}\r\n                                        className={`form-control ${!transaction.item_make && touched && 'is-invalid'} ${transaction.item_make && 'is-valid'}`}\r\n                                    />\r\n                                    <FormAmount \r\n                                        label=\"Disposed Value\"\r\n                                        name=\"disposed_value\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange} \r\n                                        onKeyUp={(e) => checkData(e, transaction)} \r\n                                        value={transaction.disposed_value}\r\n                                        className={`form-control ${!transaction.disposed_value && touched && 'is-invalid'} ${transaction.disposed_value && 'is-valid'}`}\r\n                                    />\r\n                                    <FormInput \r\n                                        label=\"Size UOM\" \r\n                                        name=\"size_UOM\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange} \r\n                                        onKeyUp={(e) => checkData(e, transaction)} \r\n                                        value={transaction.size_UOM}\r\n                                        className={`form-control ${!transaction.size_UOM && touched && 'is-invalid'} ${transaction.size_UOM && 'is-valid'}`}\r\n                                    />\r\n                                    <FormInput \r\n                                        label=\"Identification Number\" \r\n                                        name=\"identification_number\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange} \r\n                                        onKeyUp={(e) => checkData(e, transaction)} \r\n                                        value={transaction.identification_number}\r\n                                        className={`form-control ${!transaction.identification_number && touched && 'is-invalid'} ${transaction.identification_number && 'is-valid'}`}\r\n                                    />\r\n                                    <FormTextArea \r\n                                        label=\"Comments\" \r\n                                        name=\"comments\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange} \r\n                                        onKeyUp={(e) => checkData(e, transaction)} \r\n                                        value={transaction.comments} \r\n                                        className={`form-control ${!transaction.comments && touched && 'is-invalid'} ${transaction.comments && 'is-valid'}`}\r\n                                    />\r\n                                </CCol>\r\n                                <CCol xs=\"4\">\r\n                                    <FormInput \r\n                                        label=\"Description*\" \r\n                                        name=\"description\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange} \r\n                                        onKeyUp={(e) => checkData(e, transaction)} \r\n                                        value={transaction.description}\r\n                                        className={`form-control ${!transaction.description && touched && 'is-invalid'} ${transaction.description && 'is-valid'}`}\r\n                                    />\r\n                                    <FormAmount \r\n                                        label=\"Estimated Value\" \r\n                                        name=\"estimate_value\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange} \r\n                                        onKeyUp={(e) => checkData(e, transaction)} \r\n                                        value={transaction.estimate_value}\r\n                                        className={`form-control ${!transaction.estimate_value && touched && 'is-invalid'} ${transaction.estimate_value && 'is-valid'}`}\r\n                                    />\r\n                                    <CurrenciesEnum \r\n                                        label=\"Currency Code*\" \r\n                                        name=\"currency_code\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange} \r\n                                        onKeyUp={(e) => checkData(e, transaction)} \r\n                                        value={transaction.currency_code} \r\n                                        className={`form-control ${!transaction.currency_code && touched && 'is-invalid'} ${transaction.currency_code && 'is-valid'}`}\r\n                                    />\r\n                                    <FormDate \r\n                                        label=\"Registration Date*\" \r\n                                        name=\"registration_date\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange} \r\n                                        onKeyUp={(e) => checkData(e, transaction)} \r\n                                        value={transaction.registration_date} \r\n                                        className={`form-control ${!transaction.registration_date && touched && 'is-invalid'} ${transaction.registration_date && 'is-valid'}`}\r\n                                    />\r\n                                </CCol>\r\n                                <CCol xs=\"12\">\r\n                                    <FormTextArea \r\n                                        label=\"Status Comments\" \r\n                                        name=\"status_comments\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange} \r\n                                        onKeyUp={(e) => checkData(e, transaction)} \r\n                                        value={transaction.status_commets} \r\n                                        className={`form-control ${!transaction.status_commets && touched && 'is-invalid'} ${transaction.status_commets && 'is-valid'}`}\r\n                                    />\r\n                                </CCol>\r\n                            </CFormGroup>\r\n                            <FormActions \r\n                                type=\"submit\" class=\"btn btn-primary\"\r\n                                saveText=\"Save Item\" \r\n                                handleSaveClick={handleSaveClick} \r\n                                handleCancelClick={handleCancelClick}>\r\n                            </FormActions>\r\n                        </CForm>\r\n                    </CCardBody>\r\n                    </CCollapse>\r\n                </CCard>\r\n                </CFade>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    reportType: selectReportType(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setReportType: reportType => dispatch(SetReportType(reportType))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TransactionItem);\r\n","import React from 'react';\r\nimport FormDynamicSelect from '../../form-inputs/form-dynamic-select.component'\r\n\r\nclass CountryCodeEnum extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            options : [\r\n                {value: 'AD', description:'ANDORRA '},\r\n                {value: 'AE', description:'UNITED ARAB EMIRATES'},\r\n                {value: 'AF', description:'AFGHANISTAN '},\r\n                {value: 'AG', description:'ANTIGUA AND BARBUDA '},\r\n                {value: 'AI', description:'ANGUILLA '},\r\n                {value: 'AL', description:' ALBANIA '},\r\n                {value: 'AM', description:'ARMENIA '},\r\n                {value: 'AN', description:'NETHERLANDS ANTILLES '},\r\n                {value: 'AO', description:'ANGOLA '},\r\n                {value: 'AQ', description:'ANTARCTICA '},\r\n                {value: 'AR', description:'ARGENTINA '},\r\n                {value: 'AS', description:'AMERICAN SAMOA '},\r\n                {value: 'AT', description:'AUSTRIA '},\r\n                {value: 'AU', description:'AUSTRALIA '},\r\n                {value: 'AW', description:'ARUBA '},\r\n                {value: 'AX', description:'ÅLAND ISLANDS '},\r\n                {value: 'AZ', description:'AZERBAIJAN '},\r\n                {value: 'BA', description:'BOSNIA AND HERZEGOVINA '},\r\n                {value: 'BB', description:'BARBADOS '},\r\n                {value: 'BD', description:'BANGLADESH '},\r\n                {value: 'BE', description:'BELGIUM '},\r\n                {value: 'BF', description:'BURKINA FASO '},\r\n                {value: 'BG', description:'BULGARIA '},\r\n                {value: 'BH', description:'BAHRAIN '},\r\n                {value: 'BI', description:'BURUNDI '},\r\n                {value: 'BJ', description:'BENIN '},\r\n                {value: 'BM', description:'BERMUDA '},\r\n                {value: 'BN', description:'BRUNEI DARUSSALAM'},\r\n                {value: 'BO', description:'BOLIVIA '},\r\n                {value: 'BR', description:'BRAZIL '},\r\n                {value: 'BS', description:'BAHAMAS '},\r\n                {value: 'BT', description:'BHUTAN '},\r\n                {value: 'BU', description:'BURMA'},\r\n                {value: 'BV', description:'BOUVET ISLAND '},\r\n                {value: 'BW', description:'BOTSWANA '},\r\n                {value: 'BY', description:'BELARUS'},\r\n                {value: 'BZ', description:'BELIZE '},\r\n                {value: 'CA', description:'CANADA '},\r\n                {value: 'CC', description:'COCOS (KEELING) ISLANDS'},\r\n                {value: 'CD', description:'CONGO, THE DEMOCRATIC REPUBLIC OF THE'},\r\n                {value: 'CF', description:'CENTRAL AFRICAN REPUBLIC '},\r\n                {value: 'CG', description:'CONGO '},\r\n                {value: 'CH', description:'SWITZERLAND '},\r\n                {value: 'CI', description:'COTE DIVOIRE'},\r\n                {value: 'CK', description:'COOK ISLANDS '},\r\n                {value: 'CL', description:'CHILE '},\r\n                {value: 'CM', description:'CAMEROON '},\r\n                {value: 'CN', description:'CHINA '},\r\n                {value: 'CO', description:'COLOMBIA '},\r\n                {value: 'CR', description:'COSTA RICA '},\r\n                {value: 'CS', description:'SERBIA AND MONTENEGRO'},\r\n                {value: 'CU', description:'CUBA '},\r\n                {value: 'CV', description:'CAPE VERDE '},\r\n                {value: 'CX', description:'CHRISTMAS ISLAND '},\r\n                {value: 'CY', description:'CYPRUS '},\r\n                {value: 'CZ', description:'CZECH REPUBLIC '},\r\n                {value: 'DE', description:'GERMANY '},\r\n                {value: 'DJ', description:'DJIBOUTI '},\r\n                {value: 'DK', description:'DENMARK '},\r\n                {value: 'DM', description:'DOMINICA '},\r\n                {value: 'DO', description:'DOMINICAN REPUBLIC '},\r\n                {value: 'DZ', description:'ALGERIA '},\r\n                {value: 'EC', description:'ECUADOR '},\r\n                {value: 'EE', description:'ESTONIA '},\r\n                {value: 'EG', description:'EGYPT '},\r\n                {value: 'EH', description:'WESTERN SAHARA '},\r\n                {value: 'ER', description:'ERITREA '},\r\n                {value: 'ES', description:'SPAIN '},\r\n                {value: 'ET', description:'ETHIOPIA '},\r\n                {value: 'FI', description:'FINLAND '},\r\n                {value: 'FJ', description:'FIJI '},\r\n                {value: 'FK', description:'FALKLAND ISLANDS (MALVINAS)'},\r\n                {value: 'FM', description:'MICRONESIA, FEDERATED STATES OF'},\r\n                {value: 'FO', description:'FAROE ISLANDS '},\r\n                {value: 'FR', description:'FRANCE '},\r\n                {value: 'GA', description:'GABON '},\r\n                {value: 'GB', description:'UNITED KINGDOM '},\r\n                {value: 'GD', description:'GRENADA '},\r\n                {value: 'GE', description:'GEORGIA '},\r\n                {value: 'GF', description:'FRENCH GUIANA '},\r\n                {value: 'GG', description:'GUERNSEY '},\r\n                {value: 'GH', description:'GHANA '},\r\n                {value: 'GI', description:'GIBRALTAR '},\r\n                {value: 'GL', description:'GREENLAND '},\r\n                {value: 'GM', description:'GAMBIA '},\r\n                {value: 'GN', description:'GUINEA '},\r\n                {value: 'GP', description:'GUADELOUPE'},\r\n                {value: 'GQ', description:'EQUATORIAL GUINEA'},\r\n                {value: 'GR', description:'GREECE '},\r\n                {value: 'GS', description:'SOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDS'},\r\n                {value: 'GT', description:'GUATEMALA '},\r\n                {value: 'GU', description:'GUAM '},\r\n                {value: 'GW', description:'GUINEA-BISSAU '},\r\n                {value: 'GY', description:'GUYANA '},\r\n                {value: 'HK', description:'HONG KONG '},\r\n                {value: 'HM', description:'HEARD ISLAND AND MCDONALD ISLANDS'},\r\n                {value: 'HN', description:'HONDURAS '},\r\n                {value: 'HR', description:'CROATIA '},\r\n                {value: 'HT', description:'HAITI '},\r\n                {value: 'HU', description:'HUNGARY '},\r\n                {value: 'ID', description:'INDONESIA '},\r\n                {value: 'IE', description:'IRELAND '},\r\n                {value: 'IL', description:'ISRAEL '},\r\n                {value: 'IM', description:'ISLE OF MAN'},\r\n                {value: 'IN', description:'INDIA '},\r\n                {value: 'IO', description:'BRITISH INDIAN OCEAN TERRITORY '},\r\n                {value: 'IQ', description:'IRAQ '},\r\n                {value: 'IR', description:'IRAN, ISLAMIC REPUBLIC OF'},\r\n                {value: 'IS', description:'ICELAND '},\r\n                {value: 'IT', description:'ITALY '},\r\n                {value: 'JE', description:'JERSEY '},\r\n                {value: 'JM', description:'JAMAICA '},\r\n                {value: 'JO', description:'JORDAN '},\r\n                {value: 'JP', description:'JAPAN '},\r\n                {value: 'KE', description:'KENYA '},\r\n                {value: 'KG', description:'KYRGYZSTAN '},\r\n                {value: 'KH', description:'CAMBODIA '},\r\n                {value: 'KI', description:'KIRIBATI '},\r\n                {value: 'KM', description:'COMOROS '},\r\n                {value: 'KN', description:'SAINT KITTS AND NEVIS '},\r\n                {value: 'KP', description:'KOREA, DEMOCRATIC PEOPLES REPUBLIC OF'},\r\n                {value: 'KR', description:'KOREA, REPUBLIC OF'},\r\n                {value: 'KS', description:'KOSOVO'},\r\n                {value: 'KW', description:'KUWAIT '},\r\n                {value: 'KY', description:'CAYMAN ISLANDS '},\r\n                {value: 'KZ', description:'KAZAKHSTAN '},\r\n                {value: 'LA', description:'LAO PEOPLES DEMOCRATIC REPUBLIC'},\r\n                {value: 'LB', description:'LEBANON '},\r\n                {value: 'LC', description:'SAINT LUCIA '},\r\n                {value: 'LI', description:'LIECHTENSTEIN '},\r\n                {value: 'LK', description:'SRI LANKA '},\r\n                {value: 'LR', description:'LIBERIA '},\r\n                {value: 'LS', description:'LESOTHO '},\r\n                {value: 'LT', description:'LITHUANIA '},\r\n                {value: 'LU', description:'LUXEMBOURG '},\r\n                {value: 'LV', description:' LATVIA '},\r\n                {value: 'LY', description:'LIBYAN ARAB JAMAHIRIYA'},\r\n                {value: 'MA', description:'MOROCCO'},\r\n                {value: 'MC', description:'MONACO '},\r\n                {value: 'MD', description:'MOLDOVA, REPUBLIC OF'},\r\n                {value: 'ME', description:'MONTENEGRO '},\r\n                {value: 'MG', description:'MADAGASCAR '},\r\n                {value: 'MH', description:'MARSHALL ISLANDS '},\r\n                {value: 'MK', description:'MACEDONIA '},\r\n                {value: 'ML', description:'MALI '},\r\n                {value: 'MM', description:'MYANMAR '},\r\n                {value: 'MN', description:'MONGOLIA '},\r\n                {value: 'MO', description:'MACAO '},\r\n                {value: 'MP', description:'NORTHERN MARIANA ISLANDS '},\r\n                {value: 'MQ', description:'MARTINIQUE '},\r\n                {value: 'MR', description:'MAURITANIA '},\r\n                {value: 'MS', description:'MONTSERRAT '},\r\n                {value: 'MT', description:'MALTA '},\r\n                {value: 'MU', description:'MAURITIUS '},\r\n                {value: 'MV', description:'MALDIVES '},\r\n                {value: 'MW', description:'MALAWI '},\r\n                {value: 'MX', description:'MEXICO '},\r\n                {value: 'MY', description:'MALAYSIA '},\r\n                {value: 'MZ', description:'MOZAMBIQUE '},\r\n                {value: 'NA', description:'NAMIBIA '},\r\n                {value: 'NC', description:'NEW CALEDONIA '},\r\n                {value: 'NE', description:'NIGER '},\r\n                {value: 'NF', description:'NORFOLK ISLAND '},\r\n                {value: 'NG', description:'NIGERIA '},\r\n                {value: 'NI', description:'NICARAGUA '},\r\n                {value: 'NL', description:'NETHERLANDS '},\r\n                {value: 'NO', description:'NORWAY '},\r\n                {value: 'NP', description:'NEPAL '},\r\n                {value: 'NR', description:'NAURU '},\r\n                {value: 'NU', description:'NIUE '},\r\n                {value: 'NZ', description:'NEW ZEALAND '},\r\n                {value: 'OM', description:' OMAN '},\r\n                {value: 'PA', description:'PANAMA '},\r\n                {value: 'PE', description:'PERU '},\r\n                {value: 'PF', description:'FRENCH POLYNESIA '},\r\n                {value: 'PG', description:'PAPUA NEW GUINEA'},\r\n                {value: 'PH', description:'PHILIPPINES '},\r\n                {value: 'PK', description:'PAKISTAN '},\r\n                {value: 'PL', description:'POLAND '},\r\n                {value: 'PM', description:'SAINT PIERRE AND MIQUELON '},\r\n                {value: 'PN', description:'PITCAIRN'},\r\n                {value: 'PR', description:'PUERTO RICO '},\r\n                {value: 'PS', description:'PALESTINIAN TERRITORY, OCCUPIED'},\r\n                {value: 'PT', description:'PORTUGAL '},\r\n                {value: 'PW', description:'PALAU '},\r\n                {value: 'PY', description:'PARAGUAY '},\r\n                {value: 'QA', description:'QATAR '},\r\n                {value: 'RE', description:'REUNION '},\r\n                {value: 'RO', description:'ROMANIA'},\r\n                {value: 'RS', description:'SERBIA '},\r\n                {value: 'RU', description:'RUSSIAN FEDERATION '},\r\n                {value: 'RW', description:'RWANDA '},\r\n                {value: 'SA', description:'SAUDI ARABIA '},\r\n                {value: 'SB', description:'SOLOMON ISLANDS '},\r\n                {value: 'SC', description:'SEYCHELLES '},\r\n                {value: 'SD', description:'SUDAN '},\r\n                {value: 'SE', description:'SWEDEN '},\r\n                {value: 'SG', description:'SINGAPORE '},\r\n                {value: 'SH', description:'SAINT HELENA '},\r\n                {value: 'SI', description:'SLOVENIA '},\r\n                {value: 'SJ', description:'SVALBARD AND JAN MAYEN'},\r\n                {value: 'SK', description:'SLOVAKIA '},\r\n                {value: 'SL', description:'SIERRA LEONE'},\r\n                {value: 'SM', description:'SAN MARINO '},\r\n                {value: 'SN', description:'SENEGAL '},\r\n                {value: 'SO', description:'SOMALIA '},\r\n                {value: 'SR', description:'SURINAME '},\r\n                {value: 'ST', description:'SAO TOME AND PRINCIPE '},\r\n                {value: 'SV', description:'EL SALVADOR '},\r\n                {value: 'SY', description:'SYRIAN ARAB REPUBLIC '},\r\n                {value: 'SZ', description:'SWAZILAND '},\r\n                {value: 'TC', description:'TURKS AND CAICOS ISLANDS '},\r\n                {value: 'TD', description:'CHAD '},\r\n                {value: 'TF', description:'FRENCH SOUTHERN TERRITORIES'},\r\n                {value: 'TG', description:'TOGO '},\r\n                {value: 'TH', description:'THAILAND '},\r\n                {value: 'TJ', description:'TAJIKISTAN '},\r\n                {value: 'TK', description:'TOKELAU'},\r\n                {value: 'TL', description:'TIMOR-LESTE'},\r\n                {value: 'TM', description:'TURKMENISTAN '},\r\n                {value: 'TN', description:'TUNISIA '},\r\n                {value: 'TO', description:'TONGA '},\r\n                {value: 'TP', description:'EAST TIMOR'},\r\n                {value: 'TR', description:'TURKEY '},\r\n                {value: 'TT', description:'TRINIDAD AND TOBAGO '},\r\n                {value: 'TV', description:'TUVALU '},\r\n                {value: 'TW', description:'TAIWAN, PROVINCE OF CHINA'},\r\n                {value: 'TZ', description:'TANZANIA, UNITED REPUBLIC OF'},\r\n                {value: 'UA', description:'UKRAINE '},\r\n                {value: 'UG', description:'UGANDA '},\r\n                {value: 'UM', description:'UNITED STATES MINOR OUTLYING ISLANDS'},\r\n                {value: 'US', description:'UNITED STATES'},\r\n                {value: 'UY', description:'URUGUAY '},\r\n                {value: 'UZ', description:'UZBEKISTAN '},\r\n                {value: 'VA', description:'HOLY SEE (VATICAN CITY STATE)'},\r\n                {value: 'VC', description:'SAINT VINCENT AND THE GRENADINES'},\r\n                {value: 'VE', description:'VENEZUELA '},\r\n                {value: 'VG', description:'VIRGIN ISLANDS, BRITISH'},\r\n                {value: 'VI', description:'VIRGIN ISLANDS, U.S. '},\r\n                {value: 'VN', description:'VIET NAM'},\r\n                {value: 'VU', description:'VANUATU '},\r\n                {value: 'WF', description:'WALLIS AND FUTUNA'},\r\n                {value: 'WS', description:'SAMOA '},\r\n                {value: 'YE', description:'YEMEN '},\r\n                {value: 'YT', description:'MAYOTTE '},\r\n                {value: 'YU', description:'YUGOSLAVIA'},\r\n                {value: 'ZA', description:'SOUTH AFRICA '},\r\n                {value: 'ZM', description:'ZAMBIA '},\r\n                {value: 'ZR', description:'ZAIRE'},\r\n                {value: 'ZW', description:'ZIMBABWE'}\r\n            ]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { options } = this.state;\r\n        const { name, label, handleChange } = this.props;\r\n        \r\n        return(\r\n            <FormDynamicSelect label={label} name={name} options={options} handleChange={handleChange} />\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default CountryCodeEnum;","import React from 'react';\r\nimport FormDynamicSelect from '../../form-inputs/form-dynamic-select.component'\r\n\r\nclass FundsTypeEnum extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            options : [\r\n                {value: 'A', description:'Deposit'},\r\n                {value: 'B', description:'Electronic Funds Transfer'},\r\n                {value: 'E', description:'Bank Draft'},\r\n                {value: 'F', description:'Managers Cheque'},\r\n                {value: 'G', description:'Travelers cheque'},\r\n                {value: 'H', description:'Life insurance policy'},\r\n                {value: 'K', description:'Cash'},\r\n                {value: 'L', description:'From Account'},\r\n                {value: 'O', description:'Other'},\r\n                {value: 'P', description:'Cheque'}\r\n            ]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { options } = this.state;\r\n        const { name, label, handleChange } = this.props;\r\n        \r\n        return(\r\n            <FormDynamicSelect label={label} name={name} options={options} handleChange={handleChange} />\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default FundsTypeEnum;","import React from 'react';\r\nimport FormDynamicSelect from '../../form-inputs/form-dynamic-select.component'\r\n\r\nclass PartyTypeEnum extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            options: [\r\n                { value: 'Person', description: 'Person' },\r\n                { value: 'Account', description: 'Account' },\r\n                { value: 'Entity', description: 'Entity' }\r\n            ]\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { options } = this.state;\r\n        const { name, label, handleChange } = this.props;\r\n\r\n        return (\r\n            <FormDynamicSelect label={label} name={name} options={options} handleChange={handleChange} />\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default PartyTypeEnum;","import CIcon from '@coreui/icons-react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup,\r\n    CRow\r\n} from '@coreui/react';\r\nimport React from 'react';\r\nimport FormAmount from 'src/components/form-inputs/form-amount.component';\r\nimport FormActions from '../../form-inputs/form-actions.component';\r\nimport FormInput from '../../form-inputs/form-input.component';\r\nimport CountryCodeEnum from '../../goaml-enums/country-code-enum/country-code-enum.component';\r\nimport CurrenciesEnum from '../../goaml-enums/currencies-enum/currencies-enum.component';\r\nimport FundsTypeEnum from '../../goaml-enums/funds-type-enum/funds-type-enum.component';\r\nimport PartyTypeEnum from '../../goaml-enums/party-type-enum/party-type-enum.components';\r\n\r\n\r\nconst TransactionToPartyInfo = ({ name, transRef, partyType, handleSavePartyInfo, ...otherProps }) => {\r\n\r\n    const [collapsed, setCollapsed] = React.useState(true)\r\n    let radioItems = [\"Yes\", \"No\"];\r\n\r\n    const [collapseMulti, setCollapseMulti] = React.useState([false, false, false, false, false, false])\r\n    let [showElements, setShowElements] = React.useState(true)\r\n    const [transpartyInfo, setTranspartyInfo] = React.useState({\r\n        \"partyType\": '',\r\n        \"partyInfo\": {\r\n            \"to_funds_code\": '',\r\n            \"to_funds_comment\": '',\r\n            \"to_foreign_currency\": {\r\n                \"foreign_currency_code\": '',\r\n                \"foreign_amount\": '',\r\n                \"foreign_exchange_rate\": '',\r\n            },\r\n            \"to_country\": ''\r\n        }\r\n    })\r\n\r\n    const [touched, setTouched] = React.useState(false);\r\n    const onFocus = () => setTouched(true)\r\n    const onBlur = () => setTouched(false)\r\n\r\n    const [showError, setShowError] = React.useState({isEmpty: false, value: ''});\r\n\r\n    const checkInputs = (e, inputState) => {\r\n        let error = false;\r\n        let val = {};\r\n        let myValidation;\r\n        if (typeof myValidation === 'string' || 'integer' || 'boolean'){\r\n            for (const [key, value] of Object.entries(inputState)) {\r\n                if (e.target.name === key) {\r\n                    value === null ? error = true : error = false; \r\n                    val = key;\r\n                }\r\n            }\r\n        }\r\n        setShowError({\r\n            isEmpty: error,\r\n            value: val\r\n         });\r\n    }\r\n    \r\n    console.log('error', showError)\r\n\r\n    const toggleMulti = (type) => {\r\n        let newCollapse = collapseMulti.slice()\r\n        switch (type) {\r\n            case \"person-conductor\":\r\n                newCollapse[0] = !collapseMulti[0];\r\n                break;\r\n            default:\r\n        }\r\n        setCollapseMulti(newCollapse)\r\n    }\r\n\r\n    const handleChange = event => {\r\n        // console.log(event.target);\r\n        const { name, value } = event.target;\r\n        setTranspartyInfo({ ...transpartyInfo, [name]: value });\r\n    };\r\n\r\n    const handleSaveClick = () => {\r\n        if (!transpartyInfo.from_funds_code || !transpartyInfo.from_funds_comment || !transpartyInfo.from_country || !transpartyInfo.partyType\r\n            || !transpartyInfo.foreign_currency_code){\r\n            alert('please complete this field')\r\n        }\r\n        console.log('great', fromPtyInfo)\r\n       const fromPtyInfo = handleSavePartyInfo(transRef, partyType, transpartyInfo);\r\n        if (fromPtyInfo === \"partyType\")\r\n            setTranspartyInfo({ ...transpartyInfo, fromPtyInfo });\r\n        else if (fromPtyInfo === \"foreign_currency_code\" || fromPtyInfo === \"foreign_amount\" || fromPtyInfo === \"foreign_exchange_rate\")\r\n            setTranspartyInfo({\r\n                ...transpartyInfo, partyInfo: { ...transpartyInfo.partyInfo, \r\n                    to_foreign_currency: { ...transpartyInfo.partyInfo.to_foreign_currency, fromPtyInfo }}\r\n            });\r\n        else\r\n            setTranspartyInfo({ ...transpartyInfo, partyInfo: { ...transpartyInfo.partyInfo, fromPtyInfo } });\r\n    }\r\n\r\n    const handleCancelClick = () => {\r\n        // console.log(\"Hello: \", transpartyInfo);\r\n    }\r\n\r\n    const handleSaveConductor = (conductor) => {\r\n        setTranspartyInfo({ ...transpartyInfo, partyInfo: { ...transpartyInfo.partyInfo, t_conductor: conductor } });\r\n    }\r\n\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                    <CCard>\r\n                        <CCardHeader>\r\n                            {name}\r\n                            <div className=\"card-header-actions\">\r\n                                <CButton\r\n                                    color=\"link\"\r\n                                    className=\"card-header-action btn-minimize\"\r\n                                    onClick={() => setCollapsed(!collapsed)}\r\n                                >\r\n                                    <CIcon name={collapsed ? 'cil-chevron-bottom' : 'cil-chevron-top'} />\r\n                                </CButton>\r\n                            </div>\r\n                        </CCardHeader>\r\n                        <CCollapse show={collapsed} timeout={1000}>\r\n                            <CCardBody>\r\n                                <CForm className=\"form-horizontal\">\r\n                                    <CFormGroup row>\r\n                                        <CCol xs=\"6\">\r\n                                            <FundsTypeEnum \r\n                                                name=\"to_funds_code\" \r\n                                                label=\"Funds Code*\" \r\n                                                handleChange={handleChange}\r\n                                                value={transpartyInfo.to_funds_code}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)} \r\n                                                className={`form-control ${!transpartyInfo.to_funds_code && touched && 'is-invalid'} ${transpartyInfo.to_funds_code && 'is-valid'}`} \r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"6\">\r\n                                            <FormInput \r\n                                                label=\"Funds Comment\" \r\n                                                name=\"to_funds_comment\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                value={transpartyInfo.from_funds_comment}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                className={`form-control ${!transpartyInfo.to_funds_comment && touched && 'is-invalid'} ${transpartyInfo.to_funds_comment && 'is-valid'}`} \r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"6\">\r\n                                            <CountryCodeEnum \r\n                                                label=\"Country*\" \r\n                                                name=\"to_country\" \r\n                                                handleChange={handleChange}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                value={transpartyInfo.to_country}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                className={`form-control ${!transpartyInfo.to_country && touched && 'is-invalid'} ${transpartyInfo.to_country && 'is-valid'}`} \r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"6\">\r\n                                            <PartyTypeEnum \r\n                                                handleChange={handleChange} \r\n                                                label=\"Related Party Type*\" \r\n                                                name=\"partyType\"\r\n                                                value={transpartyInfo.partyType}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                className={`form-control ${!transpartyInfo.partyType && touched && 'is-invalid'} ${transpartyInfo.partyType && 'is-valid'}`} \r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <CurrenciesEnum \r\n                                                handleChange={handleChange} \r\n                                                label=\"Currency Code*\" \r\n                                                name=\"foreign_currency_code\"\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                value={transpartyInfo.foreign_currency_code}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                className={`form-control ${!transpartyInfo.foreign_currency_code && touched && 'is-invalid'} ${transpartyInfo.foreign_currency_code && 'is-valid'}`} \r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormAmount \r\n                                                handleChange={handleChange} \r\n                                                label=\"Exchange Rate*\" \r\n                                                name=\"foreign_exchange_rate\"\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                value={transpartyInfo.foreign_exchange_rate}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                className={`form-control ${!transpartyInfo.foreign_exchange_rate && touched && 'is-invalid'} ${transpartyInfo.foreign_exchange_rate && 'is-valid'}`} \r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormAmount \r\n                                                handleChange={handleChange} \r\n                                                label=\"Amount*\" \r\n                                                name=\"foreign_amount\"\r\n                                                value={transpartyInfo.foreign_amount}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                className={`form-control ${!transpartyInfo.foreign_amount && touched && 'is-invalid'} ${transpartyInfo.foreign_amount && 'is-valid'}`} \r\n                                            />\r\n                                        </CCol>\r\n                                    </CFormGroup>\r\n                                </CForm>\r\n                                <FormActions \r\n                                    saveText=\"Save Party Overview\" \r\n                                    handleSaveClick={handleSaveClick} \r\n                                    handleCancelClick={handleCancelClick}></FormActions>\r\n                            </CCardBody>\r\n                        </CCollapse>\r\n                    </CCard>\r\n                </CFade>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nexport default TransactionToPartyInfo;\r\n","import React from 'react';\r\nimport CombinedTable from './combined-table.component'\r\nimport usersData from '../../views/users/UsersData'\r\n\r\nconst fields = ['name','registered', 'role', 'status']\r\n\r\nclass PersonTable extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            transactionData : usersData\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { transactionData } = this.state;\r\n        // const { name } = this.props;\r\n        \r\n        return(\r\n            <CombinedTable name=\"Persons Table\" fields={fields} tableData={transactionData} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default PersonTable;","import React from 'react';\r\nimport {\r\n    CFormGroup,\r\n    CInput,\r\n    CInputGroup,\r\n    CInputGroupAppend,\r\n    CInputGroupText,\r\n    CLabel  } from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\n\r\nconst FormEmail = ({ label, name, placeholder, handleChange, ...otherProps }) => (\r\n  <CFormGroup>\r\n          {label ? (\r\n            <CLabel htmlFor={name}>{label}</CLabel>\r\n          ) : null}\r\n            <CInputGroup>\r\n                <CInput type=\"email\" id={name} name={name} onChange={handleChange} {...otherProps} placeholder={placeholder} />\r\n                <CInputGroupAppend>\r\n                <CInputGroupText>\r\n                    <CIcon name=\"cil-envelope-closed\" />\r\n                </CInputGroupText>\r\n                </CInputGroupAppend>\r\n            </CInputGroup>\r\n        </CFormGroup>\r\n);\r\n\r\nexport default FormEmail;\r\n","import React from 'react';\r\nimport {\r\n    CFormGroup,\r\n    CLabel,\r\n    CSelect\r\n  } from '@coreui/react'\r\n  \r\nclass FormGenderSelect extends React.Component {\r\n    constructor() {\r\n      super();\r\n    }\r\n  \r\n    render() {\r\n      const { label, name, handleChange, ...otherProps } = this.props;\r\n      const options = [\r\n        {value:\"0\", description: \"--select--\"},\r\n        {value:\"M\", description: \"Male\"},\r\n        {value:\"F\", description: \"Female\"}\r\n      ];\r\n\r\n      return (\r\n        <CFormGroup>\r\n            {label ? (\r\n                <CLabel htmlFor={name}>{label}</CLabel>\r\n                ) : null}\r\n            {options && options.length > 0 && (\r\n                <CSelect custom name={name} id={name} onChange={handleChange}>\r\n                    {options.map((option, index) => {\r\n                        return <option value={option.value}>{option.description}</option>;\r\n                    })}\r\n                </CSelect>\r\n            )}\r\n        </CFormGroup>\r\n      );\r\n    }\r\n}\r\n\r\nexport default FormGenderSelect;","import React from 'react';\r\nimport CombinedTable from './combined-table.component'\r\nimport usersData from '../../views/users/UsersData'\r\n\r\nconst fields = ['name','registered', 'role', 'status']\r\n\r\nclass AddressTable extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            transactionData : usersData\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { transactionData } = this.state;\r\n        // const { name } = this.props;\r\n        \r\n        return(\r\n            <CombinedTable name=\"Addresses Table\" fields={fields} tableData={transactionData} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddressTable;","import React from 'react';\r\nimport FormDynamicSelect from '../../form-inputs/form-dynamic-select.component'\r\n\r\nclass ContactTypeEnum extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            options : [\r\n                {value: 'B', description:'Business'},\r\n                {value: 'P', description:'Private'}\r\n            ]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { options } = this.state;\r\n        const { name, label, handleChange } = this.props;\r\n        \r\n        return(\r\n            <FormDynamicSelect label={label} name={name} options={options} handleChange={handleChange} />\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default ContactTypeEnum;","import CIcon from '@coreui/icons-react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup,\r\n    CRow\r\n} from '@coreui/react';\r\nimport React from 'react';\r\nimport FormActions from '../../form-inputs/form-actions.component';\r\nimport FormInput from '../../form-inputs/form-input.component';\r\nimport FormTextArea from '../../form-inputs/form-textarea-component';\r\nimport ContactTypeEnum from '../../goaml-enums/contact-type-enum/contact-type-enum.component';\r\nimport CountryCodeEnum from '../../goaml-enums/country-code-enum/country-code-enum.component';\r\n\r\nconst TemplateAddress = ({ name, handleAddressSave, ...otherProps }) => {\r\n\r\n    const [collapsed, setCollapsed] = React.useState(false)\r\n    const [showElements, setShowElements] = React.useState(true)\r\n    let radioItems = [\"Yes\", \"No\"];\r\n    const [templateAddress, setComponentState] = React.useState({\r\n        \"address_type\": '',\r\n        \"address\": '',\r\n        \"town\": '',\r\n        \"city\": null,\r\n        \"zip\": 0,\r\n        \"country_code\": 0,\r\n        \"state\": '',\r\n        \"comments\": ''\r\n      });\r\n\r\n      const [touched, setTouched] = React.useState(false);\r\n    const onFocus = () => setTouched(true)\r\n    const onBlur = () => setTouched(false)\r\n\r\n    const [showError, setShowError] = React.useState({isEmpty: false, value: ''});\r\n\r\n    const checkInputs = (e, inputState) => {\r\n        let error = false;\r\n        let val = {};\r\n        let myValidation = templateAddress;\r\n        if (typeof myValidation === 'string'|| 'integer' || 'boolean'){\r\n            for (const [key, value] of Object.entries(inputState)) {\r\n                if (e.target.name === key) {\r\n                    value === null ? error = true : error = false; \r\n                    val = key;\r\n                } \r\n            }\r\n        }\r\n        setShowError({\r\n            isEmpty: error,\r\n            value: val\r\n         });\r\n    }\r\n    \r\n    console.log('error', showError)\r\n\r\n    const handleSaveClick = () => {\r\n        if (!templateAddress.address_type || templateAddress.city || !templateAddress.country_code || !templateAddress.address || !templateAddress.state ||\r\n            !templateAddress.town || !templateAddress.zip) {\r\n            alert('please fill this field')\r\n        }\r\n        console.log({templateAddress});\r\n        handleAddressSave(templateAddress);\r\n    }\r\n\r\n    const handleChange = event => {\r\n        const { name, value } = event.target;\r\n        setComponentState({ ...templateAddress, [name]: value });\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        console.log(\"Hello: \", templateAddress);\r\n    }\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                <CCard>\r\n                    <CCardHeader>\r\n                    {name}\r\n                    <div className=\"card-header-actions\">\r\n                        <CButton \r\n                        color=\"link\" \r\n                        className=\"card-header-action btn-minimize\" \r\n                        onClick={() => setCollapsed(!collapsed)}\r\n                        >\r\n                        <CIcon name={collapsed ? 'cil-chevron-bottom':'cil-chevron-top'} />\r\n                        </CButton>\r\n                    </div>\r\n                    </CCardHeader>\r\n                    <CCollapse show={collapsed} timeout={1000}>\r\n                    <CCardBody>\r\n                        <CForm className=\"form-horizontal\">\r\n                            <CFormGroup row>\r\n                                <CCol xs=\"4\">\r\n                                    <ContactTypeEnum \r\n                                        label=\"Type*\" \r\n                                        name=\"address_type\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange}\r\n                                        value={templateAddress.address_type} \r\n                                        onKeyUp={(e) => checkInputs(e, templateAddress)} \r\n                                        className={`form-control ${!templateAddress.address_type && touched && 'is-invalid'} ${templateAddress.address_type && 'is-valid'}`}\r\n                                    ></ContactTypeEnum>\r\n                                    <FormInput \r\n                                        label=\"City*\" \r\n                                        name=\"city\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange}\r\n                                        value={templateAddress.city}\r\n                                        onKeyUp={(e) => checkInputs(e, )} templateAddress\r\n                                        className={`form-control ${!templateAddress.city && touched && 'is-invalid'} ${templateAddress.city && 'is-valid'}`}\r\n                                    />\r\n                                    <CountryCodeEnum \r\n                                        label=\"Nationality1\"\r\n                                        name=\"country_code\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange}\r\n                                        value={templateAddress.country_code}\r\n                                        onKeyUp={(e) => checkInputs(e, )} templateAddress\r\n                                        className={`form-control ${!templateAddress.country_code && touched && 'is-invalid'} ${templateAddress.country_code && 'is-valid'}`}\r\n                                    />\r\n                                </CCol>\r\n                                <CCol xs=\"4\">\r\n                                    <FormInput \r\n                                        label=\"Address*\" \r\n                                        name=\"address\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange}\r\n                                        value={templateAddress.address}\r\n                                        onKeyUp={(e) => checkInputs(e, )} templateAddress \r\n                                        className={`form-control ${!templateAddress.address && touched && 'is-invalid'} ${templateAddress.address && 'is-valid'}`}\r\n                                    />\r\n                                    <FormInput \r\n                                        label=\"Province/State\" \r\n                                        name=\"state\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange}\r\n                                        onKeyUp={(e) => checkInputs(e, )} templateAddress\r\n                                        value={templateAddress.state} \r\n                                        className={`form-control ${!templateAddress.state && touched && 'is-invalid'} ${templateAddress.state && 'is-valid'}`}\r\n                                    />                                    \r\n                                </CCol>\r\n                                <CCol xs=\"4\">\r\n                                    <FormInput \r\n                                        label=\"Town\" \r\n                                        name=\"town\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange} \r\n                                        onKeyUp={(e) => checkInputs(e, )} templateAddress\r\n                                        value={templateAddress.town} \r\n                                        className={`form-control ${!templateAddress.town && touched && 'is-invalid'} ${templateAddress.town && 'is-valid'}`}\r\n                                    />\r\n                                    <FormInput \r\n                                        label=\"Postal/Zip\" \r\n                                        name=\"zip\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        onKeyUp={(e) => checkInputs(e, )} templateAddress\r\n                                        handleChange={handleChange}\r\n                                        value={templateAddress.zip} \r\n                                        className={`form-control ${!templateAddress.zip && touched && 'is-invalid'} ${templateAddress.zip && 'is-valid'}`}\r\n                                    />\r\n                                </CCol>\r\n                                <CCol xs=\"12\">\r\n                                    <FormTextArea \r\n                                        label=\"Comments\" \r\n                                        name=\"comments\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange}\r\n                                        onKeyUp={(e) => checkInputs(e, )} templateAddress\r\n                                        value={templateAddress.comments} \r\n                                        className={`form-control ${!templateAddress.comments && touched && 'is-invalid'} ${templateAddress.comments && 'is-valid'}`} \r\n                                    />\r\n                                </CCol>\r\n                            </CFormGroup>\r\n                            <FormActions \r\n                                saveText=\"Save Address\" \r\n                                handleSaveClick={handleSaveClick} \r\n                                handleCancelClick={handleCancelClick}\r\n                            ></FormActions>\r\n                        </CForm>\r\n                    </CCardBody>\r\n                    </CCollapse>\r\n                </CCard>\r\n                </CFade>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nexport default TemplateAddress;","import React from 'react';\r\nimport AddressTable from '../../goaml-tables/table-address.component'\r\nimport AddressTemplate from '../template-address/template-address.components'\r\nimport {\r\n    CLabel,\r\n    CCard,\r\n    CCardBody,\r\n    CCol,\r\n    CFade,\r\n    CRow,\r\n    CNav,\r\n    CNavItem,\r\n    CNavLink,\r\n    CTabContent,\r\n    CTabPane,\r\n    CTabs,\r\n} from '@coreui/react'\r\n\r\nconst ReportAddresses = ({ name, label, handleAddressSave, ...otherProps }) => {\r\n\r\n    let [showElements, setShowElements] = React.useState(true)\r\n    const tab1Title = `Add ${name}`;\r\n    const tab2Title = `${name} Table`;\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                {label ? (\r\n                    <CLabel htmlFor={name}>{label}</CLabel>\r\n                ) : null}\r\n                <div className=\"row\">\r\n                    <CCol xs=\"12\">\r\n                        <CTabs activeTab=\"Tab1\">\r\n                            <CNav variant=\"tabs\">\r\n                                <CNavItem>\r\n                                    <CNavLink data-tab=\"Tab1\">\r\n                                        {tab1Title}\r\n                                    </CNavLink>\r\n                                </CNavItem>\r\n                                <CNavItem>\r\n                                    <CNavLink data-tab=\"Tab2\">\r\n                                        {tab2Title}\r\n                                    </CNavLink>\r\n                                </CNavItem>\r\n                            </CNav>\r\n                            <CTabContent>\r\n                                <CTabPane data-tab=\"Tab1\">\r\n                                    <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                                        <CCard>\r\n                                            <CCardBody>\r\n                                                <CRow>\r\n                                                    <CCol className=\"col-sm-12\">\r\n                                                        <AddressTemplate name=\"Add an Address\" handleAddressSave={handleAddressSave}></AddressTemplate>\r\n                                                    </CCol>\r\n                                                </CRow>\r\n                                            </CCardBody>\r\n                                        </CCard>\r\n                                    </CFade>\r\n                                </CTabPane>\r\n                                <CTabPane data-tab=\"Tab2\">\r\n                                    <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                                        <CCard>\r\n                                            <CCardBody>\r\n                                                <CRow>\r\n                                                    <CCol className=\"col-sm-12\">\r\n                                                        <AddressTable name={name} />\r\n                                                    </CCol>\r\n                                                </CRow>\r\n                                            </CCardBody>\r\n                                        </CCard>\r\n                                    </CFade>\r\n                                </CTabPane>\r\n                            </CTabContent>\r\n                        </CTabs>\r\n                    </CCol>\r\n                </div>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nexport default ReportAddresses;","import React from 'react';\r\nimport CombinedTable from './combined-table.component'\r\nimport usersData from '../../views/users/UsersData'\r\n\r\nconst fields = ['name','registered', 'role', 'status']\r\n\r\nclass IdentificationTable extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            transactionData : usersData\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { transactionData } = this.state;\r\n        // const { name } = this.props;\r\n        \r\n        return(\r\n            <CombinedTable name=\"Identification Table\" fields={fields} tableData={transactionData} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default IdentificationTable;","import React from 'react';\r\nimport FormDynamicSelect from '../../form-inputs/form-dynamic-select.component'\r\n\r\nclass IdentifierTypeEnum extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            options : [\r\n                {value: 'A', description:'Drivers license'},\r\n                {value: 'B', description:'National Identity Card'},\r\n                {value: 'C', description:'Passport'},\r\n                {value: 'E', description:'Voter’s Registration Card'},\r\n                {value: 'R', description:'RC No'},\r\n                {value: 'O', description:'3rd Party ID'}\r\n            ]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { options } = this.state;\r\n        const { name, label, handleChange } = this.props;\r\n        \r\n        return(\r\n            <FormDynamicSelect label={label} name={name} options={options} handleChange={handleChange} />\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default IdentifierTypeEnum;","import CIcon from '@coreui/icons-react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup,\r\n    CRow\r\n} from '@coreui/react';\r\nimport React from 'react';\r\nimport FormActions from '../../form-inputs/form-actions.component';\r\nimport FormDate from '../../form-inputs/form-date.component';\r\nimport FormInput from '../../form-inputs/form-input.component';\r\nimport FormTextArea from '../../form-inputs/form-textarea-component';\r\nimport CountryCodeEnum from '../../goaml-enums/country-code-enum/country-code-enum.component';\r\nimport IdentifierTypeEnum from '../../goaml-enums/identifier-type-enum/identifier-type-enum.component';\r\n\r\nconst IdentificationTemplate = ({ name, handleIdentificationSave, ...otherProps }) => {\r\n\r\n    const [collapsed, setCollapsed] = React.useState(false)\r\n    const [showElements, setShowElements] = React.useState(true)\r\n    let radioItems = [\"Yes\", \"No\"];\r\n    const [templateIdentification, setComponentState] = React.useState({\r\n        \"type\": 0,\r\n        \"number\": '',\r\n        \"issue_date\": '',\r\n        \"expiry_date\": '',\r\n        \"issue_dateSpecified\": false,\r\n        \"expiry_dateSpecified\": false,\r\n        \"issued_by\": '',\r\n        \"issue_country\": '',\r\n        \"comments\": ''\r\n      });\r\n\r\n    const [touched, setTouched] = React.useState(false);\r\n    const onFocus = () => setTouched(true)\r\n    const onBlur = () => setTouched(false)\r\n\r\n    const handleSaveClick = () => {\r\n        if (!templateIdentification.type || !templateIdentification.number || !templateIdentification.issue_date || !templateIdentification.expiry_date ||\r\n            !templateIdentification.issue_country || !templateIdentification.expiry_date) {\r\n            alert('please fill this field');\r\n        }\r\n        handleIdentificationSave(templateIdentification);\r\n    }\r\n\r\n    const handleChange = event => {\r\n        // console.log(event.target);\r\n        const { name, value } = event.target;\r\n        setComponentState({ ...templateIdentification, [name]: value });\r\n    };\r\n\r\n    const [showError, setShowError] = React.useState({isEmpty: false, value: ''});\r\n\r\n    const checkInputs = (e, inputState) => {\r\n        let error = false;\r\n        let val = {};\r\n        let myValidation;\r\n        if (typeof myValidation === 'string' || 'integer' || 'boolean'){\r\n            for (const [key, value] of Object.entries(inputState)) {\r\n                if (e.target.name === key) {\r\n                    value === null ? error = true : error = false; \r\n                    val = key;\r\n                }\r\n            }\r\n        }\r\n        setShowError({\r\n            isEmpty: error,\r\n            value: val\r\n         });\r\n    }\r\n    \r\n    console.log('error', showError)\r\n\r\n    const handleCancelClick = () => {\r\n        console.log(\"Hello: \", templateIdentification);\r\n    }\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                <CCard>\r\n                    <CCardHeader>\r\n                    {name}\r\n                    <div className=\"card-header-actions\">\r\n                        <CButton \r\n                        color=\"link\" \r\n                        className=\"card-header-action btn-minimize\" \r\n                        onClick={() => setCollapsed(!collapsed)}\r\n                        >\r\n                        <CIcon name={collapsed ? 'cil-chevron-bottom':'cil-chevron-top'} />\r\n                        </CButton>\r\n                    </div>\r\n                    </CCardHeader>\r\n                    <CCollapse show={collapsed} timeout={1000}>\r\n                    <CCardBody>\r\n                        <CForm className=\"form-horizontal\">\r\n                            <CFormGroup row>\r\n                                <CCol xs=\"4\">\r\n                                    <IdentifierTypeEnum \r\n                                        label=\"Type*\" \r\n                                        name=\"type\" \r\n                                        handleChange={handleChange}\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        onKeyUp={(e) => checkInputs(e, templateIdentification)}\r\n                                        value={templateIdentification.type} \r\n                                        className={`form-control ${!templateIdentification.type && touched && 'is-invalid'}${templateIdentification.type && 'is-valid'}`}\r\n                                    ></IdentifierTypeEnum>\r\n                                    <FormInput \r\n                                        label=\"Issued by\" \r\n                                        name=\"issued_by\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        handleChange={handleChange}\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        onKeyUp={(e) => checkInputs(e, templateIdentification)}\r\n                                        value={templateIdentification.issued_by} \r\n                                        className={`form-control ${!templateIdentification.issued_by && touched && 'is-invalid'}${templateIdentification.issued_by && 'is-valid'}`}\r\n                                    />\r\n                                </CCol>\r\n                                <CCol xs=\"4\">\r\n                                    <FormInput \r\n                                        label=\"Number*\" \r\n                                        name=\"number\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        handleChange={handleChange}\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        onKeyUp={(e) => checkInputs(e, templateIdentification)}\r\n                                        value={templateIdentification.number} \r\n                                        className={`form-control ${!templateIdentification.number && touched && 'is-invalid'}${templateIdentification.number && 'is-valid'}`}  \r\n                                    />\r\n                                    <CountryCodeEnum \r\n                                        label=\"Issue Country*\" \r\n                                        name=\"issue_country\" \r\n                                        handleChange={handleChange}\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        onKeyUp={(e) => checkInputs(e, templateIdentification)}\r\n                                        value={templateIdentification.issue_country} \r\n                                        className={`form-control ${!templateIdentification.issue_country && touched && 'is-invalid'}${templateIdentification.issue_country && 'is-valid'}`}\r\n                                    />\r\n                                </CCol>\r\n                                <CCol xs=\"4\">\r\n                                    <FormDate \r\n                                        type=\"date\"\r\n                                        label=\"Issue Date\" \r\n                                        name=\"issue_date\" \r\n                                        handleChange={handleChange}\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        onKeyUp={(e) => checkInputs(e, templateIdentification)}\r\n                                        value={templateIdentification.issue_date} \r\n                                        className={`form-control ${!templateIdentification.issue_date && touched && 'is-invalid'}${templateIdentification.issue_date && 'is-valid'}`} \r\n                                    />\r\n                                    <FormDate \r\n                                        label=\"Expiry Date\" \r\n                                        name=\"expiry_date\" \r\n                                        handleChange={handleChange}\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        onKeyUp={(e) => checkInputs(e, templateIdentification)}\r\n                                        value={templateIdentification.expiry_date} \r\n                                        className={`form-control ${!templateIdentification.expiry_date && touched && 'is-invalid'}${templateIdentification.expiry_date && 'is-valid'}`}\r\n                                    />\r\n                                </CCol>\r\n                                <CCol xs=\"12\">\r\n                                    <FormTextArea \r\n                                        label=\"Comments\" \r\n                                        name=\"comments\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        handleChange={handleChange}\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        onKeyUp={(e) => checkInputs(e, templateIdentification)}\r\n                                        value={templateIdentification.comments} \r\n                                        className={`form-control ${!templateIdentification.comments && touched && 'is-invalid'}${templateIdentification.comments && 'is-valid'}`}\r\n                                    />\r\n                                </CCol>\r\n                            </CFormGroup>\r\n                            <FormActions \r\n                                saveText=\"Save Identification\" \r\n                                handleSaveClick={handleSaveClick} \r\n                                handleCancelClick={handleCancelClick}\r\n                            ></FormActions>\r\n                        </CForm>\r\n                    </CCardBody>\r\n                    </CCollapse>\r\n                </CCard>\r\n                </CFade>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nexport default IdentificationTemplate;","import React from 'react';\r\nimport IdentificationTable from '../../goaml-tables/table-identity.component'\r\nimport IdentificationTemplate from '../template-identification/template-identification.components'\r\nimport {\r\n    CLabel,\r\n    CCard,\r\n    CCardBody,\r\n    CCol,\r\n    CFade,\r\n    CRow,\r\n    CNav,\r\n    CNavItem,\r\n    CNavLink,\r\n    CTabContent,\r\n    CTabPane,\r\n    CTabs,\r\n  } from '@coreui/react'\r\n\r\nconst ReportIdentifications = ({ name, label, handleIdentificationSave, ...otherProps }) => {\r\n    \r\n    let [showElements, setShowElements] = React.useState(true)\r\n    const tab1Title = `Add ${name}`;\r\n    const tab2Title = `${name} Table`;\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                {label ? (\r\n                    <CLabel htmlFor={name}>{label}</CLabel>\r\n                ) : null}\r\n                <div className=\"row\">\r\n                    <CCol xs=\"12\">\r\n                        <CTabs activeTab=\"Tab1\">\r\n                            <CNav variant=\"tabs\">\r\n                                <CNavItem>\r\n                                <CNavLink data-tab=\"Tab1\">\r\n                                    {tab1Title}\r\n                                </CNavLink>\r\n                                </CNavItem>\r\n                                <CNavItem>\r\n                                <CNavLink data-tab=\"Tab2\">\r\n                                    {tab2Title}\r\n                                </CNavLink>\r\n                                </CNavItem>\r\n                            </CNav>\r\n                            <CTabContent>\r\n                                <CTabPane data-tab=\"Tab1\">\r\n                                    <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                                        <CCard>\r\n                                            <CCardBody>\r\n                                            <CRow>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <IdentificationTemplate name=\"Add Identification Document\" handleIdentificationSave={handleIdentificationSave}></IdentificationTemplate>\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                            </CCardBody>\r\n                                        </CCard>\r\n                                    </CFade>\r\n                                </CTabPane>\r\n                                <CTabPane data-tab=\"Tab2\">\r\n                                    <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                                        <CCard>\r\n                                            <CCardBody>\r\n                                            <CRow>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <IdentificationTable name={name} />\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                            </CCardBody>\r\n                                        </CCard>\r\n                                    </CFade>\r\n                                </CTabPane>\r\n                            </CTabContent>\r\n                        </CTabs>\r\n                    </CCol>\r\n                </div>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nexport default ReportIdentifications;","import React from 'react';\r\nimport CombinedTable from './combined-table.component'\r\nimport usersData from '../../views/users/UsersData'\r\n\r\nconst fields = ['name','registered', 'role', 'status']\r\n\r\nclass PhoneTable extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            transactionData : usersData\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { transactionData } = this.state;\r\n        // const { name } = this.props;\r\n        \r\n        return(\r\n            <CombinedTable name=\"Phone Table\" fields={fields} tableData={transactionData} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default PhoneTable;","import React from 'react';\r\nimport FormDynamicSelect from '../../form-inputs/form-dynamic-select.component'\r\n\r\nclass CommunicationTypeEnum extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            options : [\r\n                {value: 'L', description:'Landline Phone'},\r\n                {value: 'M', description:'Mobile Phone'},\r\n                {value: 'F', description:'Fax'},\r\n                {value: 'S', description:'Satellite Phone'},\r\n                {value: 'P', description:'Pager'},\r\n                {value: 'E', description:'Email'}\r\n            ]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { options } = this.state;\r\n        const { name, label, handleChange } = this.props;\r\n        \r\n        return(\r\n            <FormDynamicSelect label={label} name={name} options={options} handleChange={handleChange} />\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default CommunicationTypeEnum;","import CIcon from '@coreui/icons-react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup,\r\n    CRow\r\n} from '@coreui/react';\r\nimport React from 'react';\r\nimport FormActions from '../../form-inputs/form-actions.component';\r\nimport FormInput from '../../form-inputs/form-input.component';\r\nimport FormTextArea from '../../form-inputs/form-textarea-component';\r\nimport CommunicationTypeEnum from '../../goaml-enums/communication-type-enum/communication-type-enum.component';\r\nimport ContactTypeEnum from '../../goaml-enums/contact-type-enum/contact-type-enum.component';\r\n\r\nconst PhoneTemplate = ({ name, handlePhoneSave, ...otherProps }) => {\r\n\r\n    const [collapsed, setCollapsed] = React.useState(false)\r\n    const [showElements, setShowElements] = React.useState(true)\r\n    const [touched, setTouched] = React.useState(false);\r\n    const onFocus = () => setTouched(true)\r\n    const onBlur = () => setTouched(false)\r\n    // let radioItems = [\"Yes\", \"No\"];\r\n    const [templatePhone, setComponentState] = React.useState({\r\n        \"tph_contact_type\": '',\r\n        \"tph_communication_type\": '',\r\n        \"tph_country_prefix\": '',\r\n        \"tph_number\": '',\r\n        \"tph_extension\": '',\r\n        \"comments\": ''\r\n      });\r\n\r\n      const [showError, setShowError] = React.useState({isEmpty: false, value: ''});\r\n\r\n      const checkInputs = (e, inputState) => {\r\n          let error = false;\r\n          let val = {};\r\n          let myValidation;\r\n        if (typeof myValidation === 'string' || 'integer' || 'boolean'){\r\n            for (const [key, value] of Object.entries(inputState)) {\r\n                if (e.target.name === key) {\r\n                    value === null ? error = true : error = false; \r\n                    val = key;\r\n                }\r\n            }\r\n        }\r\n          setShowError({\r\n              isEmpty: error,\r\n              value: val\r\n           });\r\n      }\r\n\r\n      console.log('error', showError)\r\n\r\n    const handleSaveClick = () => {\r\n        if (!templatePhone.tph_communication_type || !templatePhone.tph_contact_type || !templatePhone.tph_country_prefix || !templatePhone.tph_extension || !templatePhone.tph_number) {\r\n            alert('please fill this fileld')\r\n        }\r\n        handlePhoneSave(templatePhone);\r\n    }\r\n\r\n    const handleChange = event => {\r\n        console.log(event.target);\r\n        const { name, value } = event.target;\r\n        setComponentState({ ...templatePhone, [name]: value });\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        console.log(\"Hello: \", templatePhone);\r\n    }\r\n    \r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                <CCard>\r\n                    <CCardHeader>\r\n                    {name}\r\n                    <div className=\"card-header-actions\">\r\n                        <CButton \r\n                        color=\"link\" \r\n                        className=\"card-header-action btn-minimize\" \r\n                        onClick={() => setCollapsed(!collapsed)}\r\n                        >\r\n                        <CIcon name={collapsed ? 'cil-chevron-bottom' : 'cil-chevron-top'} />\r\n                        </CButton>\r\n                    </div>\r\n                    </CCardHeader>\r\n                    <CCollapse show={collapsed} timeout={1000}>\r\n                    <CCardBody>\r\n                        <CForm className=\"form-horizontal\">\r\n                            <CFormGroup row>\r\n                                <CCol xs=\"4\">\r\n                                    <ContactTypeEnum\r\n                                        label=\"Contact Type*\"\r\n                                        name=\"tph_contact_type\"\r\n                                        handleChange={handleChange}\r\n                                        value={templatePhone.tph_contact_type}\r\n                                        onFocus={onFocus}\r\n                                        onBlur={onBlur}\r\n                                        onKeyUp={(e) => checkInputs(e, templatePhone)}\r\n                                        className={`form-control ${!templatePhone.tph_contact_type && touched && 'is-invalid'} ${templatePhone.tph_contact_type && 'is-valid'}`}\r\n                                    ></ContactTypeEnum>\r\n                                    <FormInput\r\n                                        label=\"Number*\"\r\n                                        name=\"tph_number\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        handleChange={handleChange}\r\n                                        value={templatePhone.tph_number}\r\n                                        onKeyUp={(e) => checkInputs(e, templatePhone)}\r\n                                        onFocus={onFocus}\r\n                                        onBlur={onBlur}\r\n                                        className={`form-control ${!templatePhone.tph_number && touched && 'is-invalid'} ${templatePhone.tph_number && 'is-valid'}`} \r\n                                    />\r\n                                </CCol>\r\n                                <CCol xs=\"4\">\r\n                                    <CommunicationTypeEnum\r\n                                        label=\"Comm. Type*\"\r\n                                        name=\"tph_communication_type\"\r\n                                        handleChange={handleChange}\r\n                                        value={templatePhone.tph_communication_type}\r\n                                        onFocus={onFocus}\r\n                                        onKeyUp={(e) => checkInputs(e, templatePhone)}\r\n                                        onBlur={onBlur}\r\n                                        className={`form-control ${!templatePhone.tph_communication_type && touched && 'is-invalid'} ${templatePhone.tph_communication_type && 'is-valid'}`}\r\n                                    ></CommunicationTypeEnum>\r\n                                    <FormInput\r\n                                        label=\"Extension\"\r\n                                        name=\"tph_extension\"\r\n                                        placeholder=\"Enter ...\"\r\n                                        handleChange={handleChange}\r\n                                        value={templatePhone.tph_extension}\r\n                                        onKeyUp={(e) => checkInputs(e, templatePhone)}\r\n                                        onFocus={onFocus}\r\n                                        onBlur={onBlur}\r\n                                        className={`form-control ${!templatePhone.tph_extension && touched && 'is-invalid'} ${templatePhone.tph_extension && 'is-valid'}`}\r\n                                    />                                    \r\n                                </CCol>\r\n                                <CCol xs=\"4\">\r\n                                    <FormInput \r\n                                        label=\"Country Prefix*\"\r\n                                        name=\"tph_country_prefix\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        handleChange={handleChange}\r\n                                        value={templatePhone.tph_country_prefix}\r\n                                        onKeyUp={(e) => checkInputs(e, templatePhone)}\r\n                                        onFocus={onFocus}\r\n                                        onBlur={onBlur}\r\n                                        className={`form-control ${!templatePhone.tph_country_prefix && touched && 'is-invalid'} ${templatePhone.tph_country_prefix && 'is-valid'}`}\r\n                                    />\r\n                                </CCol>\r\n                                <CCol xs=\"12\">\r\n                                    <FormTextArea\r\n                                        label=\"Comments\"\r\n                                        name=\"comments\"\r\n                                        placeholder=\"Enter ...\"\r\n                                        handleChange={handleChange}\r\n                                        onKeyUp={(e) => checkInputs(e, templatePhone)}\r\n                                        value={templatePhone.comments}\r\n                                        onFocus={onFocus}\r\n                                        onBlur={onBlur}\r\n                                        className={`form-control ${!templatePhone.comments && touched && 'is-invalid'} ${templatePhone.comments && 'is-valid'}`}\r\n                                    />\r\n                                </CCol>\r\n                            </CFormGroup>\r\n                            <FormActions \r\n                                saveText=\"Save Phone\"\r\n                                handleSaveClick={handleSaveClick}\r\n                                handleCancelClick={handleCancelClick}\r\n                            ></FormActions>\r\n                        </CForm>\r\n                    </CCardBody>\r\n                    </CCollapse>\r\n                </CCard>\r\n                </CFade>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nexport default PhoneTemplate;","import React from 'react';\r\nimport PhoneTable from '../../goaml-tables/table-phone.component'\r\nimport PhoneTemplate from '../template-phone/template-phone.components'\r\nimport {\r\n    CLabel,\r\n    CCard,\r\n    CCardBody,\r\n    CCol,\r\n    CFade,\r\n    CRow,\r\n    CNav,\r\n    CNavItem,\r\n    CNavLink,\r\n    CTabContent,\r\n    CTabPane,\r\n    CTabs,\r\n  } from '@coreui/react'\r\n  \r\n  const ReportPhones = ({ name, handlePhoneSave, label, ...otherProps }) => {\r\n    \r\n    let [showElements, setShowElements] = React.useState(true)\r\n    const tab1Title = `Add ${name}`;\r\n    const tab2Title = `${name} Table`;\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                {label ? (\r\n                    <CLabel htmlFor={name}>{label}</CLabel>\r\n                ) : null}\r\n                <div className=\"row\">\r\n                    <CCol xs=\"12\">\r\n                        <CTabs activeTab=\"Tab1\">\r\n                            <CNav variant=\"tabs\">\r\n                                <CNavItem>\r\n                                <CNavLink data-tab=\"Tab1\">\r\n                                    {tab1Title}\r\n                                </CNavLink>\r\n                                </CNavItem>\r\n                                <CNavItem>\r\n                                <CNavLink data-tab=\"Tab2\">\r\n                                    {tab2Title}\r\n                                </CNavLink>\r\n                                </CNavItem>\r\n                            </CNav>\r\n                            <CTabContent>\r\n                                <CTabPane data-tab=\"Tab1\">\r\n                                    <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                                        <CCard>\r\n                                            <CCardBody>\r\n                                            <CRow>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <PhoneTemplate name=\"Add a Phone\" handlePhoneSave={handlePhoneSave}></PhoneTemplate>\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                            </CCardBody>\r\n                                        </CCard>\r\n                                    </CFade>\r\n                                </CTabPane>\r\n                                <CTabPane data-tab=\"Tab2\">\r\n                                    <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                                        <CCard>\r\n                                            <CCardBody>\r\n                                            <CRow>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <PhoneTable name={name} />\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                            </CCardBody>\r\n                                        </CCard>\r\n                                    </CFade>\r\n                                </CTabPane>\r\n                            </CTabContent>\r\n                        </CTabs>\r\n                    </CCol>\r\n                </div>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nexport default ReportPhones;","import CIcon from '@coreui/icons-react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup,\r\n    CRow\r\n} from '@coreui/react';\r\nimport React from 'react';\r\nimport FormActions from '../../form-inputs/form-actions.component';\r\nimport FormDate from '../../form-inputs/form-date.component';\r\nimport FormEmail from '../../form-inputs/form-email.component';\r\nimport FormGenderSelect from '../../form-inputs/form-gender-select.component';\r\nimport FormInput from '../../form-inputs/form-input.component';\r\nimport FormRadioText from '../../form-inputs/form-radio-text.component';\r\nimport FormTextArea from '../../form-inputs/form-textarea-component';\r\nimport CountryCodeEnum from '../../goaml-enums/country-code-enum/country-code-enum.component';\r\nimport ReportAddresses from '../../goaml-sections/report-addresses/report-addresses.component';\r\nimport ReportIdentifications from \"../../goaml-sections/report-identifications/report-identifications.component\";\r\nimport ReportPhones from '../../goaml-sections/report-phones/report-phones.components';\r\n\r\n\r\nconst PersonTemplate = ({ label, name, alias,  transRef, partyType, OnSave, handleSaveInfoClick, ...otherProps }) => {\r\n\r\n    const [collapsed, setCollapsed] = React.useState(false)\r\n    const [showElements, setShowElements] = React.useState(true)\r\n    // let radioItems = [\"Yes\", \"No\"];\r\n    const [templatePerson, setComponentState] = React.useState({\r\n        \"gender\": '',\r\n        \"title\": '',\r\n        \"first_name\": '',\r\n        \"middle_name\": '',\r\n        \"prefix\": '',\r\n        \"last_name\": '',\r\n        \"birthdate\": '',\r\n        \"birth_place\": '',\r\n        \"mothers_name\": '',\r\n        \"alias\": '',\r\n        \"ssn\": '',\r\n        \"passport_number\": '',\r\n        \"passport_country\": '',\r\n        \"id_number\": '',\r\n        \"nationality1\": '',\r\n        \"nationality2\": '',\r\n        \"nationality3\": '',\r\n        \"residence\": '',\r\n        \"phones\": [],\r\n        \"addresses\": [],\r\n        \"email\": '',\r\n        \"occupation\": '',\r\n        \"employer_name\": '',\r\n        \"employer_address_id\": '',\r\n        \"employer_phone_id\": '',\r\n        \"identification\": [],\r\n        \"date_deceased\":'',\r\n        \"tax_number\": '',\r\n        \"tax_reg_number\": '',\r\n        \"source_of_wealth\": '',\r\n        \"comments\": ''\r\n    })\r\n    const [touched, setTouched] = React.useState(false);\r\n    const onFocus = () => setTouched(true)\r\n    const onBlur = () => setTouched(false)\r\n\r\n    const [showError, setShowError] = React.useState({isEmpty: false, value: ''});\r\n\r\n    const checkInputs = (e, inputState) => {\r\n        let error = false;\r\n        let val = {};\r\n        let myValidation;\r\n        if (typeof myValidation === 'string' || 'integer' || 'boolean'){\r\n            for (const [key, value] of Object.entries(inputState)) {\r\n                if (e.target.name === key) {\r\n                    value === null ? error = true : error = false; \r\n                    val = key;\r\n                }\r\n            }\r\n        }\r\n        setShowError({\r\n            isEmpty: error,\r\n            value: val\r\n         });\r\n    }\r\n\r\n    const handleChange = event => {\r\n        console.log(event.target);\r\n        const { name, value } = event.target;\r\n        setComponentState({ ...templatePerson, [name]: value });\r\n    };\r\n\r\n    const handleSaveClick = () => {\r\n        if (!templatePerson.first_name || !templatePerson.title || !templatePerson.alias || !templatePerson.mothers_name || !templatePerson.nationality1 ||\r\n            !templatePerson.nationality2 || !templatePerson.nationality3 || !templatePerson.passport_number || !templatePerson.source_of_wealth || !templatePerson.middle_name ||\r\n            !templatePerson.gender || !templatePerson.birthdate || !templatePerson.residence || !templatePerson.occupation || !templatePerson.employer_name ||\r\n            !templatePerson.last_name || !templatePerson.prefix || !templatePerson.email || !templatePerson.date_deceased || \r\n           !templatePerson.phone || !templatePerson.addresses || !templatePerson.identification) {\r\n            alert('please complete this field')\r\n        }\r\n        console.log(templatePerson);\r\n        OnSave(transRef, partyType, templatePerson);\r\n    }\r\n    \r\n    const handleCancelClick = () => {\r\n        console.log(\"Hello: \", templatePerson);\r\n    }\r\n\r\n    const handlePhoneSave = (phone) => {\r\n        templatePerson.phones.push(phone)\r\n    }\r\n\r\n    const handleAddressSave = (address) => {\r\n        templatePerson.addresses.push(address)\r\n    }\r\n\r\n    const handleIdentificationSave = (identification) => {\r\n        templatePerson.identification.push(identification)\r\n    }\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                    <CCard>\r\n                        <CCardHeader>      {label}\r\n                            <div className=\"card-header-actions\">\r\n                                <CButton\r\n                                    color=\"link\"\r\n                                    className=\"card-header-action btn-minimize\"\r\n                                    onClick={() => setCollapsed(!collapsed)}\r\n                                >\r\n                                    <CIcon name={collapsed ? 'cil-chevron-bottom' : 'cil-chevron-top'} />\r\n                                </CButton>\r\n                            </div>\r\n                        </CCardHeader>\r\n                        <CCollapse show={collapsed} timeout={1000}>\r\n                            <CCardBody>\r\n                                <CForm className=\"form-horizontal\">\r\n                                    <CFormGroup row>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormInput \r\n                                                label=\"First Name*\" \r\n                                                name=\"first_name\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.first_name}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.first_name && touched && 'is-invalid'} ${templatePerson.first_name && 'is-valid'}`}\r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Title*\" \r\n                                                name=\"title\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.title}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.title && touched && 'is-invalid'} ${templatePerson.title && 'is-valid'}`}\r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Alias/Known As\" \r\n                                                name=\"alias\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.first_name}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.first_name && touched && 'is-invalid'} ${templatePerson.first_name && 'is-valid'}`}\r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Mother's Name\" \r\n                                                name=\"mothers_name\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.mothers_name}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.mothers_name && touched && 'is-invalid'} ${templatePerson.mothers_name && 'is-valid'}`}\r\n                                            />\r\n                                            <CountryCodeEnum \r\n                                                label=\"Nationality 1\" \r\n                                                name=\"nationality1\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.nationality1}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.nationality1 && touched && 'is-invalid'} ${templatePerson.nationality1 && 'is-valid'}`}\r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Passport\" \r\n                                                name=\"passport_number\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.passport_number}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.passport_number && touched && 'is-invalid'} ${templatePerson.passport_number && 'is-valid'}`}\r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Source of Wealth\" \r\n                                                name=\"source_of_wealth\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.source_of_wealth}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.source_of_wealth && touched && 'is-invalid'} ${templatePerson.source_of_wealth && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormInput \r\n                                                label=\"Middle Name\" \r\n                                                name=\"middle_name\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.middle_name}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.middle_name && touched && 'is-invalid'} ${templatePerson.middle_name && 'is-valid'}`}\r\n                                            />\r\n                                            <FormGenderSelect \r\n                                                label=\"Gender\" \r\n                                                name=\"gender\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.gender}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.gender && touched && 'is-invalid'} ${templatePerson.gender && 'is-valid'}`}  \r\n                                            />\r\n                                            <FormDate \r\n                                                label=\"Birth Date\" \r\n                                                name=\"birthdate\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.birthdate}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.birthdate && touched && 'is-invalid'} ${templatePerson.birthdate && 'is-valid'}`}  \r\n                                            />\r\n                                            <CountryCodeEnum \r\n                                                label=\"Country of Residence\" \r\n                                                name=\"residence\"\r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.residence}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.residence && touched && 'is-invalid'} ${templatePerson.residence && 'is-valid'}`}\r\n                                            />\r\n                                            <CountryCodeEnum \r\n                                                label=\"Nationality 2\" \r\n                                                name=\"nationality2\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.nationality2}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.nationality2 && touched && 'is-invalid'} ${templatePerson.nationality2 && 'is-valid'}`}  \r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Occupation\" \r\n                                                name=\"occupation\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.occupation}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.occupation && touched && 'is-invalid'} ${templatePerson.occupation && 'is-valid'}`} \r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Employer Name\" \r\n                                                name=\"employer_name\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.employer_name}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.employer_name && touched && 'is-invalid'} ${templatePerson.employer_name && 'is-valid'}`} \r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormInput \r\n                                                label=\"SurName/Last Name\" \r\n                                                name=\"last_name\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.last_name}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.last_name && touched && 'is-invalid'} ${templatePerson.last_name && 'is-valid'}`} \r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Prefix\" \r\n                                                name=\"prefix\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.prefix}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.prefix && touched && 'is-invalid'} ${templatePerson.prefix && 'is-valid'}`}  \r\n                                                />\r\n                                            <FormInput \r\n                                                label=\"Birth Place\" \r\n                                                name=\"birth_place\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.birth_place}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.birth_place && touched && 'is-invalid'} ${templatePerson.birth_place && 'is-valid'}`} \r\n                                            />\r\n                                            <FormEmail \r\n                                                label=\"Email address\" \r\n                                                name=\"email\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.email}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.email && touched && 'is-invalid'} ${templatePerson.email && 'is-valid'}`}  \r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Social Security Number\" \r\n                                                name=\"ssn\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.ssn}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.ssn && touched && 'is-invalid'} ${templatePerson.ssn && 'is-valid'}`} \r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Tax Number\" \r\n                                                name=\"tax_number\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.tax_number}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.tax_number && touched && 'is-invalid'} ${templatePerson.tax_number && 'is-valid'}`}  \r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Tax Reg. Number\" \r\n                                                name=\"tax_reg_number\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.tax_reg_number}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.tax_reg_number && touched && 'is-invalid'} ${templatePerson.tax_reg_number && 'is-valid'}`} \r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <ReportPhones \r\n                                                label=\"Phone\" \r\n                                                name=\"phones\" \r\n                                                handlePhoneSave={handlePhoneSave}\r\n                                                value={templatePerson.phones}\r\n                                            >\r\n                                            </ReportPhones>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <ReportAddresses \r\n                                                label=\"Address\" \r\n                                                name=\"addresses\" \r\n                                                handleAddressSave={handleAddressSave}\r\n                                                value={templatePerson.addresses}\r\n                                            >\r\n                                            </ReportAddresses>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <ReportIdentifications \r\n                                                label=\"Identification\" \r\n                                                name=\"identification\" \r\n                                                handleIdentificationSave={handleIdentificationSave}\r\n                                                value={templatePerson.identification}\r\n                                            >\r\n                                            </ReportIdentifications>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <CRow>\r\n                                                <CCol xs=\"6\">\r\n                                                    <FormRadioText\r\n                                                        label=\"Deceased?\" \r\n                                                        name=\"deceased\" \r\n                                                        width=\"6\" items={[\"Yes\", \"No\"]} \r\n                                                        handleChange={handleChange}\r\n                                                    />\r\n                                                </CCol>\r\n                                                <CCol xs=\"6\">\r\n                                                    <FormDate \r\n                                                        type=\"date\"\r\n                                                        label=\"Date Deceased\" \r\n                                                        name=\"date_deceased\" \r\n                                                        handleChange={handleChange}\r\n                                                        value={templatePerson.date_deceased} \r\n                                                    />\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <FormTextArea \r\n                                                label=\"Comments\" \r\n                                                name=\"comments\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.comments} \r\n                                            />\r\n                                        </CCol>\r\n                                    </CFormGroup>\r\n                                    <FormActions \r\n                                        saveText={`Save ${alias}`} \r\n                                        handleSaveClick={handleSaveClick} \r\n                                        handleCancelClick={handleCancelClick}>\r\n                                    </FormActions>\r\n                                </CForm>\r\n                            </CCardBody>\r\n                        </CCollapse>\r\n                    </CCard>\r\n                </CFade>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nexport default PersonTemplate;","import React from 'react';\r\nimport PersonTable from '../../goaml-tables/table-person.component';\r\nimport PersonTemplate from '../template-person/template-person.component';\r\nimport {\r\n    CLabel,\r\n    CCard,\r\n    CCardBody,\r\n    CCol,\r\n    CFade,\r\n    CRow,\r\n    CNav,\r\n    CNavItem,\r\n    CNavLink,\r\n    CTabContent,\r\n    CTabPane,\r\n    CTabs,\r\n  } from '@coreui/react'\r\n\r\nconst TransactionPersons = ({ name, label, alias, transRef, OnSave, partyType, ...otherProps }) => {\r\n    \r\n    let [showElements, setShowElements] = React.useState(true)\r\n    const tab1Title = `Add ${label}`;\r\n    const tab2Title = `${label} Table`;\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                {label ? (\r\n                    <CLabel htmlFor={label}>{label}</CLabel>\r\n                ) : null}\r\n                <div className=\"row\">\r\n                    <CCol xs=\"12\">\r\n                        <CTabs activeTab=\"Tab1\">\r\n                            <CNav variant=\"tabs\">\r\n                                <CNavItem>\r\n                                <CNavLink data-tab=\"Tab1\">\r\n                                    {tab1Title}\r\n                                </CNavLink>\r\n                                </CNavItem>\r\n                                <CNavItem>\r\n                                <CNavLink data-tab=\"Tab2\">\r\n                                    {tab2Title}\r\n                                </CNavLink>\r\n                                </CNavItem>\r\n                            </CNav>\r\n                            <CTabContent>\r\n                                <CTabPane data-tab=\"Tab1\">\r\n                                    <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                                        <CCard>\r\n                                            <CCardBody>\r\n                                            <CRow>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <PersonTemplate transRef={transRef} OnSave={OnSave} partyType={partyType} label={label} name={name} alias={alias}></PersonTemplate>\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                            </CCardBody>\r\n                                        </CCard>\r\n                                    </CFade>\r\n                                </CTabPane>\r\n                                <CTabPane data-tab=\"Tab2\">\r\n                                    <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                                        <CCard>\r\n                                            <CCardBody>\r\n                                            <CRow>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <PersonTable name={name} />\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                            </CCardBody>\r\n                                        </CCard>\r\n                                    </CFade>\r\n                                </CTabPane>\r\n                            </CTabContent>\r\n                        </CTabs>\r\n                    </CCol>\r\n                </div>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nexport default TransactionPersons;\r\n","import CIcon from '@coreui/icons-react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup,\r\n    CRow\r\n} from '@coreui/react';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport FormAmount from 'src/components/form-inputs/form-amount.component';\r\nimport { SetReportType } from '../../../redux/report-type/report-type.actions';\r\nimport { selectReportType } from '../../../redux/report-type/report-type.selectors';\r\nimport FormActions from '../../form-inputs/form-actions.component';\r\nimport FormInput from '../../form-inputs/form-input.component';\r\nimport CountryCodeEnum from '../../goaml-enums/country-code-enum/country-code-enum.component';\r\nimport CurrenciesEnum from '../../goaml-enums/currencies-enum/currencies-enum.component';\r\nimport FundsTypeEnum from '../../goaml-enums/funds-type-enum/funds-type-enum.component';\r\nimport PartyTypeEnum from '../../goaml-enums/party-type-enum/party-type-enum.components';\r\nimport TransactionPerson from '../transaction-person/transaction-person.component';\r\n\r\n\r\nconst TransactionFromPartyInfo =({ name, transRef, partyType, handleSavePartyInfo, ...otherProps }) => {\r\n\r\n    const [collapsed, setCollapsed] = React.useState(true)\r\n    const [touched, setTouched] = React.useState(false);\r\n    // let radioItems = [\"Yes\", \"No\"];\r\n    const onFocus = () => setTouched(true)\r\n    const onBlur = () => setTouched(false)\r\n\r\n    const [collapseMulti, setCollapseMulti] = React.useState([false, false, false, false, false, false])\r\n    let [showElements, setShowElements] = React.useState(true)\r\n    const [transpartyInfo, setTranspartyInfo] = React.useState({\r\n        \"partyType\": '',\r\n        \"partyInfo\": {\r\n            \"from_funds_code\": '',\r\n            \"from_funds_comment\": '',\r\n            \"from_foreign_currency\": {\r\n                \"foreign_currency_code\": '',\r\n                \"foreign_amount\": '',\r\n                \"foreign_exchange_rate\": '',\r\n            },\r\n            \"from_country\": ''\r\n        }\r\n    })\r\n\r\n    const [showError, setShowError] = React.useState({isEmpty: false, value: ''});\r\n\r\n    const checkInputs = (e, inputState) => {\r\n        let error = false;\r\n        let val = {};\r\n        let myValidation;\r\n        if (typeof myValidation === 'string' || 'integer' || 'boolean'){\r\n            for (const [key, value] of Object.entries(inputState)) {\r\n                if (e.target.name === key) {\r\n                    value === null ? error = true : error = false; \r\n                    val = key;\r\n                }\r\n            }\r\n        }\r\n        setShowError({\r\n            isEmpty: error,\r\n            value: val\r\n         });\r\n    }\r\n    \r\n    console.log('error', showError)\r\n\r\n    const toggleMulti = (type) => {\r\n        let newCollapse = collapseMulti.slice()\r\n        switch (type) {\r\n            case \"person-conductor\":\r\n                newCollapse[0] = !collapseMulti[0];\r\n                break;\r\n            default:\r\n        }\r\n        setCollapseMulti(newCollapse)\r\n    }\r\n\r\n    const handleChange = event => {\r\n        // console.log(event.target);\r\n        const { name, value } = event.target;\r\n        setTranspartyInfo({ ...transpartyInfo, [name]: value });\r\n    };\r\n\r\n    const handleSaveClick = () => {\r\n        console.log('great', fromPtyInfo)\r\n        if (!transpartyInfo.from_funds_code || !transpartyInfo.from_funds_comment || !transpartyInfo.from_country || !transpartyInfo.partyType\r\n            || !transpartyInfo.foreign_currency_code){\r\n            alert('please complete this field')\r\n        }\r\n       const fromPtyInfo = handleSavePartyInfo(transRef, partyType, transpartyInfo);\r\n        if (fromPtyInfo == \"partyType\")\r\n            setTranspartyInfo({ ...transpartyInfo, fromPtyInfo });\r\n        else if (fromPtyInfo == \"foreign_currency_code\" || fromPtyInfo == \"foreign_amount\" || fromPtyInfo == \"foreign_exchange_rate\")\r\n            setTranspartyInfo({\r\n                ...transpartyInfo, partyInfo: { ...transpartyInfo.partyInfo, \r\n                    from_foreign_currency: { ...transpartyInfo.partyInfo.from_foreign_currency, fromPtyInfo }}\r\n            });\r\n        else\r\n            setTranspartyInfo({ ...transpartyInfo, partyInfo: { ...transpartyInfo.partyInfo, fromPtyInfo } });\r\n    }\r\n\r\n    const handleCancelClick = () => {\r\n        // console.log(\"Hello: \", transpartyInfo);\r\n    }\r\n\r\n    const handleSaveConductor = (conductor) => {\r\n        setTranspartyInfo({ ...transpartyInfo, partyInfo: { ...transpartyInfo.partyInfo, t_conductor: conductor } });\r\n    }\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                    <CCard>\r\n                        <CCardHeader>\r\n                            {name}\r\n                            <div className=\"card-header-actions\">\r\n                                <CButton\r\n                                    color=\"link\"\r\n                                    className=\"card-header-action btn-minimize\"\r\n                                    onClick={() => setCollapsed(!collapsed)}\r\n                                >\r\n                                    <CIcon name={collapsed ? 'cil-chevron-bottom' : 'cil-chevron-top'} />\r\n                                </CButton>\r\n                            </div>\r\n                        </CCardHeader>\r\n                        <CCollapse show={collapsed} timeout={1000}>\r\n                            <CCardBody>\r\n                                <CForm className=\"form-horizontal\">\r\n                                    <CFormGroup row>\r\n                                        <CCol xs=\"6\">\r\n                                            <FundsTypeEnum \r\n                                                label=\"Funds Code*\" \r\n                                                name=\"from_funds_code\"\r\n                                                handleChange={handleChange} \r\n                                                value={transpartyInfo.from_funds_code}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)} \r\n                                                className={`from-control ${!transpartyInfo.from_funds_code && touched && 'is-invalid'} ${transpartyInfo.from_funds_code && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"6\">\r\n                                            <FormInput \r\n                                                label=\"Funds Comment\" \r\n                                                name=\"from_funds_comment\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={transpartyInfo.from_funds_comment}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                className={`from-control ${!transpartyInfo.from_funds_comment && touched && 'is-invalid'} ${transpartyInfo.from_funds_comment && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"6\">\r\n                                            <CountryCodeEnum \r\n                                                handleChange={handleChange} \r\n                                                label=\"Country*\" \r\n                                                name=\"from_country\"\r\n                                                value={transpartyInfo.from_country}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                className={`from-control ${!transpartyInfo.from_country && touched && 'is-invalid'} ${transpartyInfo.from_country && touched && 'is-valid'}`} \r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"6\">\r\n                                            <PartyTypeEnum \r\n                                                handleChange={handleChange} \r\n                                                label=\"Related Party Type*\" \r\n                                                name=\"partyType\"\r\n                                                value={transpartyInfo.partyType}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                className={`from-control ${!transpartyInfo.partyType && touched && 'is-invalid'} ${transpartyInfo.partyType && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <CurrenciesEnum \r\n                                                handleChange={handleChange} \r\n                                                label=\"Currency Code*\" \r\n                                                name=\"foreign_currency_code\"\r\n                                                value={transpartyInfo.foreign_currency_code}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                className={`from-control ${!transpartyInfo.foreign_currency_code && touched && 'is-invalid'} ${transpartyInfo.foreign_currency_code && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormAmount \r\n                                                handleChange={handleChange} \r\n                                                label=\"Exchange Rate*\" \r\n                                                name=\"foreign_exchange_rate\"\r\n                                                value={transpartyInfo.foreign_exchange_rate}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                className={`from-control ${!transpartyInfo.foreign_exchange_rate && touched && 'is-invalid'} ${transpartyInfo.foreign_exchange_rate && 'is-valid'}`} \r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormAmount \r\n                                                handleChange={handleChange} \r\n                                                label=\"Amount*\" \r\n                                                name=\"foreign_amount\"\r\n                                                value={transpartyInfo.foreign_amount}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                className={`from-control ${!transpartyInfo.foreign_amount && touched && 'is-invalid'} ${transpartyInfo.foreign_amount && 'is-valid'} `}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <p>\r\n                                                <button type=\"button\" onClick={() => { toggleMulti('person-conductor') }}\r\n                                                    class=\"btn btn-link\">Add Conductor</button>\r\n                                            </p>\r\n                                            <row>\r\n                                                <CCollapse show={collapseMulti[0]}>\r\n                                                    <TransactionPerson OnSave={handleSaveConductor} transRef={transRef} partyType={partyType} label=\"Add a Conductor\" name=\"conductor\" alias=\"Conductor\" ></TransactionPerson>\r\n                                                </CCollapse>\r\n                                            </row>\r\n                                        </CCol>\r\n                                    </CFormGroup>\r\n                                </CForm>\r\n                                <FormActions \r\n                                    saveText=\"Save Party Overview\" \r\n                                    handleSaveClick={handleSaveClick} \r\n                                    handleCancelClick={handleCancelClick}>\r\n                                    </FormActions>\r\n                            </CCardBody>\r\n                        </CCollapse>\r\n                    </CCard>\r\n                </CFade>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    partyType: selectReportType(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setReportType: partyType => dispatch(SetReportType(partyType))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TransactionFromPartyInfo);\r\n","import React from 'react';\r\nimport FormDynamicSelect from '../../form-inputs/form-dynamic-select.component'\r\n\r\nclass EntityLegalFormEnum extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            options : [\r\n                {value: 'A', description:'AG'},\r\n                {value: 'G', description:'GmbH'},\r\n                {value: 'L', description:'Ltd.'},\r\n                {value: '-', description:'Unknown'}\r\n            ]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { options } = this.state;\r\n        const { name, label, handleChange } = this.props;\r\n        \r\n        return(\r\n            <FormDynamicSelect label={label} name={name} options={options} handleChange={handleChange} />\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default EntityLegalFormEnum;","import React from 'react';\r\nimport CombinedTable from './combined-table.component'\r\nimport usersData from '../../views/users/UsersData'\r\n\r\nconst fields = ['name','registered', 'role', 'status']\r\n\r\nclass DirectorTable extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            transactionData : usersData\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { transactionData } = this.state;\r\n        // const { name } = this.props;\r\n        \r\n        return(\r\n            <CombinedTable name=\"Directors Table\" fields={fields} tableData={transactionData} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default DirectorTable;","import React from 'react';\r\nimport FormDynamicSelect from '../../form-inputs/form-dynamic-select.component'\r\n\r\nclass EntityPersonRoleEnum extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            options : [\r\n                {value: '---', description:'Default value'}\r\n            ]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { options } = this.state;\r\n        const { name, label, handleChange } = this.props;\r\n        \r\n        return(\r\n            <FormDynamicSelect label={label} name={name} options={options} handleChange={handleChange} />\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default EntityPersonRoleEnum;","import React from 'react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup,\r\n    CRow\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport FormRadioText from '../../form-inputs/form-radio-text.component'\r\nimport EntityPersonRoleEnum from '../../goaml-enums/entity-person-role-enum/entity-person-role-enum.component'\r\nimport TransactionPerson from '../transaction-person/transaction-person.component'\r\nimport FormActions from '../../form-inputs/form-actions.component';\r\n\r\nconst DirectorTemplate = ({ name, transRef, OnSave, partyType, ...otherProps }) => {\r\n\r\n    const [collapsed, setCollapsed] = React.useState(false)\r\n    const [showElements, setShowElements] = React.useState(true)\r\n    const [entityDirectorInfo, setEntityDirectorInfo] = React.useState({\r\n        \"role\": 0,\r\n        \"t_person\": null\r\n    })\r\n\r\n    const handleSaveDirectorPerson = (txnRef, partyType, person) => {\r\n        setEntityDirectorInfo({ ...entityDirectorInfo, t_person: person });\r\n    };\r\n\r\n    const handleChange = event => {\r\n        const { name, value } = event.target;\r\n        setEntityDirectorInfo({ ...entityDirectorInfo, [name]: value });\r\n    };\r\n\r\n    const handleSaveClick = () => {\r\n        let director = {...entityDirectorInfo.t_person, role: entityDirectorInfo.role}\r\n        OnSave(transRef, partyType, director);\r\n    }\r\n\r\n    const handleCancelClick = () => {\r\n        console.log(\"Hello: \", entityDirectorInfo);\r\n    }\r\n    \r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                <CCard>\r\n                    <CCardHeader>\r\n                    {name}\r\n                    <div className=\"card-header-actions\">\r\n                        <CButton \r\n                        color=\"link\" \r\n                        className=\"card-header-action btn-minimize\" \r\n                        onClick={() => setCollapsed(!collapsed)}\r\n                        >\r\n                        <CIcon name={collapsed ? 'cil-chevron-bottom':'cil-chevron-top'} />\r\n                        </CButton>\r\n                    </div>\r\n                    </CCardHeader>\r\n                    <CCollapse show={collapsed} timeout={1000}>\r\n                    <CCardBody>\r\n                        <CForm className=\"form-horizontal\">\r\n                            <CFormGroup row>\r\n                                <CCol xs=\"4\">\r\n                                    <EntityPersonRoleEnum handleChange={handleChange} label=\"Role\" name=\"role\"></EntityPersonRoleEnum>\r\n                                </CCol>\r\n                                <CCol xs=\"12\">\r\n                                    <TransactionPerson OnSave={handleSaveDirectorPerson} transRef={transRef} partyType={partyType} name=\"Person\" label=\"Person\" alias=\"Person\"></TransactionPerson>\r\n                                </CCol>\r\n                            </CFormGroup>\r\n                            <FormActions saveText=\"Save Director\" handleSaveClick={handleSaveClick} handleCancelClick={handleCancelClick}></FormActions>\r\n                        </CForm>\r\n                    </CCardBody>\r\n                    </CCollapse>\r\n                </CCard>\r\n                </CFade>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nexport default DirectorTemplate;","import React from 'react';\r\nimport DirectorTable from '../../goaml-tables/table-director.component'\r\nimport DirectorTemplate from '../template-director/template-director.components'\r\nimport {\r\n    CLabel,\r\n    CCard,\r\n    CCardBody,\r\n    CCol,\r\n    CFade,\r\n    CRow,\r\n    CNav,\r\n    CNavItem,\r\n    CNavLink,\r\n    CTabContent,\r\n    CTabPane,\r\n    CTabs,\r\n  } from '@coreui/react'\r\n\r\nconst TransactionDirectors = ({ name, label, transRef, partyType, OnSave, ...otherProps }) => {\r\n    \r\n    let [showElements, setShowElements] = React.useState(true)\r\n    const tab1Title = `Add ${label}`;\r\n    const tab2Title = `${label} Table`;\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                {label ? (\r\n                    <CLabel htmlFor={label}>{label}</CLabel>\r\n                ) : null}\r\n                <div className=\"row\">\r\n                    <CCol xs=\"12\">\r\n                        <CTabs activeTab=\"Tab1\">\r\n                            <CNav variant=\"tabs\">\r\n                                <CNavItem>\r\n                                <CNavLink data-tab=\"Tab1\">\r\n                                    {tab1Title}\r\n                                </CNavLink>\r\n                                </CNavItem>\r\n                                <CNavItem>\r\n                                <CNavLink data-tab=\"Tab2\">\r\n                                    {tab2Title}\r\n                                </CNavLink>\r\n                                </CNavItem>\r\n                            </CNav>\r\n                            <CTabContent>\r\n                                <CTabPane data-tab=\"Tab1\">\r\n                                    <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                                        <CCard>\r\n                                            <CCardBody>\r\n                                            <CRow>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <DirectorTemplate name=\"director\" label=\"Add a Director\" transRef={transRef} OnSave={OnSave} partyType={partyType} ></DirectorTemplate>\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                            </CCardBody>\r\n                                        </CCard>\r\n                                    </CFade>\r\n                                </CTabPane>\r\n                                <CTabPane data-tab=\"Tab2\">\r\n                                    <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                                        <CCard>\r\n                                            <CCardBody>\r\n                                            <CRow>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <DirectorTable name={name} />\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                            </CCardBody>\r\n                                        </CCard>\r\n                                    </CFade>\r\n                                </CTabPane>\r\n                            </CTabContent>\r\n                        </CTabs>\r\n                    </CCol>\r\n                </div>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nexport default TransactionDirectors;\r\n","import CIcon from '@coreui/icons-react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup,\r\n    CRow\r\n} from '@coreui/react';\r\nimport React from 'react';\r\nimport FormActions from '../../form-inputs/form-actions.component';\r\nimport FormDate from '../../form-inputs/form-date.component';\r\nimport FormEmail from '../../form-inputs/form-email.component';\r\nimport FormInput from '../../form-inputs/form-input.component';\r\nimport FormRadioText from '../../form-inputs/form-radio-text.component';\r\nimport FormTextArea from '../../form-inputs/form-textarea-component';\r\nimport CountryCodeEnum from '../../goaml-enums/country-code-enum/country-code-enum.component';\r\nimport EntityLegalFormEnum from '../../goaml-enums/entity-legal-form-enum/entity-legal-form-enum.component';\r\nimport ReportAddresses from '../../goaml-sections/report-addresses/report-addresses.component';\r\nimport ReportPhones from '../../goaml-sections/report-phones/report-phones.components';\r\nimport TransactionDirectors from '../transaction-director/transaction-director.component';\r\n\r\n\r\nconst TransactionEntity = ({ label, name, transRef, partyType, OnSave, ...otherProps }) => {\r\n\r\n    const [collapsed, setCollapsed] = React.useState(false)\r\n    const [showElements, setShowElements] = React.useState(true)\r\n    let radioItems = [\"Yes\", \"No\"];\r\n    const [templateEntity, setComponentState] = React.useState({\r\n        \"name\": '',\r\n        \"commercial_name\": '',\r\n        \"incorporation_legal_form\": '',\r\n        // \"incorporation_legal_formSpecified\": false,\r\n        \"incorporation_number\": '',\r\n        \"business\":'',\r\n        \"phones\": [],\r\n        \"addresses\": [],\r\n        \"email\": '',\r\n        \"url\": '',\r\n        \"incorporation_state\": '',\r\n        \"incorporation_country_code\": '',\r\n        // \"incorporation_country_codeSpecified\": false,\r\n        \"director_id\": [],\r\n        \"incorporation_date\": '',\r\n        // \"incorporation_dateSpecified\": '',\r\n        \"business_closed\": false,\r\n        // \"business_closedSpecified\": null,\r\n        // \"date_business_closed\": '',\r\n        // \"date_business_closedSpecified\": false,\r\n        \"tax_number\": '',\r\n        \"tax_reg_number\": '',\r\n        \"comments\": ''\r\n    })\r\n\r\n    const [touched, setTouched] = React.useState(false);\r\n    const onFocus = () => setTouched(true)\r\n    const onBlur = () => setTouched(false)\r\n\r\n    const [showError, setShowError] = React.useState({isEmpty: false, value: ''});\r\n\r\n    const checkInputs = (e, inputState) => {\r\n        let error = false;\r\n        let val = {};\r\n        for (const [key, value] of Object.entries(inputState)) {\r\n            if (e.target.name === key) {\r\n                value === '' ? error = true : error = false; \r\n                val = key;\r\n            }\r\n        }\r\n        setShowError({\r\n            isEmpty: error,\r\n            value: val\r\n         });\r\n    }\r\n    \r\n    console.log('error', showError)\r\n\r\n    const handleChange = event => {\r\n        const { name, value } = event.target;\r\n        setComponentState({ ...templateEntity, [name]: value });\r\n    };\r\n\r\n    const handleSaveDirector = (director) => {\r\n        setComponentState({ ...templateEntity, director_id: { ...templateEntity.director_id, director } });\r\n    }\r\n\r\n    const handleSaveClick = () => {\r\n        if(!templateEntity.name || !templateEntity.business || !templateEntity.incorporation_state || !templateEntity.url || !templateEntity.commercial_name ||\r\n            !templateEntity.incorporation_number || !templateEntity.incorporation_country_code || !templateEntity.incorporation_legal_form ||\r\n            !templateEntity.incorporation_date || !templateEntity.email || !templateEntity.business_closed || templateEntity.phone ||\r\n            !templateEntity.addresses || !templateEntity.director_id){\r\n            alert('please fill this field')\r\n        }\r\n        OnSave(transRef, partyType, templateEntity);\r\n    }\r\n\r\n    const handleCancelClick = () => {\r\n        console.log(\"Hello: \", templateEntity);\r\n    }\r\n\r\n    const handlePhoneSave = (phone) => {\r\n        templateEntity.phones.push(phone)\r\n    }\r\n\r\n    const handleAddressSave = (address) => {\r\n        templateEntity.addresses.push(address)\r\n    }\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                    <CCard>\r\n                        <CCardHeader>\r\n                            {label}\r\n                            <div className=\"card-header-actions\">\r\n                                <CButton\r\n                                    color=\"link\"\r\n                                    className=\"card-header-action btn-minimize\"\r\n                                    onClick={() => setCollapsed(!collapsed)}\r\n                                >\r\n                                    <CIcon name={collapsed ? 'cil-chevron-bottom' : 'cil-chevron-top'} />\r\n                                </CButton>\r\n                            </div>\r\n                        </CCardHeader>\r\n                        <CCollapse show={collapsed} timeout={1000}>\r\n                            <CCardBody>\r\n                                <CForm className=\"form-horizontal\">\r\n                                    <CFormGroup row>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormInput \r\n                                                label=\"Name*\" \r\n                                                name=\"name\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, templateEntity)} \r\n                                                value={templateEntity.name} \r\n                                                className={`form-control ${!templateEntity.name && touched && 'is-invalid'} ${templateEntity.name && 'is-valid'}`} \r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Business Area\" \r\n                                                name=\"business\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, templateEntity)} \r\n                                                value={templateEntity.business} \r\n                                                className={`form-control ${!templateEntity.business && touched && 'is-invalid'} ${templateEntity.business && 'is-valid'}`}\r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Incorporation Province/State\" \r\n                                                name=\"incorporation_state\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, templateEntity)} \r\n                                                value={templateEntity.incorporation_state} \r\n                                                className={`form-control ${!templateEntity.incorporation_state && touched && 'is-invalid'} ${templateEntity.incorporation_state && 'is-valid'}`}\r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Entity web address\" \r\n                                                name=\"url\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, templateEntity)} \r\n                                                value={templateEntity.url} \r\n                                                className={`form-control ${!templateEntity.url && touched && 'is-invalid'} ${templateEntity.url && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormInput \r\n                                                label=\"Registered Name*\" \r\n                                                name=\"commercial_name\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, templateEntity)} \r\n                                                value={templateEntity.commercial_name} \r\n                                                className={`form-control ${!templateEntity.commercial_name && touched && 'is-invalid'} ${templateEntity.commercial_name && 'is-valid'}`}\r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Incorporation Reg Number*\" \r\n                                                name=\"incorporation_number\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, templateEntity)} \r\n                                                value={templateEntity.incorporation_number} \r\n                                                className={`form-control ${!templateEntity.incorporation_number && touched && 'is-invalid'} ${templateEntity.incorporation_number && 'is-valid'}`}\r\n                                            />\r\n                                            <CountryCodeEnum \r\n                                                label=\"Incorporation Country Code*\" \r\n                                                name=\"incorporation_country_code\" \r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, templateEntity)} \r\n                                                value={templateEntity.incorporation_country_code} \r\n                                                className={`form-control ${!templateEntity.incorporation_country_code && touched && 'is-invalid'} ${templateEntity.incorporation_country_code && 'is-valid'}`}\r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Reg. Number\" \r\n                                                name=\"tax_reg_number\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, templateEntity)} \r\n                                                value={templateEntity.tax_reg_number} \r\n                                                className={`form-control ${!templateEntity.tax_reg_number && touched && 'is-invalid'} ${templateEntity.tax_reg_number && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <EntityLegalFormEnum \r\n                                                label=\"Incorporation Legal Form*\" \r\n                                                name=\"incorporation_legal_form\" \r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, templateEntity)} \r\n                                                value={templateEntity.incorporation_legal_form} \r\n                                                className={`form-control ${!templateEntity.incorporation_legal_form && touched && 'is-invalid'} ${templateEntity.incorporation_legal_form && 'is-valid'}`}\r\n                                            />\r\n                                            <FormDate \r\n                                                label=\"Incorporation Date*\" \r\n                                                name=\"incorporation_date\" \r\n                                                type=\"date\"\r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, templateEntity)} \r\n                                                value={templateEntity.incorporation_date} \r\n                                                className={`form-control ${!templateEntity.incorporation_date && touched && 'is-invalid'} ${templateEntity.incorporation_date && 'is-valid'}`}\r\n                                            />\r\n                                            <FormEmail \r\n                                                label=\"Email\" \r\n                                                name=\"email\" \r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, templateEntity)} \r\n                                                value={templateEntity.email} \r\n                                                className={`form-control ${!templateEntity.email && touched && 'is-invalid'} ${templateEntity.email && 'is-valid'}`}\r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Tax Number\" \r\n                                                name=\"tax_number\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, templateEntity)} \r\n                                                value={templateEntity.tax_number} \r\n                                                className={`form-control ${!templateEntity.tax_number && touched && 'is-invalid'} ${templateEntity.tax_number && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"6\">\r\n                                            <FormRadioText \r\n                                                label=\"Business Closed?\" \r\n                                                name=\"business_closed\" \r\n                                                width=\"6\" items={[\"Yes\", \"No\"]} \r\n                                                handleChange={handleChange}\r\n                                                value={templateEntity.business_closed}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <ReportPhones \r\n                                                label=\"Phones*\"\r\n                                                name=\"phones\" \r\n                                                handlePhoneSave={handlePhoneSave}\r\n                                                value={templateEntity.phones}\r\n                                            ></ReportPhones>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <ReportAddresses \r\n                                                label=\"Addresses*\"\r\n                                                name=\"addresses\" \r\n                                                handleAddressSave={handleAddressSave} \r\n                                                value={templateEntity.addresses}\r\n                                            ></ReportAddresses>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <TransactionDirectors \r\n                                                label=\"Directors*\" \r\n                                                name=\"director_id\" \r\n                                                alias=\"Director\"\r\n                                                partyType={partyType} \r\n                                                transRef={transRef} \r\n                                                OnSave={handleSaveDirector}\r\n                                                value={templateEntity.director_id}\r\n                                            ></TransactionDirectors>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <FormTextArea \r\n                                                label=\"Comments\" \r\n                                                name=\"comments\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, templateEntity)} \r\n                                                value={templateEntity.comments} \r\n                                                className={`form-control ${!templateEntity.comments && touched && 'is-invalid'} ${templateEntity.comments && 'is-valid'}`} \r\n                                            />\r\n                                        </CCol>\r\n                                    </CFormGroup>\r\n                                </CForm>\r\n                                <FormActions \r\n                                    saveText=\"Save Entity\" \r\n                                    handleSaveClick={handleSaveClick} \r\n                                    handleCancelClick={handleCancelClick}\r\n                                ></FormActions>\r\n                            </CCardBody>\r\n                        </CCollapse>\r\n                    </CCard>\r\n                </CFade>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nexport default TransactionEntity;\r\n","import React from 'react';\r\nimport FormDynamicSelect from '../../form-inputs/form-dynamic-select.component'\r\n\r\nclass AccountTypeEnum extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            options : [\r\n                {value: 'A', description:'Business'},\r\n                {value: 'C', description:'Savings'},\r\n                {value: 'D', description:'Current Business'},\r\n                {value: 'E', description:'Current personal'},\r\n                {value: 'I', description:'Fixed'},\r\n                {value: 'L', description:'Trading Account'},\r\n                {value: 'O', description:'Other'},\r\n                {value: 'P', description:'Dormicilliary'}\r\n            ]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { options } = this.state;\r\n        const { name, label, handleChange } = this.props;\r\n        \r\n        return(\r\n            <FormDynamicSelect label={label} name={name} options={options} handleChange={handleChange} />\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default AccountTypeEnum;","import React from 'react';\r\nimport usersData from '../../views/users/UsersData';\r\nimport CombinedTable from './combined-table.component';\r\n\r\nconst fields = ['name','registered', 'role', 'status']\r\n\r\nclass SignatoryTable extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            transactionData : usersData\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { transactionData } = this.state;\r\n        // const { name } = this.props;\r\n        \r\n        return(\r\n            <CombinedTable name=\"Signatories Table\" fields={fields} tableData={transactionData} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default SignatoryTable;","import React from 'react';\r\nimport FormDynamicSelect from '../../form-inputs/form-dynamic-select.component'\r\n\r\nclass AccountPersonRoleEnum extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            options : [\r\n                {value: '---', description:'Default value'}\r\n            ]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { options } = this.state;\r\n        const { name, label, handleChange } = this.props;\r\n        \r\n        return(\r\n            <FormDynamicSelect label={label} name={name} options={options} handleChange={handleChange} />\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default AccountPersonRoleEnum;","import CIcon from '@coreui/icons-react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup,\r\n    CRow\r\n} from '@coreui/react';\r\nimport React from 'react';\r\nimport FormActions from '../../form-inputs/form-actions.component';\r\nimport FormRadioText from '../../form-inputs/form-radio-text.component';\r\nimport AccountPersonRoleEnum from '../../goaml-enums/account-person-role-enum/account-person-role-enum.component';\r\nimport TransactionPerson from '../transaction-person/transaction-person.component';\r\n\r\nconst SignatoryTemplate = ({ name, handlePhoneSave, ...otherProps }) => {\r\n\r\n    const [collapsed, setCollapsed] = React.useState(false)\r\n    const [showElements, setShowElements] = React.useState(true)\r\n    const [componentState, setComponentState] = React.useState({\r\n        \"person\": '',\r\n        \"is_primary\": '',\r\n        \"role\": ''\r\n    });\r\n\r\n    const handleSaveClick = () => {\r\n        handlePhoneSave(componentState);\r\n    }\r\n\r\n    const [check, setCheck] = React.useState(false);\r\n    const onChecked = (e) => {\r\n        const { name, value } = e.target;\r\n        console.log({name, value})\r\n        setCheck({[name]: value})\r\n    }\r\n\r\n    const handleChange = event => {\r\n        const { name, value } = event.target;\r\n        setComponentState({ ...componentState, [name]: value });\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        console.log(\"Hello: \", componentState);\r\n    }\r\n    \r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                <CCard>\r\n                    <CCardHeader>\r\n                    {name}\r\n                    <div className=\"card-header-actions\">\r\n                        <CButton \r\n                        color=\"link\" \r\n                        className=\"card-header-action btn-minimize\" \r\n                        onClick={() => setCollapsed(!collapsed)}\r\n                        >\r\n                        <CIcon name={collapsed ? 'cil-chevron-bottom':'cil-chevron-top'} />\r\n                        </CButton>\r\n                    </div>\r\n                    </CCardHeader>\r\n                    <CCollapse show={collapsed} timeout={1000}>\r\n                    <CCardBody>\r\n                        <CForm className=\"form-horizontal\">\r\n                            <CFormGroup row>\r\n                                <CCol xs=\"8\">\r\n                                    <FormRadioText \r\n                                        label=\"Is Primary?\" \r\n                                        name=\"is_primary\" \r\n                                        width=\"6\" \r\n                                        items={[\"Yes\", \"No\"]}\r\n                                        handleChange={onChecked}\r\n                                        defaultValue={componentState.is_primary}\r\n                                    />\r\n                                </CCol>\r\n                                <CCol xs=\"4\">\r\n                                    <AccountPersonRoleEnum \r\n                                    label=\"Role\" \r\n                                    name=\"role\"\r\n                                    handleChange={onChecked}\r\n                                    defaultValue={componentState.role}\r\n                                    ></AccountPersonRoleEnum>\r\n                                </CCol>\r\n                                <CCol xs=\"12\">\r\n                                    <TransactionPerson \r\n                                        name=\"person\" \r\n                                        label=\"Person\" \r\n                                        alias=\"Person\"\r\n                                        handleChange={onChecked}\r\n                                        defaultValue={componentState.person}\r\n                                    ></TransactionPerson>\r\n                                </CCol>\r\n                            </CFormGroup>\r\n                            <FormActions \r\n                                saveText=\"Save Signatory\" \r\n                                handleSaveClick={handleSaveClick} \r\n                                handleCancelClick={handleCancelClick}\r\n                            ></FormActions>\r\n                        </CForm>\r\n                    </CCardBody>\r\n                    </CCollapse>\r\n                </CCard>\r\n                </CFade>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nexport default SignatoryTemplate;","import React from 'react';\r\nimport SignatoryTable from '../../goaml-tables/table-signatory.component'\r\nimport SignatoryTemplate from '../template-signatory/template-signatory.components'\r\nimport {\r\n    CLabel,\r\n    CCard,\r\n    CCardBody,\r\n    CCol,\r\n    CFade,\r\n    CRow,\r\n    CNav,\r\n    CNavItem,\r\n    CNavLink,\r\n    CTabContent,\r\n    CTabPane,\r\n    CTabs,\r\n  } from '@coreui/react'\r\n\r\nconst TransactionSignatories = ({ name, label, ...otherProps }) => {\r\n    \r\n    let [showElements, setShowElements] = React.useState(true)\r\n    const tab1Title = `Add ${label}`;\r\n    const tab2Title = `${label} Table`;\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                {label ? (\r\n                    <CLabel htmlFor={label}>{label}</CLabel>\r\n                ) : null}\r\n                <div className=\"row\">\r\n                    <CCol xs=\"12\">\r\n                        <CTabs activeTab=\"Tab1\">\r\n                            <CNav variant=\"tabs\">\r\n                                <CNavItem>\r\n                                <CNavLink data-tab=\"Tab1\">\r\n                                    {tab1Title}\r\n                                </CNavLink>\r\n                                </CNavItem>\r\n                                <CNavItem>\r\n                                <CNavLink data-tab=\"Tab2\">\r\n                                    {tab2Title}\r\n                                </CNavLink>\r\n                                </CNavItem>\r\n                            </CNav>\r\n                            <CTabContent>\r\n                                <CTabPane data-tab=\"Tab1\">\r\n                                    <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                                        <CCard>\r\n                                            <CCardBody>\r\n                                            <CRow>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <SignatoryTemplate name=\"Add a Signatory\"></SignatoryTemplate>\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                            </CCardBody>\r\n                                        </CCard>\r\n                                    </CFade>\r\n                                </CTabPane>\r\n                                <CTabPane data-tab=\"Tab2\">\r\n                                    <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                                        <CCard>\r\n                                            <CCardBody>\r\n                                            <CRow>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <SignatoryTable name={name} />\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                            </CCardBody>\r\n                                        </CCard>\r\n                                    </CFade>\r\n                                </CTabPane>\r\n                            </CTabContent>\r\n                        </CTabs>\r\n                    </CCol>\r\n                </div>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nexport default TransactionSignatories;\r\n","import CIcon from '@coreui/icons-react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup,\r\n    CRow\r\n} from '@coreui/react';\r\nimport React from 'react';\r\nimport FormActions from 'src/components/form-inputs/form-actions.component';\r\nimport FormAmount from '../../form-inputs/form-amount.component';\r\nimport FormDate from '../../form-inputs/form-date.component';\r\nimport FormInput from '../../form-inputs/form-input.component';\r\nimport FormRadioText from '../../form-inputs/form-radio-text.component';\r\nimport FormTextArea from '../../form-inputs/form-textarea-component';\r\nimport AccountTypeEnum from '../../goaml-enums/account-type-enum/account-type-enum.component';\r\nimport CurrenciesEnum from '../../goaml-enums/currencies-enum/currencies-enum.component';\r\nimport TransactionEntity from '../transaction-entity/transaction-entity.components';\r\nimport TransactionSignatories from '../transaction-signatory/transaction-signatory.component';\r\n\r\n\r\nconst TransactionAccount = ({ name, label, transRef, partyType, OnSave, ...otherProps }) => {\r\n\r\n    const [collapsed, setCollapsed] = React.useState(false)\r\n    const [showElements, setShowElements] = React.useState(true)\r\n    let radioItems = [\"Yes\", \"No\"];\r\n    const [stateAccount, setStateAccount] = React.useState({\r\n        \"institution_name\": '',\r\n        \"institution_code\": '',\r\n        \"swift\": '',\r\n        \"non_banking_institution\": false,\r\n        \"branch\": '',\r\n        \"account\": '',\r\n        \"currency_code\": '',\r\n        \"account_name\": '',\r\n        \"iban\": '',\r\n        \"client_number\": '',\r\n        \"personal_account_type\": '',\r\n        \"t_entity\": '',\r\n        \"signatory\": '',\r\n        \"is_primary\": '',\r\n        \"t_person\": '',\r\n        \"role\": '',\r\n        \"opened\": '',\r\n        \"closed\": '',\r\n        \"balance\": '',\r\n        \"date_balance\": '',\r\n        \"status_code\": '',\r\n        \"beneficiary\": '',\r\n        \"beneficiary_comment\": '',\r\n        \"comments\": '',\r\n    })\r\n\r\n    const [touched, setTouched] = React.useState(false);\r\n    const onFocus = () => setTouched(true)\r\n    const onBlur = () => setTouched(false)\r\n\r\n    const [showError, setShowError] = React.useState({isEmpty: false, value: ''});\r\n\r\n    const checkInputs = (e, inputState) => {\r\n        let error = false;\r\n        let val = {};\r\n        let myValidation;\r\n        if (typeof myValidation === 'string' || 'integer' || 'boolean'){\r\n            for (const [key, value] of Object.entries(inputState)) {\r\n                if (e.target.name === key) {\r\n                    value === null ? error = true : error = false; \r\n                    val = key;\r\n                }\r\n            }\r\n        }\r\n        setShowError({\r\n            isEmpty: error,\r\n            value: val\r\n         });\r\n    }\r\n    \r\n    console.log('error', showError)\r\n\r\n    const handleChange = event => {\r\n        const { name, value } = event.target;\r\n        setStateAccount({ ...stateAccount, [name]: value });\r\n    };\r\n\r\n    const handleSaveClick = () => {\r\n        if (!stateAccount.account || !stateAccount.iban || !stateAccount.non_banking_institution || !stateAccount.currency_code || !stateAccount.opened ||\r\n            !stateAccount.account_name || !stateAccount.institution_name || !stateAccount.swift || !stateAccount.balance || !stateAccount.closed ||\r\n            !stateAccount.personal_account_type || !stateAccount.branch || !stateAccount.date_balance || !stateAccount.client_number ||\r\n            !stateAccount.beneficiary || !stateAccount.beneficiary_comment) {\r\n            alert('please fill this field')\r\n        }\r\n        OnSave(transRef, partyType, stateAccount);\r\n    }\r\n\r\n    const handleCancelClick = () => {\r\n        console.log(\"Hello: \", stateAccount);\r\n    }\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                <CCard>\r\n                    <CCardHeader>\r\n                        {label}\r\n                        <div className=\"card-header-actions\">\r\n                            <CButton \r\n                            color=\"link\" \r\n                            className=\"card-header-action btn-minimize\" \r\n                            onClick={() => setCollapsed(!collapsed)}\r\n                            >\r\n                            <CIcon name={collapsed ? 'cil-chevron-bottom':'cil-chevron-top'} />\r\n                            </CButton>\r\n                        </div>\r\n                    </CCardHeader>\r\n                    <CCollapse show={collapsed} timeout={1000}>\r\n                    <CCardBody>\r\n                        <CForm className=\"form-horizontal\">\r\n                            <CFormGroup row>\r\n                                <CCol xs=\"4\">\r\n                                    <FormInput \r\n                                        label=\"Account*\" \r\n                                        name=\"account\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        handleChange={handleChange}\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        onKeyUp={(e) => checkInputs(e, stateAccount)} \r\n                                        value={stateAccount.account} \r\n                                        className={`form-control ${!stateAccount.account && touched && 'is-invalid'} ${stateAccount.account && 'is-valid'}`}\r\n                                    />\r\n                                    <FormInput \r\n                                        label=\"Iban\" \r\n                                        name=\"iban\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        handleChange={handleChange}\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        onKeyUp={(e) => checkInputs(e, stateAccount)} \r\n                                        value={stateAccount.iban} \r\n                                        className={`form-control ${!stateAccount.iban && touched && 'is-invalid'} ${stateAccount.iban && 'is-valid'}`}\r\n                                    />\r\n                                    <FormRadioText \r\n                                        label=\"Non Banking Institution?\" \r\n                                        name=\"non_banking_institution\" \r\n                                        width=\"6\" \r\n                                        items={[\"Yes\", \"No\"]}\r\n                                        value={stateAccount.non_banking_institution}\r\n                                        handleChange={handleChange}\r\n                                    />\r\n                                    <CurrenciesEnum \r\n                                        label=\"Currency Code*\" \r\n                                        name=\"currency_code\"\r\n                                        value={stateAccount.currency_code}\r\n                                        handleChange={handleChange} \r\n                                    />\r\n                                    <FormDate \r\n                                        label=\"Opened*\" \r\n                                        name=\"Opened\"\r\n                                        value={stateAccount.opened}\r\n                                        handleChange={handleChange} \r\n                                    />\r\n                                </CCol>\r\n                                <CCol xs=\"4\">\r\n                                    <FormInput \r\n                                        label=\"Account name\" \r\n                                        name=\"account_name\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        handleChange={handleChange}\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        onKeyUp={(e) => checkInputs(e, stateAccount)} \r\n                                        value={stateAccount.account_name} \r\n                                        className={`form-control ${!stateAccount.account_name && touched && 'is-invalid'} ${stateAccount.account_name && 'is-valid'}`}\r\n                                    />\r\n                                    <FormInput \r\n                                        label=\"Institution Name*\" \r\n                                        name=\"institution_name\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        handleChange={handleChange}\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        onKeyUp={(e) => checkInputs(e, stateAccount)} \r\n                                        value={stateAccount.institution_name} \r\n                                        className={`form-control ${!stateAccount.institution_name && touched && 'is-invalid'} ${stateAccount.institution_name && 'is-valid'}`}\r\n                                    />\r\n                                    <FormRadioText \r\n                                        label=\"Code or Swift?\" \r\n                                        name=\"swift\" \r\n                                        width=\"6\" \r\n                                        items={[\"Institution Code\", \"Swift\"]}\r\n                                        handleChange={handleChange}\r\n                                        value={stateAccount.swift} \r\n                                    />\r\n                                    <FormAmount \r\n                                        label=\"Balance*\" \r\n                                        name=\"balance\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        handleChange={handleChange}\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        onKeyUp={(e) => checkInputs(e, stateAccount)} \r\n                                        value={stateAccount.balance} \r\n                                        className={`form-control ${!stateAccount.balance && touched && 'is-invalid'} ${stateAccount.balance && 'is-valid'}`}\r\n                                    />\r\n                                    <FormDate \r\n                                        label=\"Closed\" \r\n                                        name=\"closed\"\r\n                                        handleChange={handleChange}\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        onKeyUp={(e) => checkInputs(e, stateAccount)} \r\n                                        value={stateAccount.closed} \r\n                                        className={`form-control ${!stateAccount.closedt && touched && 'is-invalid'} ${stateAccount.closed && 'is-valid'}`}\r\n                                    />                    \r\n                                </CCol>\r\n                                <CCol xs=\"4\">\r\n                                    <AccountTypeEnum \r\n                                        label=\"Account Type*\" \r\n                                        name=\"personal_account-type\" \r\n                                        handleChange={handleChange}\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        onKeyUp={(e) => checkInputs(e, stateAccount)} \r\n                                        value={stateAccount.personal_account_type} \r\n                                        className={`form-control ${!stateAccount.personal_account_type && touched && 'is-invalid'} ${stateAccount.personal_account_type && 'is-valid'}`}\r\n                                    />\r\n                                    <FormInput \r\n                                        label=\"Branch Code*\" \r\n                                        name=\"branch\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        handleChange={handleChange}\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        onKeyUp={(e) => checkInputs(e, stateAccount)} \r\n                                        value={stateAccount.branch} \r\n                                        className={`form-control ${!stateAccount.branch && touched && 'is-invalid'} ${stateAccount.branch && 'is-valid'}`}\r\n                                    />\r\n                                    <FormInput \r\n                                        label=\"Role*\" \r\n                                        name=\"role\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        handleChange={handleChange}\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        onKeyUp={(e) => checkInputs(e, stateAccount)} \r\n                                        value={stateAccount.role} \r\n                                        className={`form-control ${!stateAccount.role && touched && 'is-invalid'} ${stateAccount.role && 'is-valid'}`}\r\n                                    />\r\n                                    <FormDate \r\n                                        label=\"Date of Balance*\" \r\n                                        type=\"date\"\r\n                                        name=\"date_balance\"\r\n                                        handleChange={handleChange}\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        onKeyUp={(e) => checkInputs(e, stateAccount)} \r\n                                        value={stateAccount.date_balance} \r\n                                        className={`form-control ${!stateAccount.date_balance && touched && 'is-invalid'} ${stateAccount.date_balance && 'is-valid'}`}\r\n                                    />\r\n                                    <FormInput \r\n                                        label=\"Client Number\"\r\n                                        type=\"number\" \r\n                                        name=\"client_number\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        handleChange={handleChange}\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        onKeyUp={(e) => checkInputs(e, stateAccount)} \r\n                                        value={stateAccount.client_number} \r\n                                        className={`form-control ${!stateAccount.client_number && touched && 'is-invalid'} ${stateAccount.client_number && 'is-valid'}`}\r\n                                    />\r\n                                </CCol>\r\n                                <CCol xs=\"4\">\r\n                                    <FormInput \r\n                                        label=\"Beneficiary\" \r\n                                        name=\"beneficiary\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        handleChange={handleChange}\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        onKeyUp={(e) => checkInputs(e, stateAccount)} \r\n                                        value={stateAccount.beneficiary} \r\n                                        className={`form-control ${!stateAccount.beneficiary && touched && 'is-invalid'} ${stateAccount.beneficiary && 'is-valid'}`}\r\n                                    />\r\n                                </CCol>\r\n                                <CCol xs=\"8\">\r\n                                    <FormTextArea \r\n                                        label=\"Beneficiary Comment\" \r\n                                        name=\"beneficiary_comment\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        handleChange={handleChange}\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        onKeyUp={(e) => checkInputs(e, stateAccount)} \r\n                                        value={stateAccount.beneficiary_comment} \r\n                                        className={`form-control ${!stateAccount.beneficiary_comment && touched && 'is-invalid'} ${stateAccount.beneficiary_comment && 'is-valid'}`}\r\n                                    />\r\n                                </CCol>\r\n                                <CCol xs=\"8\">\r\n                                <FormActions \r\n                                    saveText=\"Save Transaction Account\" \r\n                                    handleSaveClick={handleSaveClick} \r\n                                    handleCancelClick={handleCancelClick}></FormActions>\r\n                                </CCol>\r\n                                <CCol xs=\"12\">\r\n                                    <TransactionEntity \r\n                                        label=\"Transaction Entity\"\r\n                                        name=\"transaction_entity\"\r\n                                        handleChange={handleChange}\r\n                                        value={stateAccount.transaction_entity}\r\n                                    ></TransactionEntity>\r\n                                </CCol>\r\n                                <CCol xs=\"12\">\r\n                                    <TransactionSignatories \r\n                                        name=\"Signatories\" \r\n                                        label=\"signatory\"\r\n                                        handleChange={handleChange}\r\n                                        value={stateAccount.signatory}\r\n                                        className=\"pb-30\"\r\n                                    ></TransactionSignatories>\r\n                                </CCol>\r\n                                <CCol xs=\"12\">\r\n                                    <FormTextArea \r\n                                        label=\"Comments\" \r\n                                        name=\"comments\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        handleChange={handleChange}\r\n                                        value={stateAccount.comments}\r\n                                    />\r\n                                </CCol>\r\n                            </CFormGroup>\r\n                        </CForm>\r\n                    </CCardBody>\r\n                    </CCollapse>\r\n                </CCard>\r\n                </CFade>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nexport default TransactionAccount;","const TransactionsPartyTypes = {\r\n  FROM: 'FROM',\r\n  TO: 'TO',\r\n  MY_CLIENT: 'MY_CLIENT',\r\n  PERSON_CLIENT: 'PERSON_CLIENT',\r\n  ACCOUNT_CLIENT: 'ACCOUNT_CLIENT',\r\n  ENTITY_CLIENT: 'ENTITY_CLIENT',\r\n  NOT_MY_CLIENT: 'NOT_MY_CLIENT',\r\n  PERSON_NOT_CLIENT: 'PERSON_NOT_CLIENT',\r\n  ACCOUNT_NOT_CLIENT: 'ACCOUNT_NOT_CLIENT',\r\n  ENTITY_NOT_CLIENT: 'ENTITY_NOT_CLIENT'\r\n};\r\n\r\nexport default TransactionsPartyTypes;","import React from 'react';\r\nimport TransactionToPartyInfo from '../transaction-party-info/transaction-to-party-info.component'\r\nimport TransactionFromPartyInfo from '../transaction-party-info/transaction-from-party-info.component'\r\nimport TransactionPerson from '../transaction-person/transaction-person.component'\r\nimport TransactionEntity from '../transaction-entity/transaction-entity.components'\r\nimport TransactionAccount from '../transaction-account/transaction-account.components'\r\nimport TransactionsPartyTypes from '../transaction-party/transaction-party.types'\r\n\r\nimport {\r\n    CButton,\r\n    CLabel,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup,\r\n    CRow,\r\n    CNav,\r\n    CNavItem,\r\n    CNavLink,\r\n    CTabContent,\r\n    CTabPane,\r\n    CTabs\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\n\r\nconst TransactionParty = ({ name, label, displayPartyType, reportType, transRef, handleSaveParty, ...otherProps }) => {\r\n\r\n    const [collapseMulti, setCollapseMulti] = React.useState([false, false, false, false, false, false])\r\n    let [showElements, setShowElements] = React.useState(true)\r\n\r\n    const toggleMulti = (type) => {\r\n        let newCollapse = collapseMulti.slice()\r\n        switch (type) {\r\n            case \"person-client\":\r\n                newCollapse[0] = !collapseMulti[0];\r\n                newCollapse[1] = false;\r\n                newCollapse[2] = false;\r\n                newCollapse[3] = false;\r\n                newCollapse[4] = false;\r\n                newCollapse[5] = false;\r\n                break;\r\n            case \"account-client\"://\r\n                newCollapse[1] = !collapseMulti[1];\r\n                newCollapse[0] = false;\r\n                newCollapse[2] = false;\r\n                newCollapse[3] = false;\r\n                newCollapse[4] = false;\r\n                newCollapse[5] = false;\r\n                break;\r\n            case \"entity-client\":\r\n                newCollapse[2] = !collapseMulti[2];\r\n                newCollapse[0] = false;\r\n                newCollapse[1] = false;\r\n                newCollapse[3] = false;\r\n                newCollapse[4] = false;\r\n                newCollapse[5] = false;\r\n                break;\r\n            case \"not-person-client\":\r\n                newCollapse[3] = !collapseMulti[3];\r\n                newCollapse[4] = false;\r\n                newCollapse[5] = false;\r\n                newCollapse[0] = false;\r\n                newCollapse[1] = false;\r\n                newCollapse[2] = false;\r\n                break;\r\n            case \"not-account-client\":\r\n                newCollapse[4] = !collapseMulti[4];\r\n                newCollapse[3] = false;\r\n                newCollapse[5] = false;\r\n                newCollapse[0] = false;\r\n                newCollapse[1] = false;\r\n                newCollapse[2] = false;\r\n                break;\r\n            case \"not-entity-client\":\r\n                newCollapse[5] = !collapseMulti[5];\r\n                newCollapse[3] = false;\r\n                newCollapse[4] = false;\r\n                newCollapse[0] = false;\r\n                newCollapse[1] = false;\r\n                newCollapse[2] = false;\r\n                break;\r\n            default:\r\n        }\r\n        setCollapseMulti(newCollapse)\r\n    }\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                {label ? (\r\n                    <CLabel htmlFor={name}>{label}</CLabel>\r\n                ) : null}\r\n                <div className=\"row\">\r\n                    <CCol xs=\"12\">\r\n                        <CTabs activeTab=\"myClient\">\r\n                            <CNav variant=\"tabs\">\r\n                                <CNavItem>\r\n                                    <CNavLink data-tab=\"myClient\">\r\n                                        My Client\r\n                                </CNavLink>\r\n                                </CNavItem>\r\n                                <CNavItem>\r\n                                    <CNavLink data-tab=\"notMyClient\">\r\n                                        Not My Client\r\n                                </CNavLink>\r\n                                </CNavItem>\r\n                            </CNav>\r\n                            <CTabContent>\r\n                                <CTabPane data-tab=\"myClient\">\r\n                                    <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                                        <CCard>\r\n                                            <CCardBody>\r\n                                                {displayPartyType == TransactionsPartyTypes.FROM ?\r\n                                                    <TransactionFromPartyInfo transRef={transRef} partyType={TransactionsPartyTypes.MY_CLIENT} handleSavePartyInfo={handleSaveParty} name={`Expand and Fill ${label} Overview`} />\r\n                                                    :\r\n                                                    <TransactionToPartyInfo transRef={transRef} partyType={TransactionsPartyTypes.MY_CLIENT} handleSavePartyInfo={handleSaveParty} name={`Expand and Fill ${label} Overview`} />\r\n                                                }\r\n                                                <p>\r\n                                                    <button type=\"button\" onClick={() => { toggleMulti('person-client') }}\r\n                                                        class=\"btn btn-link\">Add Person</button>\r\n                                                    <button type=\"button\" onClick={() => { toggleMulti('account-client') }}\r\n                                                        class=\"btn btn-link\">Add Account</button>\r\n                                                    <button type=\"button\" onClick={() => { toggleMulti('entity-client') }}\r\n                                                        class=\"btn btn-link\">Add Entity</button>\r\n                                                </p>\r\n                                                <CRow>\r\n                                                    <CCol className=\"col-sm-12\">\r\n                                                        <CCollapse show={collapseMulti[0]}>\r\n                                                            <TransactionPerson OnSave={handleSaveParty} partyType={TransactionsPartyTypes.PERSON_CLIENT} transRef={transRef} label=\"Transaction Person\" name=\"Person\" alias=\"Person\"></TransactionPerson>\r\n                                                        </CCollapse>\r\n                                                    </CCol>\r\n                                                    <CCol className=\"col-sm-12\">\r\n                                                        <CCollapse show={collapseMulti[1]}>\r\n                                                            <TransactionAccount OnSave={handleSaveParty} partyType={TransactionsPartyTypes.ACCOUNT_CLIENT} transRef={transRef} name=\"TransactionAccount\" label=\"Transaction Account\"></TransactionAccount>\r\n                                                        </CCollapse>\r\n                                                    </CCol>\r\n                                                    <CCol className=\"col-sm-12\">\r\n                                                        <CCollapse show={collapseMulti[2]}>\r\n                                                            <TransactionEntity OnSave={handleSaveParty} partyType={TransactionsPartyTypes.ENTITY_CLIENT} transRef={transRef} name=\"TransactionEntity\" label=\"Transaction Entity\"></TransactionEntity>\r\n                                                        </CCollapse>\r\n                                                    </CCol>\r\n                                                </CRow>\r\n                                            </CCardBody>\r\n                                        </CCard>\r\n                                    </CFade>\r\n                                </CTabPane>\r\n                                <CTabPane data-tab=\"notMyClient\">\r\n                                    <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                                        <CCard>\r\n                                            <CCardBody>\r\n                                            {displayPartyType == TransactionsPartyTypes.FROM ?\r\n                                                    <TransactionFromPartyInfo transRef={transRef} partyType={TransactionsPartyTypes.NOT_MY_CLIENT} handleSavePartyInfo={handleSaveParty} name={`Expand and Fill ${label} Overview`} />\r\n                                                    :\r\n                                                    <TransactionToPartyInfo transRef={transRef} partyType={TransactionsPartyTypes.NOT_MY_CLIENT} handleSavePartyInfo={handleSaveParty} name={`Expand and Fill ${label} Overview`} />\r\n                                                }\r\n                                                <p>\r\n                                                    <CButton color=\"primary\" onClick={() => { toggleMulti('not-person-client') }}\r\n                                                        class=\"btn btn-link\">Add Person</CButton>{' '}\r\n                                                    <CButton color=\"primary\" onClick={() => { toggleMulti('not-account-client') }}\r\n                                                        class=\"btn btn-link\">Add Account</CButton>{' '}\r\n                                                    <CButton color=\"primary\" onClick={() => { toggleMulti('not-entity-client') }}\r\n                                                        class=\"btn btn-link\">Add Entity</CButton>{' '}\r\n                                                </p>\r\n                                                <CRow>\r\n                                                    <CCol className=\"col-sm-12\">\r\n                                                        <CCollapse show={collapseMulti[3]}>\r\n                                                            <TransactionPerson OnSave={handleSaveParty} partyType={TransactionsPartyTypes.PERSON_NOT_CLIENT} transRef={transRef} label=\"Transaction Person\" name=\"Person-NC\" alias=\"Person\"></TransactionPerson>\r\n                                                        </CCollapse>\r\n                                                    </CCol>\r\n                                                    <CCol className=\"col-sm-12\">\r\n                                                        <CCollapse show={collapseMulti[4]}>\r\n                                                            <TransactionAccount OnSave={handleSaveParty} partyType={TransactionsPartyTypes.ACCOUNT_NOT_CLIENT} transRef={transRef} name=\"TransactionAccount-NC\" label=\"Transaction Account\"></TransactionAccount>\r\n                                                        </CCollapse>\r\n                                                    </CCol>\r\n                                                    <CCol className=\"col-sm-12\">\r\n                                                        <CCollapse show={collapseMulti[5]}>\r\n                                                            <TransactionEntity OnSave={handleSaveParty} partyType={TransactionsPartyTypes.ENTITY_NOT_CLIENT} transRef={transRef} name=\"TransactionEntity-NC\" label=\"Transaction Entity\"></TransactionEntity>\r\n                                                        </CCollapse>\r\n                                                    </CCol>\r\n                                                </CRow>\r\n                                            </CCardBody>\r\n                                        </CCard>\r\n                                    </CFade>\r\n                                </CTabPane>\r\n                            </CTabContent>\r\n                        </CTabs>\r\n                    </CCol>\r\n                </div>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nexport default TransactionParty;","import CIcon from '@coreui/icons-react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup,\r\n    CRow\r\n} from '@coreui/react';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RetrieveTransactionFromReport } from '../../../redux/goaml-utils/goaml-utils';\r\nimport { SetReportType } from '../../../redux/report-type/report-type.actions';\r\nimport { selectReportType } from '../../../redux/report-type/report-type.selectors';\r\nimport FormActions from '../../form-inputs/form-actions.component';\r\nimport TransactionInfo from '../transaction-info/transaction-info.components';\r\nimport TransactionItem from '../transaction-item/transaction-item.components';\r\nimport TransactionParty from '../transaction-party/transaction-party.component';\r\nimport TransactionsPartyTypes from '../transaction-party/transaction-party.types';\r\n\r\n\r\nconst TransactionTemplate = ({ name, reportType, setReportType, ...otherProps }) => {\r\n\r\n    let [collapsed, setCollapsed] = React.useState(false)\r\n    let [showElements, setShowElements] = React.useState(true)\r\n    let [transitState, setTransitState] = React.useState({\r\n        transRef: null,\r\n        fromMyClientParty: { \"Item\": null, \"Info\": null },\r\n        fromNotMyClientParty: { \"Item\": null, \"Info\": null },\r\n        toMyClientParty: { \"Item\": null, \"Info\": null },\r\n        toNotMyClientParty: { \"Item\": null, \"Info\": null }\r\n    })\r\n\r\n    const handleTransInfoSaveClick = (reportTxns, transaction) => {\r\n        setTransitState({ ...transitState, transRef: transaction.internal_ref_number })\r\n        setReportType({ ...reportType, transaction: reportTxns });\r\n    }\r\n\r\n    const handleSaveFromParty = (txnRef, partyType, txnParty) => {\r\n        if (transitState.transRef == null) {\r\n            alert(\"Please save Transaction Overview First\");\r\n            return;\r\n        }\r\n        let filteredParties = [];\r\n        const reportTxn = RetrieveTransactionFromReport(reportType, txnRef);\r\n        switch (partyType) {\r\n            case TransactionsPartyTypes.MY_CLIENT:\r\n                setTransitState({ ...transitState, fromMyClientParty: { ...transitState.fromMyClientParty, Info: txnParty } })\r\n                filteredParties = reportTxn.Items.filter(item => !item.hasOwnProperty(\"t_from_my_client\"));\r\n                filteredParties.push({ \"t_from_my_client\": { ...txnParty.partyInfo, ...transitState.fromMyClientParty.Item } });\r\n                reportTxn.Items = filteredParties;\r\n                break;\r\n            case TransactionsPartyTypes.NOT_MY_CLIENT:\r\n                setTransitState({ ...transitState, fromNotMyClientParty: { ...transitState.fromNotMyClientParty, Info: txnParty } })\r\n                filteredParties = reportTxn.Items.filter(item => !item.hasOwnProperty(\"t_from\"));\r\n                filteredParties.push({ \"t_from\": { ...txnParty.partyInfo, ...transitState.fromNotMyClientParty.Item } });\r\n                reportTxn.Items = filteredParties;\r\n                break;\r\n            case TransactionsPartyTypes.PERSON_CLIENT:\r\n                if (transitState.fromMyClientParty.Info == null) {\r\n                    alert(\"Please save From Party Overview First\");\r\n                    return;\r\n                }\r\n                if (transitState.fromMyClientParty.Info.hasOwnProperty(\"partyType\")) {\r\n                    if (transitState.fromMyClientParty.Info.partyType == \"Person\") {\r\n                        const fromPerson = { \"from_person\": txnParty };\r\n                        setTransitState({ ...transitState, fromMyClientParty: { ...transitState.fromMyClientParty, Item: fromPerson } })\r\n                        filteredParties = reportTxn.Items.filter(item => !item.hasOwnProperty(\"t_from_my_client\"));\r\n                        filteredParties.push({ \"t_from_my_client\": { ...transitState.fromMyClientParty.Info.partyInfo, ...fromPerson } });\r\n                        reportTxn.Items = filteredParties;\r\n                    }\r\n                }\r\n                else {\r\n                    alert(\"Please save From Party Overview First\");\r\n                    break;\r\n                }\r\n                break;\r\n            case TransactionsPartyTypes.ENTITY_CLIENT:\r\n                if (transitState.fromMyClientParty.Info == null) {\r\n                    alert(\"Please save From Party Overview First\");\r\n                    return;\r\n                }\r\n                if (transitState.fromMyClientParty.Info.hasOwnProperty(\"partyType\")) {\r\n                    if (transitState.fromMyClientParty.Info.partyType == \"Entity\") {\r\n                        const fromEntity = { \"from_entity\": txnParty };\r\n                        setTransitState({ ...transitState, fromMyClientParty: { ...transitState.fromMyClientParty, Item: fromEntity } })\r\n                        filteredParties = reportTxn.Items.filter(item => !item.hasOwnProperty(\"t_from_my_client\"));\r\n                        filteredParties.push({ \"t_from_my_client\": { ...transitState.fromMyClientParty.Info.partyInfo, ...fromEntity } });\r\n                        reportTxn.Items = filteredParties;\r\n                    }\r\n                }\r\n                else {\r\n                    alert(\"Please save From Party Overview First\");\r\n                    break;\r\n                }\r\n                break;\r\n            case TransactionsPartyTypes.PERSON_NOT_CLIENT:\r\n                if (transitState.fromMyClientParty.Info == null) {\r\n                    alert(\"Please save From Party Overview First\");\r\n                    return;\r\n                }\r\n                if (transitState.fromNotMyClientParty.Info.hasOwnProperty(\"partyType\")) {\r\n                    if (transitState.fromNotMyClientParty.Info.partyType == \"Person\") {\r\n                        const fromPerson = { \"from_person\": txnParty };\r\n                        setTransitState({ ...transitState, fromNotMyClientParty: { ...transitState.fromNotMyClientParty, Item: fromPerson } })\r\n                        filteredParties = reportTxn.Items.filter(item => !item.hasOwnProperty(\"t_from\"));\r\n                        filteredParties.push({ \"t_from\": { ...transitState.fromNotMyClientParty.Info.partyInfo, ...fromPerson } });\r\n                        reportTxn.Items = filteredParties;\r\n                    }\r\n                }\r\n                else {\r\n                    alert(\"Please save From Party Overview First\");\r\n                    break;\r\n                }\r\n                break;\r\n            case TransactionsPartyTypes.ENTITY_NOT_CLIENT:\r\n                if (transitState.fromMyClientParty.Info == null) {\r\n                    alert(\"Please save From Party Overview First\");\r\n                    return;\r\n                }\r\n                if (transitState.fromNotMyClientParty.Info.hasOwnProperty(\"partyType\")) {\r\n                    if (transitState.fromNotMyClientParty.Info.partyType == \"Entity\") {\r\n                        const from_entity = { \"from_entity\": txnParty };\r\n                        setTransitState({ ...transitState, fromNotMyClientParty: { ...transitState.fromNotMyClientParty, Item: from_entity } })\r\n                        filteredParties = reportTxn.Items.filter(item => !item.hasOwnProperty(\"t_from\"));\r\n                        filteredParties.push({ \"t_from\": { ...transitState.fromNotMyClientParty.Info.partyInfo, ...from_entity } });\r\n                        reportTxn.Items = filteredParties;\r\n                    }\r\n                }\r\n                else {\r\n                    alert(\"Please save From Party Overview First\");\r\n                    break;\r\n                }\r\n                break;\r\n            case TransactionsPartyTypes.ACCOUNT_CLIENT:\r\n\r\n                break;\r\n            case TransactionsPartyTypes.ACCOUNT_NOT_CLIENT:\r\n\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        let reportTxns = reportType.Items.map(reportTransaction =>\r\n            reportTransaction.internal_ref_number === txnRef\r\n                ? reportTxn\r\n                : reportTransaction)\r\n        setReportType({ ...reportType, transaction: reportTxns });\r\n    }\r\n\r\n    const handleSaveToParty = (txnRef, partyType, txnParty) => {\r\n        if (transitState.transRef == null) {\r\n            alert(\"Please save Transaction Overview First\");\r\n            return;\r\n        }\r\n        let filteredParties = [];\r\n        const reportTxn = RetrieveTransactionFromReport(reportType, txnRef);\r\n        switch (partyType) {\r\n            case TransactionsPartyTypes.MY_CLIENT:\r\n                setTransitState({ ...transitState, toMyClientParty: { ...transitState.toMyClientParty, Info: txnParty } })\r\n                filteredParties = reportTxn.Items.filter(item => !item.hasOwnProperty(\"t_to_my_client\"));\r\n                filteredParties.push({ \"t_to_my_client\": { ...txnParty.partyInfo, ...transitState.toMyClientParty.Item } });\r\n                reportTxn.Items = filteredParties;\r\n                break;\r\n            case TransactionsPartyTypes.NOT_MY_CLIENT:\r\n                setTransitState({ ...transitState, toNotMyClientParty: { ...transitState.toNotMyClientParty, Info: txnParty } })\r\n                filteredParties = reportTxn.Items.filter(item => !item.hasOwnProperty(\"t_to\"));\r\n                filteredParties.push({ \"t_to\": { ...txnParty.partyInfo, ...transitState.toNotMyClientParty.Item } });\r\n                reportTxn.Items = filteredParties;\r\n                break;\r\n\r\n            case TransactionsPartyTypes.PERSON_CLIENT:\r\n                if (transitState.toMyClientParty.Info == null) {\r\n                    alert(\"Please save To Party Overview First\");\r\n                    return;\r\n                }\r\n                if (transitState.toMyClientParty.Info.hasOwnProperty(\"partyType\")) {\r\n                    if (transitState.toMyClientParty.Info.partyType == \"Person\") {\r\n                        const toPerson = { \"to_person\": txnParty };\r\n                        setTransitState({ ...transitState, toMyClientParty: { ...transitState.toMyClientParty, Item: toPerson } })\r\n                        filteredParties = reportTxn.Items.filter(item => !item.hasOwnProperty(\"t_to_my_client\"));\r\n                        filteredParties.push({ \"t_to_my_client\": { ...transitState.toMyClientParty.Info.partyInfo, ...toPerson } });\r\n                        reportTxn.Items = filteredParties;\r\n                    }\r\n                }\r\n                else {\r\n                    alert(\"Please save To Party Overview First\");\r\n                    break;\r\n                }\r\n                break;\r\n            case TransactionsPartyTypes.ENTITY_CLIENT:\r\n                if (transitState.toMyClientParty.Info == null) {\r\n                    alert(\"Please save To Party Overview First\");\r\n                    return;\r\n                }\r\n                if (transitState.toMyClientParty.Info.hasOwnProperty(\"partyType\")) {\r\n                    if (transitState.toMyClientParty.Info.partyType == \"Entity\") {\r\n                        const toEntity = { \"to_entity\": txnParty };\r\n                        setTransitState({ ...transitState, toMyClientParty: { ...transitState.toMyClientParty, Item: toEntity } })\r\n                        filteredParties = reportTxn.Items.filter(item => !item.hasOwnProperty(\"t_to_my_client\"));\r\n                        filteredParties.push({ \"t_to_my_client\": { ...transitState.toMyClientParty.Info.partyInfo, ...toEntity } });\r\n                        reportTxn.Items = filteredParties;\r\n                    }\r\n                }\r\n                else {\r\n                    alert(\"Please save To Party Overview First\");\r\n                    break;\r\n                }\r\n                break;\r\n            case TransactionsPartyTypes.PERSON_NOT_CLIENT:\r\n                if (transitState.toNotMyClientParty.Info == null) {\r\n                    alert(\"Please save To Party Overview First\");\r\n                    return;\r\n                }\r\n                if (transitState.toNotMyClientParty.Info.hasOwnProperty(\"partyType\")) {\r\n                    if (transitState.toNotMyClientParty.Info.partyType == \"Person\") {\r\n                        const toPerson = { \"to_person\": txnParty };\r\n                        setTransitState({ ...transitState, toNotMyClientParty: { ...transitState.toNotMyClientParty, Item: toPerson } })\r\n                        filteredParties = reportTxn.Items.filter(item => !item.hasOwnProperty(\"t_to\"));\r\n                        filteredParties.push({ \"t_to\": { ...transitState.toNotMyClientParty.Info.partyInfo, ...toPerson } });\r\n                        reportTxn.Items = filteredParties;\r\n                    }\r\n                }\r\n                else {\r\n                    alert(\"Please save To Party Overview First\");\r\n                    break;\r\n                }\r\n                break;\r\n            case TransactionsPartyTypes.ENTITY_NOT_CLIENT:\r\n                if (transitState.toNotMyClientParty.Info == null) {\r\n                    alert(\"Please save To Party Overview First\");\r\n                    return;\r\n                }\r\n                if (transitState.toNotMyClientParty.Info.hasOwnProperty(\"partyType\")) {\r\n                    if (transitState.toNotMyClientParty.Info.partyType == \"Entity\") {\r\n                        const toEntity = { \"to_entity\": txnParty };\r\n                        setTransitState({ ...transitState, toNotMyClientParty: { ...transitState.toNotMyClientParty, Item: toEntity } })\r\n                        filteredParties = reportTxn.Items.filter(item => !item.hasOwnProperty(\"t_to\"));\r\n                        filteredParties.push({ \"t_to\": { ...transitState.toNotMyClientParty.Info.partyInfo, ...toEntity } });\r\n                        reportTxn.Items = filteredParties;\r\n                    }\r\n                }\r\n                else {\r\n                    alert(\"Please save To Party Overview First\");\r\n                    break;\r\n                }\r\n                break;\r\n            case TransactionsPartyTypes.ACCOUNT_CLIENT:\r\n\r\n                break;\r\n            case TransactionsPartyTypes.ACCOUNT_NOT_CLIENT:\r\n\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        let reportTxns = reportType.Items.map(reportTransaction =>\r\n            reportTransaction.internal_ref_number === txnRef\r\n                ? reportTxn\r\n                : reportTransaction)\r\n        setReportType({ ...reportType, transaction: reportTxns });\r\n    }\r\n\r\n    const handleTransItemSaveClick = (reportTxns, transaction) => {\r\n        if (transitState.transRef == null) {\r\n            alert(\"Please save From Transaction Overview First\");\r\n            return;\r\n        }\r\n    }\r\n\r\n    const handleSaveClick = () => {\r\n        if (transitState.transRef == null) {\r\n            alert(\"Please save From Transaction Overview First\");\r\n            return;\r\n        }\r\n    }\r\n\r\n    const handleCancelClick = () => {\r\n        console.log(\"Hello: \", reportType);\r\n    }\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                    <CCard>\r\n                        <CCardHeader>\r\n                            {name}\r\n                            <div className=\"card-header-actions\">\r\n                                <CButton\r\n                                    color=\"link\"\r\n                                    className=\"card-header-action btn-minimize\"\r\n                                    onClick={() => setCollapsed(!collapsed)}\r\n                                >\r\n                                    <CIcon name={collapsed ? 'cil-chevron-bottom' : 'cil-chevron-top'} />\r\n                                </CButton>\r\n                            </div>\r\n                        </CCardHeader>\r\n                        <CCollapse show={collapsed} timeout={1000}>\r\n                            <CCardBody>\r\n                                <CForm className=\"form-horizontal\">\r\n                                    <CFormGroup row>\r\n                                        <CCol xs=\"12\">\r\n                                            <TransactionInfo handleSaveInfoClick={handleTransInfoSaveClick} transRef={transitState.transRef} label=\"Transaction Overview\" name=\"TransactionOverview\" />\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <TransactionParty handleSaveParty={handleSaveFromParty} transRef={transitState.transRef} label=\"From Party\" name=\"FromParty\" displayPartyType={TransactionsPartyTypes.FROM} />\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <TransactionParty handleSaveParty={handleSaveToParty} transRef={transitState.transRef} label=\"To Party\" name=\"ToParty\" displayPartyType={TransactionsPartyTypes.TO} />\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <TransactionItem handleSaveItem={handleTransItemSaveClick} transRef={transitState.transRef} label=\"Transaction Item\" name=\"goods_services\"></TransactionItem>\r\n                                        </CCol>\r\n                                    </CFormGroup>\r\n                                    <FormActions saveText=\"Submit Transaction\" handleSaveClick={handleSaveClick} handleCancelClick={handleCancelClick}></FormActions>\r\n                                </CForm>\r\n                            </CCardBody>\r\n                        </CCollapse>\r\n                    </CCard>\r\n                </CFade>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    reportType: selectReportType(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setReportType: reportType => dispatch(SetReportType(reportType))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TransactionTemplate);","import React from 'react';\r\nimport TransactionTable from '../../goaml-tables/table-transaction.component'\r\nimport TransactionTemplate from '../template-transaction/template-transaction.component'\r\nimport {\r\n    CLabel,\r\n    CCard,\r\n    CCardBody,\r\n    CCol,\r\n    CFade,\r\n    CRow,\r\n    CNav,\r\n    CNavItem,\r\n    CNavLink,\r\n    CTabContent,\r\n    CTabPane,\r\n    CTabs,\r\n  } from '@coreui/react'\r\n\r\nconst ReportTransactions = ({ name, label, ...otherProps }) => {\r\n    \r\n    let [showElements, setShowElements] = React.useState(true)\r\n    const tab1Title = `Add ${name}`;\r\n    const tab2Title = `${name} Table`;\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                {label ? (\r\n                    <CLabel htmlFor={name}>{label}</CLabel>\r\n                ) : null}\r\n                <div className=\"row\">\r\n                    <CCol xs=\"12\">\r\n                        <CTabs activeTab=\"Tab1\">\r\n                            <CNav variant=\"tabs\">\r\n                                <CNavItem>\r\n                                <CNavLink data-tab=\"Tab1\">\r\n                                    {tab1Title}\r\n                                </CNavLink>\r\n                                </CNavItem>\r\n                                <CNavItem>\r\n                                <CNavLink data-tab=\"Tab2\">\r\n                                    {tab2Title}\r\n                                </CNavLink>\r\n                                </CNavItem>\r\n                            </CNav>\r\n                            <CTabContent>\r\n                                <CTabPane data-tab=\"Tab1\">\r\n                                    <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                                        <CCard>\r\n                                            <CCardBody>\r\n                                            <CRow>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <TransactionTemplate name=\"Add a Transaction\"></TransactionTemplate>\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                            </CCardBody>\r\n                                        </CCard>\r\n                                    </CFade>\r\n                                </CTabPane>\r\n                                <CTabPane data-tab=\"Tab2\">\r\n                                    <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                                        <CCard>\r\n                                            <CCardBody>\r\n                                            <CRow>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <TransactionTable name={name} />\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                            </CCardBody>\r\n                                        </CCard>\r\n                                    </CFade>\r\n                                </CTabPane>\r\n                            </CTabContent>\r\n                        </CTabs>\r\n                    </CCol>\r\n                </div>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nexport default ReportTransactions;","var endScopeObj = {};\r\nvar optionsObj = {\r\n    rootName: 'name of the root', // defaults to 'root'\r\n    declaration: 'auto' || '<a custom declaration>', // defaults to undefined\r\n    indentation: 'number', // defaults to 0\r\n    doctype: 'auto', // defaults to undefined\r\n    attributes: false || true // defaults to true\r\n}\r\n\r\nexport const obj2xml = function OBJtoXML(obj) {\r\n    var xml = '';\r\n    for (var prop in obj) {\r\n        xml += obj[prop] instanceof Array ? '' : \"<\" + prop + \">\";\r\n        if (obj[prop] instanceof Array) {\r\n            for (var array in obj[prop]) {\r\n                xml += \"<\" + prop + \">\";\r\n                xml += OBJtoXML(new Object(obj[prop][array]));\r\n                xml += \"</\" + prop + \">\";\r\n            }\r\n        } else if (typeof obj[prop] == \"object\") {\r\n            xml += OBJtoXML(new Object(obj[prop]));\r\n        } else {\r\n            xml += obj[prop];\r\n        }\r\n        xml += obj[prop] instanceof Array ? '' : \"</\" + prop + \">\";\r\n    }\r\n    var xml = xml.replace(/<\\/?[0-9]{1,}>/g, '');\r\n    return xml\r\n}\r\n\r\nexport const obj2xml_inverse = function (obj, opt) {\r\n    if (!opt) opt = {\r\n        rootName: 'report',\r\n        attributes: false\r\n    };\r\n    var rootName = opt.rootName || 'root';\r\n    var declaration = opt.declaration === 'auto' ? '<?xml version=\"1.0\" encoding=\"utf-8\"?>' : opt.declaration;\r\n    var indentation = opt.indentation || 0;\r\n    var generateDtd = (opt.doctype === 'auto' || opt.doctype === 'generate') && declaration;\r\n    var useAttributes = opt.attributes === false ? false : true;\r\n    var scope_indent = 0;\r\n    if (generateDtd) {\r\n        var dtdAttr = {};\r\n        var dtdElem = {};\r\n    }\r\n    var ret = [];\r\n    var tagContent, isArr, curs, _t, _ti, key, innerKey, name, queue = [obj, rootName];\r\n    while (queue.length > 0) {\r\n        name = queue.pop();\r\n        curs = queue.pop();\r\n        if (generateDtd)\r\n            dtdElem[name] = dtdElem[name] || {};\r\n        if (curs === endScopeObj) {\r\n            scope_indent--;\r\n            if (indentation > 0) ret.push('\\n', ' '.repeat(indentation * scope_indent));\r\n            ret.push('</', name, '>');\r\n            continue;\r\n        }\r\n        if (typeof curs === 'object') {\r\n            queue.push(endScopeObj);\r\n            queue.push(name);\r\n            tagContent = [name];\r\n            isArr = Array.isArray(curs);\r\n            if (isArr && generateDtd) {\r\n                dtdElem[name][name + 'Item*'] = true;\r\n            }\r\n            for (key in curs) {\r\n                if (curs.hasOwnProperty(key)) {\r\n                    if (isArr) {\r\n                        queue.push(curs[key]);\r\n                        queue.push(name + 'Item');\r\n                    } else if (typeof curs[key] == 'object' || useAttributes === false) {\r\n                        queue.push(curs[key]);\r\n                        queue.push(key);\r\n                        if (generateDtd)\r\n                            dtdElem[name][key] = true;\r\n                    } else {\r\n                        if (generateDtd) {\r\n                            dtdAttr[name] = dtdAttr[name] || {};\r\n                            dtdAttr[name][key] = true;\r\n                        }\r\n                        tagContent.push(key + '=' + '\"' + curs[key] + '\"');\r\n                    }\r\n                }\r\n            }\r\n            if (indentation > 0) ret.push('\\n', ' '.repeat(indentation * scope_indent));\r\n            ret.push('<', tagContent.join(' '), '>');\r\n            scope_indent++;\r\n        } else {\r\n            if (generateDtd)\r\n                dtdElem[name]['#PCDATA'] = true;\r\n            if (indentation > 0) ret.push('\\n', ' '.repeat(indentation * scope_indent));\r\n            ret.push('<');\r\n            ret.push(name);\r\n            ret.push('>');\r\n            ret.push(curs);\r\n            ret.push('</');\r\n            ret.push(name);\r\n            ret.push('>');\r\n        }\r\n    }\r\n    if (generateDtd) {\r\n        var dtd = ['<!DOCTYPE ', rootName, ' ['];\r\n        for (key in dtdAttr) {\r\n            if (dtdAttr.hasOwnProperty(key)) {\r\n                for (innerKey in dtdAttr[key]) {\r\n                    if (dtdAttr[key].hasOwnProperty(innerKey)) {\r\n                        if (indentation > 0) dtd.push('\\n');\r\n                        dtd.push('<!ATTLIST ', key, ' ', innerKey, ' CDATA #IMPLIED>');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (key in dtdElem) {\r\n            if (dtdElem.hasOwnProperty(key)) {\r\n                innerKey = null;\r\n                _t = ['<!ELEMENT ', key, ' ('];\r\n                _ti = [];\r\n                for (innerKey in dtdElem[key]) {\r\n                    if (dtdElem[key].hasOwnProperty(innerKey)) {\r\n                        _ti.push(innerKey);\r\n                    }\r\n                }\r\n                if (indentation > 0) dtd.push('\\n');\r\n                if (innerKey === null) // no children\r\n                    dtd.push('<!ELEMENT ', key, ' EMPTY>');\r\n                else {\r\n                    _t.push(_ti.join(', '));\r\n                    _t.push(')>');\r\n                    dtd.push.apply(dtd, _t);\r\n                }\r\n            }\r\n        }\r\n        dtd.push(']>');\r\n        ret.unshift.apply(ret, dtd);\r\n    } else if (declaration)\r\n        ret.unshift(opt.doctype ? opt.doctype : '<!DOCTYPE ' + rootName + '>');\r\n    if (declaration) ret.unshift(declaration);\r\n    return ret.join('');\r\n};\r\n","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { selectReportType } from '../../redux/report-type/report-type.selectors';\r\nimport FormActions from '../form-inputs/form-actions.component';\r\nimport { obj2xml } from './converter-json-xml'\r\nimport {downloadObjectAsXml, downloadXmlAsFile } from './report-downloader'\r\n\r\nimport {\r\n    CCard,\r\n    CCardBody,\r\n    CRow,\r\n    CCol\r\n} from '@coreui/react';\r\n\r\nconst ReportGenerator = ({ name, label, reportType }) => {\r\n\r\n    const generateXMLReport = () => {\r\n        const report = \"<report>\" + obj2xml(reportType) + \"</report>\"; \r\n        downloadObjectAsXml(report, \"report\");\r\n    }\r\n\r\n    const handleCancelClick = () => {\r\n        console.log(\"Hello: \", reportType);\r\n    }\r\n\r\n    return (\r\n        <CCard>\r\n            <CCardBody>\r\n                <CRow>\r\n                    <CCol className=\"col-sm-12\">\r\n                        <FormActions saveText=\"Generate XML Report\" handleSaveClick={generateXMLReport} handleCancelClick={handleCancelClick}></FormActions>\r\n                    </CCol>\r\n                </CRow>\r\n            </CCardBody>\r\n        </CCard>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    reportType: selectReportType(state)\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(ReportGenerator)","export const downloadObjectAsXml = (exportObj, exportName) => {\r\n    //This will not work without limits, though. You can only download about 1MB of data. \r\n    //For example, var storageObj = []; for (var i=0; i<1000000; ++i) storageObj.push('aaa'); \r\n    //gives \"download Failed - Network error\" in Chrome 61\r\n    \r\n    var dataStr = \"data:text/plain;charset=utf-8,\" + encodeURIComponent(exportObj);\r\n    var downloadAnchorNode = document.createElement('a');\r\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\r\n    downloadAnchorNode.setAttribute(\"download\", exportName + \".xml\");\r\n    document.body.appendChild(downloadAnchorNode); // required for firefox\r\n    downloadAnchorNode.click();\r\n    downloadAnchorNode.remove();\r\n}\r\n\r\nexport const downloadXmlAsFile = (xmltext, filename) => {\r\n    // This doesn't work in mac firefox and opens the tab with content instead of downloading in mac safari\r\n    var pom = document.createElement('a');\r\n\r\n    var filename = `${filename}.xml`;\r\n    var pom = document.createElement('a');\r\n    var bb = new Blob([xmltext], { type: 'text/plain' });\r\n\r\n    pom.setAttribute('href', window.URL.createObjectURL(bb));\r\n    pom.setAttribute('download', filename);\r\n\r\n    pom.dataset.downloadurl = ['text/plain', pom.download, pom.href].join(':');\r\n    pom.draggable = true;\r\n    pom.classList.add('dragout');\r\n\r\n    pom.click();\r\n}","import React from 'react';\r\nimport ReportType from '../../components/goaml-sections/report-type/report-type.component'\r\nimport ReportPerson from '../../components/goaml-sections/report-person/report-person.component'\r\nimport ReportLocation from '../../components/goaml-sections/report-location/report-location.component'\r\nimport ReportIndicator from '../../components/goaml-sections/report-indicator/report-indicator.component'\r\nimport ReportTransactions from '../../components/goaml-sections/report-transactions/report-transactions.component'\r\nimport ReportGenerator from '../../components/goaml-core/report-generator.component'\r\n\r\nconst GoAmlPage = () => (\r\n    <div>\r\n        <ReportType name=\"Report Type\"></ReportType>\r\n        <ReportPerson></ReportPerson>\r\n        <ReportLocation></ReportLocation>\r\n        <ReportIndicator name=\"Report Indicator\"></ReportIndicator>\r\n        <ReportTransactions name=\"Transaction\" label=\"Report Transaction\"></ReportTransactions>\r\n        <ReportGenerator name=\"Report Generator\" label=\"Generate GoAML Report\"></ReportGenerator>\r\n    </div>\r\n)\r\n\r\nexport default GoAmlPage;"],"sourceRoot":""}