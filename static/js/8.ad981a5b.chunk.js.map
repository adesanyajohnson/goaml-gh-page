{"version":3,"sources":["views/users/UsersData.js","components/goaml-core/types.js","components/goaml-enums/currencies-enum/currencies-enum.component.jsx","components/form-inputs/form-react-select.component.jsx","components/goaml-enums/report-code-enum/report-code-enum.component.jsx","redux/goaml-utils/goaml-utils.js","redux/report/report.actions.js","redux/report/report.selectors.js","components/goaml-sections/report-type/report-type.component.jsx","components/goaml-sections/report-person/report-person.component.jsx","components/goaml-sections/report-location/report-location.component.jsx","components/goaml-sections/report-indicator/report-indicator.component.jsx","components/goaml-tables/table-transaction.component.jsx","components/form-inputs/form-amount.component.jsx","components/form-inputs/form-radio-text.component.jsx","components/goaml-enums/client-type-enum/client-type-enum.component.jsx","components/goaml-enums/conduction-type-enum/conduction-type-enum.component.jsx","redux/transaction/transaction.format.js","components/goaml-sections/transaction-info/transaction-info.components.jsx","redux/transaction-item/transaction-item.format.js","components/goaml-enums/transaction-item-status-enum/transaction-item-status-enum.component.jsx","components/goaml-enums/transaction-item-type-enum/transaction-item-type-enum.component.jsx","components/goaml-sections/transaction-item/transaction-item.components.jsx","redux/transaction-party/from-my-client.format.js","components/goaml-enums/funds-type-enum/funds-type-enum.component.jsx","components/goaml-enums/party-type-enum/party-type-enum.components.jsx","components/goaml-tables/table-person.component.jsx","redux/transaction-person/transaction-person.format.js","components/form-inputs/form-email.component.jsx","components/goaml-sections/template-person/template-person.component.jsx","components/goaml-sections/wrapper-person/wrapper-person.component.jsx","redux/transaction-account/transaction-account.format.js","components/goaml-enums/account-type-enum/account-type-enum.component.jsx","redux/transaction-entity/transaction-entity.format.js","components/goaml-enums/entity-legal-form-enum/entity-legal-form-enum.component.jsx","components/goaml-tables/table-director.component.jsx","components/goaml-enums/entity-person-role-enum/entity-person-role-enum.component.jsx","components/goaml-sections/template-director/template-director.components.jsx","components/goaml-sections/wrapper-director/wrapper-director.component.jsx","components/goaml-sections/transaction-entity/transaction-entity.components.jsx","components/goaml-tables/table-signatory.component.jsx","redux/transaction-signatory/transaction-signatory.format.js","components/goaml-enums/account-person-role-enum/account-person-role-enum.component.jsx","components/goaml-sections/template-signatory/template-signatory.components.jsx","components/goaml-sections/wrapper-signatory/wrapper-signatory.component.jsx","components/goaml-sections/transaction-account/transaction-account.components.jsx","components/goaml-sections/transaction-party/transaction-party.types.js","redux/transaction-party/from.format.js","components/goaml-sections/transaction-party/t-from.component.jsx","components/goaml-sections/transaction-party/t-from-my-client.component.jsx","redux/transaction-party/to.format.js","components/goaml-sections/transaction-party/t-to.component.jsx","components/goaml-sections/transaction-party/t-to-my-client.component.jsx","components/goaml-sections/transaction-party/transaction-party.component.jsx","components/goaml-sections/template-transaction/template-transaction.component.jsx","components/goaml-sections/wrapper-transactions/wrapper-transactions.component.jsx","components/goaml-core/converter-json-xml.js","components/goaml-core/report-generator.component.jsx","components/goaml-core/report-downloader.js","components/goaml-core/MakeColumns.js","components/goaml-excel-reader/goaml-excel-upload.components.jsx","components/goaml-excel-reader/goaml-excel-reader.components.jsx","pages/goaml-page/goaml-page.component.jsx"],"names":["usersData","id","name","registered","role","status","map","x","join","CurrenciesEnum","props","state","options","value","description","this","label","handleChange","React","Component","FormReactSelect","animatedComponents","makeAnimated","htmlFor","length","className","onChange","closeMenuOnSelect","components","defaultValue","isMulti","ReportCodeEnum","reportIndicators","RetrieveTransactionFromReport","fullReport","internal_ref_number","transaction","find","reportTransaction","setReport","item","type","ReportTypes","SET_REPORT","payload","selectReport","createSelector","goamlReport","report","selectAllTransactions","connect","console","log","dispatch","error","useState","collapsed","setCollapsed","showElements","reportState","setComponentState","touched","setTouched","onFocus","onBlur","isEmpty","setShowError","checkInputs","e","inputState","val","myValidation","Object","entries","key","target","event","xs","timeout","in","unmountOnExit","color","onClick","show","row","placeholder","onKeyUp","entity_id","rentity_id","rentity_branch","entity_reference","fiu_ref_number","report_code","currency_code_local","submission_date","action","reason","saveText","handleSaveClick","alert","handleCancelClick","fields","ReportPerson","Id","FirstName","LastName","IdNumber","Passport","closed","tableData","ReportLocation","Address","City","State","Postal","Country","report_indicators","TransactionTable","transactionData","FormAmount","otherProps","FormRadioText","checked","width","items","disabled","ClientTypeEnum","ConductionTypeEnum","TransactionFormat","transRef","handleSaveInfoClick","setCheck","showError","detail","transactionFormat","txn_from","txn_to","setTransactionState","method","transactionnumber","transmode_comment","amount_local","transmode_code","date_transaction","date_posting","value_date","teller","authorized","transaction_location","late_deposit","transaction_description","class","existingTxn","reportTxns","push","transactionGoodAndService","TransactionModeMasterEnum","TransactionItemTypeEnum","reportType","setReportType","checkData","item_type","previous_register_to","presently_register_to","status_code","size","registration_number","item_make","disposed_value","size_UOM","identification_number","comments","estimate_value","currency_code","registration_date","status_commets","t_from_my_client","FundsTypeEnum","PersonTable","itemArray","deleteItem","t_person","FormEmail","PersonTemplate","alias","OnSave","partyType","templatePerson","first_name","title","last_name","mothers_name","nationality1","passport_number","source_of_wealth","middle_name","gender","birthdate","residence","nationality2","occupation","employer_name","prefix","birth_place","email","ssn","tax_number","tax_reg_number","handlePhoneSave","phone","phones","handlePhoneDelete","phoneIndex","splice","handleAddressSave","address","addresses","handleAddressDelete","addressIndex","handleIdentificationSave","identification","handleIdentificationDelete","identificationIndex","date_deceased","WrapperPersons","onDelete","isDeletable","tab1Title","tab2Title","activeTab","variant","data-tab","t_account","AccountTypeEnum","t_entity","EntityLegalFormEnum","DirectorTable","EntityPersonRoleEnum","DirectorTemplate","entityDirectorInfo","setEntityDirectorInfo","txnRef","person","director","WrapperDirectors","TransactionEntity","templateEntity","business","incorporation_state","url","commercial_name","incorporation_number","incorporation_country_code","incorporation_legal_form","incorporation_date","business_closed","director_id","directorIndex","directors","SignatoryTable","transactionSignatory","AccountPersonRoleEnum","SignatoryTemplate","componentState","onChecked","is_primary","WrapperSignatories","TransactionAccount","stateAccount","setStateAccount","account","iban","non_banking_institution","opened","account_name","institution_name","swift","balance","closedt","personal_account_type","branch","date_balance","client_number","beneficiary","beneficiary_comment","transaction_entity","signatory","TransactionsPartyTypes","FROM","TO","MY_CLIENT","PERSON_CLIENT","ACCOUNT_CLIENT","ENTITY_CLIENT","NOT_MY_CLIENT","PERSON_NOT_CLIENT","ACCOUNT_NOT_CLIENT","ENTITY_NOT_CLIENT","t_from","clientType","handleSavePartyInfo","collapseMulti","setCollapseMulti","transpartyInfo","setTranspartyInfo","toggleMulti","newCollapse","slice","from_foreign_currency","from_funds_code","from_funds_comment","from_country","foreign_currency_code","foreign_exchange_rate","foreign_amount","t_conductor","conductor","from_person","from_account","from_entity","entity","t_to","to_foreign_currency","to_funds_code","to_funds_comment","to_country","foreign_currency","to_person","to_account","to_entity","t_to_my_client","addTFrom","T_FROM","addTTo","T_TO","addTFromMyClient","T_FROM_MY_CLIENT","addTToMyClient","T_TO_MY_CLIENT","from","to","displayPartyType","transparty","addReportTransaction","ADD_REPORT_TRANSACTION","transitState","setTransitState","WrapperTransactions","obj2xml","OBJtoXML","obj","xml","prop","Array","array","replace","exportObj","exportName","dataStr","encodeURIComponent","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","remove","downloadObjectAsXml","make_cols","refstr","o","C","XLSX","utils","decode_range","c","i","encode_col","GoAmlExcelUpload","accept","handleFile","fileName","custom","GoamlExcelFileReader","files","setState","file","reader","FileReader","rABS","readAsBinaryString","onload","bstr","result","wb","read","bookVBA","wsname","SheetNames","ws","Sheets","data","sheet_to_json","cols","JSON","stringify","readAsArrayBuffer","GoAmlPage"],"mappings":"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","file":"static/js/8.ad981a5b.chunk.js","sourcesContent":["const usersData = [\r\n  {id: 0, name: 'John Doe', registered: '2018/01/01', role: 'Guest', status: 'Pending'},\r\n  {id: 1, name: 'Samppa Nori', registered: '2018/01/01', role: 'Member', status: 'Active'},\r\n  {id: 2, name: 'Estavan Lykos', registered: '2018/02/01', role: 'Staff', status: 'Banned'},\r\n  {id: 3, name: 'Chetan Mohamed', registered: '2018/02/01', role: 'Admin', status: 'Inactive'},\r\n  {id: 4, name: 'Derick Maximinus', registered: '2018/03/01', role: 'Member', status: 'Pending'},\r\n  {id: 5, name: 'Friderik Dávid', registered: '2018/01/21', role: 'Staff', status: 'Active'},\r\n  {id: 6, name: 'Yiorgos Avraamu', registered: '2018/01/01', role: 'Member', status: 'Active'},\r\n  {id: 7, name: 'Avram Tarasios', registered: '2018/02/01', role: 'Staff', status: 'Banned'},\r\n  {id: 8, name: 'Quintin Ed', registered: '2018/02/01', role: 'Admin', status: 'Inactive'},\r\n  {id: 9, name: 'Enéas Kwadwo', registered: '2018/03/01', role: 'Member', status: 'Pending'},\r\n  {id: 10, name: 'Agapetus Tadeáš', registered: '2018/01/21', role: 'Staff', status: 'Active'},\r\n  {id: 11, name: 'Carwyn Fachtna', registered: '2018/01/01', role: 'Member', status: 'Active'},\r\n  {id: 12, name: 'Nehemiah Tatius', registered: '2018/02/01', role: 'Staff', status: 'Banned'},\r\n  {id: 13, name: 'Ebbe Gemariah', registered: '2018/02/01', role: 'Admin', status: 'Inactive'},\r\n  {id: 14, name: 'Eustorgios Amulius', registered: '2018/03/01', role: 'Member', status: 'Pending'},\r\n  {id: 15, name: 'Leopold Gáspár', registered: '2018/01/21', role: 'Staff', status: 'Active'},\r\n  {id: 16, name: 'Pompeius René', registered: '2018/01/01', role: 'Member', status: 'Active'},\r\n  {id: 17, name: 'Paĉjo Jadon', registered: '2018/02/01', role: 'Staff', status: 'Banned'},\r\n  {id: 18, name: 'Micheal Mercurius', registered: '2018/02/01', role: 'Admin', status: 'Inactive'},\r\n  {id: 19, name: 'Ganesha Dubhghall', registered: '2018/03/01', role: 'Member', status: 'Pending'},\r\n  {id: 20, name: 'Hiroto Šimun', registered: '2018/01/21', role: 'Staff', status: 'Active'},\r\n  {id: 21, name: 'Vishnu Serghei', registered: '2018/01/01', role: 'Member', status: 'Active'},\r\n  {id: 22, name: 'Zbyněk Phoibos', registered: '2018/02/01', role: 'Staff', status: 'Banned'},\r\n  {id: 23, name: 'Aulus Agmundr', registered: '2018/01/01', role: 'Member', status: 'Pending'},\r\n  {id: 42, name: 'Ford Prefect', registered: '2001/05/25', role: 'Alien', status: 'Don\\'t panic!'}\r\n]\r\n\r\nexport default usersData\r\n","const SheetJSFT = [\r\n\t\"xlsx\", \"xlsb\", \"xlsm\", \"xls\", \"xml\", \"csv\", \"txt\", \"ods\", \"fods\", \"uos\", \"sylk\", \"dif\", \"dbf\", \"prn\", \"qpw\", \"123\", \"wb*\", \"wq*\", \"html\", \"htm\"\r\n].map(function(x) { return \".\" + x; }).join(\",\");","import React from 'react';\r\nimport FormDynamicSelect from '../../form-inputs/form-dynamic-select.component'\r\n\r\nclass CurrenciesEnum extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            options : [\r\n                {value: 'ADP', description:'Andorran Peseta (no longer in use)'},\r\n                {value: 'AED', description:'United Arab Emirates Dirham'},\r\n                {value: 'AFA', description:'Afghani'},\r\n                {value: 'ALL', description:'Leek'},\r\n                {value: 'AMD', description:'Dram'},\r\n                {value: 'ANG', description:'Netherlands Antilles Guilder'},\r\n                {value: 'AOK', description:'Kwanza'},\r\n                {value: 'AON', description:'New Kwanza'},\r\n                {value: 'ARA', description:'Austral'},\r\n                {value: 'ARP', description:'Argentinean Peso'},\r\n                {value: 'ARS', description:'Argentinean Nuevo Peso'},\r\n                {value: 'ATS', description:'Schilling (no longer in use)'},\r\n                {value: 'AUD', description:'Australian Dollar'},\r\n                {value: 'AWG', description:'Aruban Guilder'},\r\n                {value: 'AZM', description:'Azerbaijani Manat'},\r\n                {value: 'BAM', description:'Convertible Mark'},\r\n                {value: 'BBD', description:'Barbados Dollar'},\r\n                {value: 'BDT', description:'Taka'},\r\n                {value: 'BEC', description:'Convertible Belgian Franc (no longer in use)'},\r\n                {value: 'BEF', description:'Belgian Franc (also known as Frank - no longer in use)'},\r\n                {value: 'BEL', description:'Financial Belgian Franc (no longer in use)'},\r\n                {value: 'BGL', description:'Lev'},\r\n                {value: 'BHD', description:'Bahraini Dinar'},\r\n                {value: 'BIF', description:'Burundi Franc'},\r\n                {value: 'BMD', description:'Bermudian Dollar'},\r\n                {value: 'BND', description:'Brunei Dollar'},\r\n                {value: 'BOB', description:'Boliviano'},\r\n                {value: 'BOP', description:'Bolivian Peso'},\r\n                {value: 'BRC', description:'Cruzeiro'},\r\n                {value: 'BRL', description:'Real'},\r\n                {value: 'BRR', description:'Cruzeiro Real'},\r\n                {value: 'BSD', description:'Bahamian Dollar'},\r\n                {value: 'BTN', description:'Ngultrum'},\r\n                {value: 'BUK', description:'Replaced by MMK'},\r\n                {value: 'BWP', description:'Pula'},\r\n                {value: 'BYR', description:'Belarussian Rouble'},\r\n                {value: 'BZD', description:'Belize Dollar'},\r\n                {value: 'CAD', description:'Canadian Dollar'},\r\n                {value: 'CDF', description:'Congolese Franc'},\r\n                {value: 'CDZ', description:'New Zaïre'},\r\n                {value: 'CHF', description:'Swiss Franc'},\r\n                {value: 'CLF', description:'Unidades de Fomento'},\r\n                {value: 'CLP', description:'Chilean Peso'},\r\n                {value: 'CNY', description:'Yuan Renminbi'},\r\n                {value: 'COP', description:'Colombian Peso'},\r\n                {value: 'CRC', description:'Costa Rican Colón'},\r\n                {value: 'CSK', description:'Koruna of former Czechoslovakia. Now replaced by CZK (Czech Koruna) and '},\r\n                {value: 'SKK', description:'Slovak Koruna)'},\r\n                {value: 'CUP', description:'Cuban Peso'},\r\n                {value: 'CVE', description:'Escudo Caboverdiano'},\r\n                {value: 'CYP', description:'Cypriot Pound'},\r\n                {value: 'CZK', description:'Czech Koruna'},\r\n                {value: 'DDM', description:'Former East German Mark, DEM subsequently in use'},\r\n                {value: 'DEM', description:'Deutsche Mark (no longer in use)'},\r\n                {value: 'DJF', description:'Djibouti Franc'},\r\n                {value: 'DKK', description:'Danish Krone'},\r\n                {value: 'DOP', description:'Dominican Republic Peso'},\r\n                {value: 'DZD', description:'Algerian Dinar'},\r\n                {value: 'ECS', description:'Sucre (no longer in use)'},\r\n                {value: 'EEK', description:'Kroon'},\r\n                {value: 'EGP', description:'Egyptian Pound'},\r\n                {value: 'ERN', description:'Eritrean Nakfa'},\r\n                {value: 'ESA', description:'Spanish Peseta, Account A (no longer in use)'},\r\n                {value: 'ESB', description:'Spanish Peseta, Account B (no longer in use)'},\r\n                {value: 'ESP', description:'Spanish Peseta (no longer in use)'},\r\n                {value: 'ETB', description:'Ethiopian Birr'},\r\n                {value: 'EUR', description:'Euro '},\r\n                {value: 'FIM', description:'Markka (no longer in use)'},\r\n                {value: 'FJD', description:'Fiji Dollar'},\r\n                {value: 'FKP', description:'Falkland Pound'},\r\n                {value: 'FRF', description:'French Franc (no longer in use)'},\r\n                {value: 'GBP', description:'Pound Sterling (United Kingdom Pound)'},\r\n                {value: 'GEL', description:'Lari'},\r\n                {value: 'GHC', description:'Cedi'},\r\n                {value: 'GIP', description:'Gibraltar Pound'},\r\n                {value: 'GMD', description:'Dalasi'},\r\n                {value: 'GNS', description:'Syli (also known as Guinea Franc)'},\r\n                {value: 'GQE', description:'Ekwele'},\r\n                {value: 'GRD', description:'Greek Drachma (no longer in use)'},\r\n                {value: 'GTQ', description:'Quetzal'},\r\n                {value: 'GWP', description:'Guinea-Bissau Peso'},\r\n                {value: 'GYD', description:'Guyana Dollar'},\r\n                {value: 'HKD', description:'Hong Kong Dollar'},\r\n                {value: 'HNL', description:'Lempira'},\r\n                {value: 'HRD', description:'Croatian Dinar'},\r\n                {value: 'HRK', description:'Croatian Kuna'},\r\n                {value: 'HTG', description:'Gourde'},\r\n                {value: 'HUF', description:'Forint'},\r\n                {value: 'IDR', description:'Rupiah'},\r\n                {value: 'IEP', description:'Punt (no longer in use)'},\r\n                {value: 'ILS', description:'Shekel'},\r\n                {value: 'INR', description:'Indian Rupee'},\r\n                {value: 'IQD', description:'Iraqi Dinar'},\r\n                {value: 'IRR', description:'Iranian Rial'},\r\n                {value: 'ISK', description:'Icelandic Króna'},\r\n                {value: 'ITL', description:'Italian Lira (no longer in use)'},\r\n                {value: 'JMD', description:'Jamaican Dollar'},\r\n                {value: 'JOD', description:'Jordanian Dinar'},\r\n                {value: 'JPY', description:'Yen'},\r\n                {value: 'KES', description:'Kenyan Shilling'},\r\n                {value: 'KGS', description:'Kyrgyzstani Som'},\r\n                {value: 'KHR', description:'Riel'},\r\n                {value: 'KMF', description:'Comorian Franc'},\r\n                {value: 'KPW', description:'Democratic Peoples Republic of Korean Won'},\r\n                {value: 'KRW', description:'Republic of Korean Won'},\r\n                {value: 'KWD', description:'Kuwaiti Dinar'},\r\n                {value: 'KYD', description:'Cayman Islands Dollar'},\r\n                {value: 'KZT', description:'Tenge'},\r\n                {value: 'LAK', description:'Kip'},\r\n                {value: 'LBP', description:'Lebanese Pound'},\r\n                {value: 'LKR', description:'Sri Lankan Rupee'},\r\n                {value: 'LRD', description:'Liberian Dollar'},\r\n                {value: 'LSL', description:'Loti'},\r\n                {value: 'LSM', description:'Maloti'},\r\n                {value: 'LTL', description:'Litas'},\r\n                {value: 'LUF', description:'Luxembourg Franc (no longer in use)'},\r\n                {value: 'LVL', description:'Lats'},\r\n                {value: 'LYD', description:'Libyan Dinar'},\r\n                {value: 'MAD', description:'Moroccan Dirham'},\r\n                {value: 'MDL', description:'Moldavian Leu'},\r\n                {value: 'MGF', description:'Malagasy Franc'},\r\n                {value: 'MKD', description:'Macedonian Dinar'},\r\n                {value: 'MLF', description:'Malian Franc'},\r\n                {value: 'MMK', description:'Kyat'},\r\n                {value: 'MNT', description:'Tugrik'},\r\n                {value: 'MOP', description:'Pataca'},\r\n                {value: 'MRO', description:'Ouguiya'},\r\n                {value: 'MTL', description:'Maltese Lira'},\r\n                {value: 'MTP', description:'Maltese Pound, replaced by Maltese Lira'},\r\n                {value: 'MUR', description:'Mauritius Rupee'},\r\n                {value: 'MVR', description:'Rufiyaa'},\r\n                {value: 'MWK', description:'Malawian Kwacha'},\r\n                {value: 'MXN', description:'Mexican New Peso (replacement for Mexican Peso)'},\r\n                {value: 'MXP', description:'Mexican Peso, replaced by Mexican New Peso'},\r\n                {value: 'MYR', description:'Ringgit (also known as Malaysian Dollar)'},\r\n                {value: 'MZM', description:'Metical'},\r\n                {value: 'NAD', description:'Namibian Dollar'},\r\n                {value: 'NGN', description:'Naira'},\r\n                {value: 'NIC', description:'Córdoba'},\r\n                {value: 'NLG', description:'Dutch Guilder (no longer in use)'},\r\n                {value: 'NOK', description:'Norwegian Krone'},\r\n                {value: 'NPR', description:'Nepalese Rupee'},\r\n                {value: 'NZD', description:'New Zealand Dollar'},\r\n                {value: 'OMR', description:'Omani Rial'},\r\n                {value: 'PAB', description:'Balboa'},\r\n                {value: 'PEI', description:'Inti'},\r\n                {value: 'PEN', description:'New Sol'},\r\n                {value: 'PES', description:'Sol (replaced by New Sol [PEN])'},\r\n                {value: 'PGK', description:'Kina'},\r\n                {value: 'PHP', description:'Philippines Peso'},\r\n                {value: 'PKR', description:'Pakistani Rupee'},\r\n                {value: 'PLN', description:'New Zloty'},\r\n                {value: 'PLZ', description:'Zloty (replaced by New Zloty [PLN])'},\r\n                {value: 'PTE', description:'Portuguese Escudo (no longer in use)'},\r\n                {value: 'PYG', description:'Guarani'},\r\n                {value: 'QAR', description:'Qatari Riyal'},\r\n                {value: 'ROL', description:'Romanian Leu'},\r\n                {value: 'RSD', description:'Serbian Dinar'},\r\n                {value: 'RUB', description:' Russian Federation Rouble (formerly RUR)'},\r\n                {value: 'RWF', description:'Rwandan Franc'},\r\n                {value: 'SAR', description:'Saudi Riyal'},\r\n                {value: 'SBD', description:'Solomon Islands Dollar'},\r\n                {value: 'SCR', description:'Seychelles Rupee'},\r\n                {value: 'SDD', description:'Sudanese Dinar'},\r\n                {value: 'SDP', description:'Sudanese Pound'},\r\n                {value: 'SEK', description:'Swedish Krona'},\r\n                {value: 'SGD', description:'Singapore Dollar'},\r\n                {value: 'SHP', description:'St Helena Pound'},\r\n                {value: 'SIT', description:'Tolar'},\r\n                {value: 'SKK', description:'Slovak Koruna'},\r\n                {value: 'SLL', description:'Leone'},\r\n                {value: 'SOS', description:'Somali Shilling'},\r\n                {value: 'SRG', description:'Surinam Guilder'},\r\n                {value: 'STD', description:'Dobra'},\r\n                {value: 'SUR', description:'Union of Soviet Socialist Republics Rouble'},\r\n                {value: 'SVC', description:'El Salvadorian Colón'},\r\n                {value: 'SYP', description:'Syrian Pound'},\r\n                {value: 'SZL', description:'Lilangeni'},\r\n                {value: 'THB', description:'Baht'},\r\n                {value: 'TJR', description:'Tajik Rouble'},\r\n                {value: 'TMM', description:'Turkmenistani Manat'},\r\n                {value: 'TND', description:'Tunisian Dinar'},\r\n                {value: 'TOP', description:'Paanga'},\r\n                {value: 'TPE', description:'Timorian Escudo'},\r\n                {value: 'TRL', description:'Turkish Lira'},\r\n                {value: 'TTD', description:'Trinidad and Tobago Dollar'},\r\n                {value: 'TWD', description:'Taiwan Dollar'},\r\n                {value: 'TZS', description:'Tanzanian Shilling'},\r\n                {value: 'UAH', description:'Hryvna'},\r\n                {value: 'UAK', description:'Karbovanet'},\r\n                {value: 'UGS', description:'Ugandan Shilling'},\r\n                {value: 'UKP', description:'Incorrectly used for GBP'},\r\n                {value: 'USD', description:'United States Dollar'},\r\n                {value: 'USN', description:'United States Dollar (Next day)'},\r\n                {value: 'USS', description:'United States Dollar (Same day)'},\r\n                {value: 'UYP', description:'Uruguayan Peso, replaced by Uruguayan New Peso (UYU)'},\r\n                {value: 'UYU', description:'Uruguayan New Peso'},\r\n                {value: 'UZS', description:'Uzbekistani Som'},\r\n                {value: 'VEB', description:'Bolivar'},\r\n                {value: 'VND', description:'Viet Nam Dông'},\r\n                {value: 'VUV', description:'Vatu'},\r\n                {value: 'WST', description:'Tala'},\r\n                {value: 'XAF', description:'Franc de la Communauté financière africaine'},\r\n                {value: 'XAU', description:'Gold'},\r\n                {value: 'XBA', description:'European Composite Unit'},\r\n                {value: 'XBB', description:'European Monetary Unit'},\r\n                {value: 'XBC', description:'European Unit of Account 9'},\r\n                {value: 'XBD', description:'European Unit of Account 17'},\r\n                {value: 'XCD', description:'East Caribbean Dollar'},\r\n                {value: 'XDR', description:'International Monetary Fund Special Drawing Rights'},\r\n                {value: 'XEU', description:'ECU (not an official currency, replaced by the Euro)'},\r\n                {value: 'XOF', description:'West African Franc'},\r\n                {value: 'XPF', description:'Franc des Comptoirs français du Pacifique'},\r\n                {value: 'YDD', description:'South Yemeni Dinar'},\r\n                {value: 'YER', description:'Yemeni Riyal'},\r\n                {value: 'YUD', description:'Yugoslavian New Dinar (no longer in use)'},\r\n                {value: 'ZAL', description:'Rand (financial)'},\r\n                {value: 'ZAR', description:'Rand'},\r\n                {value: 'ZMK', description:'Zambian Kwacha'},\r\n                {value: 'ZRZ', description:'Replaced by CDZ'},\r\n                {value: 'ZWD', description:'Zimbabwe Dollar'}\r\n            ]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { options } = this.state;\r\n        const { name, label, handleChange } = this.props;\r\n        \r\n        return(\r\n            <FormDynamicSelect label={label} name={name} options={options} handleChange={handleChange} />\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default CurrenciesEnum;","import {\r\n    CFormGroup,\r\n    CLabel\r\n} from '@coreui/react';\r\nimport React from 'react';\r\nimport Select from 'react-select';\r\nimport makeAnimated from 'react-select/animated';\r\n\r\n\r\nclass FormReactSelect extends React.Component {\r\n    constructor() {\r\n      super();\r\n    }\r\n    \r\n    render() {\r\n        const { options, label, name, handleChange } = this.props;\r\n        const animatedComponents = makeAnimated();\r\n  \r\n        return (\r\n          <CFormGroup>\r\n              {label ? (\r\n                  <CLabel htmlFor={name}>{label}</CLabel>\r\n                  ) : null}\r\n              {options && options.length > 0 && (\r\n                  <div className=\"col-xs-12\">\r\n                      <Select\r\n                          name={name} \r\n                          id={name} \r\n                          onChange={handleChange}\r\n                          closeMenuOnSelect={false}\r\n                          components={animatedComponents}\r\n                          defaultValue={name}\r\n                          isMulti\r\n                          options={options}\r\n                      />\r\n                  </div>\r\n              )}\r\n          </CFormGroup>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FormReactSelect;\r\n","import React from 'react';\r\nimport FormReactSelect from '../../form-inputs/form-react-select.component';\r\n\r\nclass ReportCodeEnum extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            reportIndicators : [\r\n                {value: 'CTR', label:'Cash Transaction Report'},\r\n                {value: 'STR', label:'Suspicious Transaction Report'},\r\n                {value: 'EFT', label:'Electronic Funds Transfer'},\r\n                {value: 'IFT', label:'International Funds Transfer'},\r\n                {value: 'TFR', label:'Terror Financing Report'},\r\n                {value: 'BCR', label:'Border Cash Report'},\r\n                {value: 'UTR', label:'Unusual Transaction Report'},\r\n                {value: 'AIF', label:'Additional Information File'},\r\n                {value: 'IRI', label:'Incoming Request for Information – International'},\r\n                {value: 'ORI', label:'Outgoing Request for Information – International'},\r\n                {value: 'IRD', label:'Incoming Request for Information – Domestic'},\r\n                {value: 'ORD', label:'Outgoing Request for Information – Domestic'}\r\n            ]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { reportIndicators } = this.state;\r\n        const { name, label, handleChange } = this.props;\r\n        \r\n        return(\r\n            <FormReactSelect label={label} name={name} handleChange={handleChange} options={reportIndicators} />\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default ReportCodeEnum;","import ReportPersonTypes from '../transaction-person/report-person.types';\r\n\r\n\r\nexport const RetrieveTransactionFromReport = (fullReport, internal_ref_number) => {\r\n    const existingTxn = fullReport.transaction.find(\r\n        reportTransaction => reportTransaction.internal_ref_number === internal_ref_number\r\n    );\r\n\r\n    return existingTxn;\r\n}\r\n\r\nexport const RetrieveFromReportTFrom = (fullReport, internal_ref_number) => {\r\n    const existingTxn = fullReport.transaction.find(\r\n        reportTransaction => reportTransaction.internal_ref_number === internal_ref_number\r\n    );\r\n\r\n    if(!existingTxn)\r\n        return null;\r\n        \r\n    return existingTxn.t_from;\r\n}\r\n\r\nexport const RetrieveFromReportTFromMyClient = (fullReport, internal_ref_number) => {\r\n    const existingTxn = fullReport.transaction.find(\r\n        reportTransaction => reportTransaction.internal_ref_number === internal_ref_number\r\n    );\r\n\r\n    if(!existingTxn)\r\n        return null;\r\n\r\n    return existingTxn.t_from_my_client;\r\n}\r\n\r\nexport const RetrieveFromReportTTo = (fullReport, internal_ref_number) => {\r\n    const existingTxn = fullReport.transaction.find(\r\n        reportTransaction => reportTransaction.internal_ref_number === internal_ref_number\r\n    );\r\n\r\n    if(!existingTxn)\r\n        return null;\r\n\r\n    return existingTxn.t_to;\r\n}\r\n\r\nexport const RetrieveFromReportTToMyClient = (fullReport, internal_ref_number) => {\r\n    const existingTxn = fullReport.transaction.find(\r\n        reportTransaction => reportTransaction.internal_ref_number === internal_ref_number\r\n    );\r\n\r\n    if(!existingTxn)\r\n        return null;\r\n        \r\n    return existingTxn.t_to_my_client;\r\n}\r\n\r\nexport const RetrieveGoodsFromReport = (fullReport, internal_ref_number) => {\r\n    const existingTxn = fullReport.transaction.find(\r\n        reportTransaction => reportTransaction.internal_ref_number === internal_ref_number\r\n    );\r\n\r\n    if(!existingTxn)\r\n        return null;\r\n\r\n    return existingTxn.goods_services;\r\n}\r\n\r\nexport const RetrieveInvolvedPartiesFromReport = (fullReport, internal_ref_number) => {\r\n    const existingTxn = fullReport.transaction.find(\r\n        reportTransaction => reportTransaction.internal_ref_number === internal_ref_number\r\n    );\r\n\r\n    if(!existingTxn)\r\n        return null;\r\n\r\n    return existingTxn.involved_parties;\r\n}\r\n","import ReportTypes from './report.types';\r\nimport { RetrieveTransactionFromReport } from '../goaml-utils/goaml-utils';\r\n\r\nexport const setReport = item => ({\r\n    type: ReportTypes.SET_REPORT,\r\n    payload: item\r\n});\r\n\r\nexport const addTransactionToReport = item => {\r\n    return ({\r\n        type: ReportTypes.ADD_REPORT_TRANSACTION,\r\n        payload: item\r\n    })\r\n};\r\n\r\nexport const addTFrom = (report, internal_ref_number, item) => {\r\n    const existingTxn = RetrieveTransactionFromReport(report, internal_ref_number);\r\n    if (existingTxn) {\r\n        existingTxn.t_from = item;\r\n        let reportTxns = report.transaction.map(reportTransaction =>\r\n            reportTransaction.internal_ref_number === internal_ref_number\r\n                ? existingTxn\r\n                : reportTransaction\r\n        );\r\n        return ({\r\n            type: ReportTypes.T_FROM,\r\n            payload: reportTxns\r\n        })\r\n    };\r\n};\r\n\r\nexport const addTFromMyClient = (report, internal_ref_number, item) => {\r\n    const existingTxn = RetrieveTransactionFromReport(report, internal_ref_number);\r\n    if (existingTxn) {\r\n        existingTxn.t_from_my_client = item;\r\n        let reportTxns = report.transaction.map(reportTransaction =>\r\n            reportTransaction.internal_ref_number === internal_ref_number\r\n                ? existingTxn\r\n                : reportTransaction\r\n        );\r\n        return ({\r\n            type: ReportTypes.T_FROM_MY_CLIENT,\r\n            payload: reportTxns\r\n        })\r\n    };\r\n};\r\n\r\nexport const addTTo = (report, internal_ref_number, item) => {\r\n    const existingTxn = RetrieveTransactionFromReport(report, internal_ref_number);\r\n    if (existingTxn) {\r\n        existingTxn.t_to = item;\r\n        let reportTxns = report.transaction.map(reportTransaction =>\r\n            reportTransaction.internal_ref_number === internal_ref_number\r\n                ? existingTxn\r\n                : reportTransaction\r\n        );\r\n        return ({\r\n            type: ReportTypes.T_TO,\r\n            payload: reportTxns\r\n        })\r\n    };\r\n};\r\n\r\nexport const addTToMyClient = (report, internal_ref_number, item) => {\r\n    const existingTxn = RetrieveTransactionFromReport(report, internal_ref_number);\r\n    if (existingTxn) {\r\n        existingTxn.t_to_my_client = item;\r\n        let reportTxns = report.transaction.map(reportTransaction =>\r\n            reportTransaction.internal_ref_number === internal_ref_number\r\n                ? existingTxn\r\n                : reportTransaction\r\n        );\r\n        return ({\r\n            type: ReportTypes.T_TO_MY_CLIENT,\r\n            payload: reportTxns\r\n        })\r\n    };\r\n};\r\n\r\nexport const addInvolvedParties = (report, internal_ref_number, item) => {\r\n    const existingTxn = RetrieveTransactionFromReport(report, internal_ref_number);\r\n    if (existingTxn) {\r\n        existingTxn.involved_parties = item;\r\n        let reportTxns = report.transaction.map(reportTransaction =>\r\n            reportTransaction.internal_ref_number === internal_ref_number\r\n                ? existingTxn\r\n                : reportTransaction\r\n        );\r\n        return ({\r\n            type: ReportTypes.INVOLVED_PARTIES,\r\n            payload: reportTxns\r\n        })\r\n    };\r\n};\r\n\r\nexport const addGoodsAndServices = item => ({\r\n    type: ReportTypes.GOODS_SERVICES,\r\n    payload: item\r\n});\r\n\r\n/* export const addInvolvedParties = () => ({\r\n    type: ReportTypes.INVOLVED_PARTIES\r\n});\r\n\r\nexport const addTFrom = item => ({\r\n    type: ReportTypes.T_FROM,\r\n    payload: item\r\n});\r\n\r\nexport const addTFromMyClient = item => ({\r\n    type: ReportTypes.T_FROM_MY_CLIENT,\r\n    payload: item\r\n});\r\n\r\nexport const addTTo = item => ({\r\n    type: ReportTypes.T_TO,\r\n    payload: item\r\n});\r\n\r\nexport const addTToMyClient = () => ({\r\n    type: ReportTypes.T_TO_MY_CLIENT\r\n}); */\r\n","import { createSelector } from 'reselect';\r\n\r\nconst GoAmlReport = state => state.goamlReport;\r\n\r\nexport const selectReport = createSelector(\r\n    [GoAmlReport],\r\n    goamlReport => goamlReport.report\r\n);\r\n\r\nexport const selectAllTransactions = createSelector(\r\n    [selectReport],\r\n    report => report.transaction\r\n);\r\n\r\nexport const selectSingleTransaction = createSelector(\r\n    [selectAllTransactions],\r\n    (transaction, props) => {\r\n        console.log(\"transaction: \", transaction);\r\n        console.log(\"props: \", props) \r\n    }\r\n    //transaction.map(x => x.internal_ref_number == props.transRef)\r\n);\r\n\r\nexport const makeGetSingleTransaction = () => {\r\n    return createSelector(\r\n        [selectAllTransactions],\r\n        (transaction, props) => {\r\n            return transaction.map(x => x.internal_ref_number == props.transRef)\r\n        }\r\n    )\r\n}","import CIcon from '@coreui/icons-react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup,\r\n    CRow\r\n} from '@coreui/react';\r\nimport React from 'react';\r\nimport CurrenciesEnum from 'src/components/goaml-enums/currencies-enum/currencies-enum.component';\r\nimport FormActions from '../../form-inputs/form-actions.component';\r\nimport FormDate from '../../form-inputs/form-date.component';\r\nimport FormInput from '../../form-inputs/form-input.component';\r\nimport FormTextArea from '../../form-inputs/form-textarea-component';\r\nimport ReportCodeEnum from '../../goaml-enums/report-code-enum/report-code-enum.component';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { setReport } from '../../../redux/report/report.actions';\r\nimport { selectReport } from '../../../redux/report/report.selectors';\r\n\r\nconst ReportType = ({ name, error, report, setReport }) => {\r\n\r\n    const [collapsed, setCollapsed] = React.useState(true)\r\n    const [showElements] = React.useState(true)\r\n    const [reportState, setComponentState] = React.useState({\r\n        \"rentity_id\": 0,\r\n        \"rentity_branch\": \"\",\r\n        \"submission_code\": \"\",\r\n        \"report_code\": 0,\r\n        \"entity_reference\": null,\r\n        \"fiu_ref_number\": null,\r\n        \"submission_date\": \"0001-01-01T00:00:00\",\r\n        \"currency_code_local\": 0,\r\n        \"reporting_person\": null,\r\n        \"location\": null,\r\n        \"reason\": \"\",\r\n        \"action\": \"\",\r\n        \"transaction\": [],\r\n        \"activity\": null,\r\n        \"report_indicators\": []\r\n    })\r\n\r\n    const [touched, setTouched] = React.useState(false);\r\n    const onFocus = () => setTouched(true)\r\n    const onBlur = () => setTouched(false)\r\n\r\n    const [showError, setShowError] = React.useState({ isEmpty: false, value: '' });\r\n\r\n    const checkInputs = (e, inputState) => {\r\n        let error = false;\r\n        let val = {};\r\n        let myValidation = reportState;\r\n        if (typeof myValidation === 'string' || 'integer' || 'boolean') {\r\n            for (const [key, value] of Object.entries(inputState)) {\r\n                if (e.target.name === key) {\r\n                    console.log(\"MyValidation: \", myValidation);\r\n                    value === null ? error = true : error = false;\r\n                    val = key;\r\n                }\r\n            }\r\n        }\r\n        setShowError({\r\n            isEmpty: error,\r\n            value: val\r\n        });\r\n    }\r\n\r\n    const handleChange = event => {\r\n        console.log(event.target);\r\n        const { name, value } = event.target;\r\n        setComponentState({ ...reportState, [name]: value });\r\n    };\r\n\r\n    const handleReactSelectTyeChange = event => {\r\n        let type = event.map((item) => {\r\n            return item.value\r\n        })\r\n        setComponentState({ ...reportState, report_code: type });\r\n    };\r\n\r\n    const handleSaveClick = () => {\r\n        if (!reportState.rentity_id || !reportState.rentity_branch || !reportState.entity_reference || !reportState.report_code\r\n            || !reportState.fiu_ref_number || !reportState.submission_date || !reportState.reason || !reportState.action) {\r\n            alert('please complete this field');\r\n        }\r\n\r\n        console.log(\"reportState: \", reportState);\r\n        return setReport({ ...report, ...reportState });\r\n    }\r\n\r\n    const handleCancelClick = () => {\r\n        console.log(\"Hello: \", report);\r\n    }\r\n\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                    <CCard>\r\n                        <CCardHeader>\r\n                            {name}\r\n                            <div className=\"card-header-actions\">\r\n                                <CButton\r\n                                    color=\"link\"\r\n                                    className=\"card-header-action btn-minimize\"\r\n                                    onClick={() => setCollapsed(!collapsed)}\r\n                                >\r\n                                    <CIcon name={collapsed ? 'cil-chevron-bottom' : 'cil-chevron-top'} />\r\n                                </CButton>\r\n                            </div>\r\n                        </CCardHeader>\r\n                        <CCollapse show={collapsed} timeout={1000}>\r\n                            <CCardBody>\r\n                                <CForm className=\"form-horizontal\">\r\n                                    <CFormGroup row>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormInput\r\n                                                label=\"Entity\"\r\n                                                type=\"number\"\r\n                                                name=\"rentity_id\"\r\n                                                placeholder=\"Enter ...\"\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                handleChange={handleChange}\r\n                                                onKeyUp={(e) => checkInputs(e, reportState)}\r\n                                                value={reportState.entity_id}\r\n                                                className={`form-control ${!reportState.rentity_id && touched && 'is-invalid'}${reportState.rentity_id && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormInput\r\n                                                label=\"Reporting Entity Branch\"\r\n                                                name=\"rentity_branch\"\r\n                                                placeholder=\"Enter ...\"\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                handleChange={handleChange}\r\n                                                onKeyUp={(e) => checkInputs(e, reportState)}\r\n                                                value={reportState.rentity_branch}\r\n                                                className={`form-control ${!reportState.rentity_branch && touched && 'is-invalid'} ${reportState.rentity_branch && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormInput\r\n                                                label=\"Reporting Entity Reference\"\r\n                                                name=\"entity_reference\"\r\n                                                placeholder=\"Enter ...\"\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                handleChange={handleChange}\r\n                                                onKeyUp={(e) => checkInputs(e, reportState)}\r\n                                                value={reportState.entity_reference}\r\n                                                className={`form-control ${!reportState.entity_reference && touched && 'is-invalid'} ${reportState.entity_reference && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormInput\r\n                                                label=\"FIU Ref Number\"\r\n                                                name=\"fiu_ref_number\"\r\n                                                placeholder=\"Enter ...\"\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                handleChange={handleChange}\r\n                                                onKeyUp={(e) => checkInputs(e, reportState)}\r\n                                                value={reportState.fiu_ref_number}\r\n                                                className={`form-control ${!reportState.fiu_ref_number && touched && 'is-invalid'} ${reportState.fiu_ref_number && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"8\">\r\n                                            <ReportCodeEnum\r\n                                                label=\"Type*\"\r\n                                                name=\"report_code\"\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                handleChange={handleReactSelectTyeChange}\r\n                                                onKeyUp={(e) => checkInputs(e, reportState)}\r\n                                                value={reportState.report_code}\r\n                                                className={`form-select ${!reportState.report_code && touched && 'is-invalid'} ${reportState.report_code && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                        <CurrenciesEnum\r\n                                                label=\"Currency Code\" \r\n                                                name=\"currency_code_local\" \r\n                                                placeholder=\"Enter ...\"\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus} \r\n                                                handleChange={handleChange}\r\n                                                onKeyUp={(e) => checkInputs(e, reportState)} \r\n                                                value={reportState.currency_code_local}  \r\n                                                className={`form-control ${!reportState.currency_code_local && touched && 'is-invalid'} ${reportState.currency_code_local && 'is-valid'}`}\r\n                                        />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormDate\r\n                                                type=\"date\"\r\n                                                label=\"Submission Date*\"\r\n                                                name=\"submission_date\"\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                handleChange={handleChange}\r\n                                                onKeyUp={(e) => checkInputs(e, reportState)}\r\n                                                value={reportState.submission_date}\r\n                                                className={`form-select ${!reportState.submission_date && touched && 'is-invalid'} ${reportState.submission_date && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormInput\r\n                                                label=\"Action\"\r\n                                                name=\"action\"\r\n                                                placeholder=\"Enter ...\"\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                handleChange={handleChange}\r\n                                                onKeyUp={(e) => checkInputs(e, reportState)}\r\n                                                value={reportState.action}\r\n                                                className={`form-control ${!reportState.action && touched && 'is-invalid'} ${reportState.action && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <FormTextArea\r\n                                                label=\"Reason for Reporting\"\r\n                                                name=\"reason\"\r\n                                                placeholder=\"Enter ...\"\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                handleChange={handleChange}\r\n                                                onKeyUp={(e) => checkInputs(e, reportState)}\r\n                                                value={reportState.reason}\r\n                                                className={`form-select ${!reportState.reason && touched && 'is-invalid'} ${reportState.reason && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                    </CFormGroup>\r\n                                    <FormActions\r\n                                        saveText=\"Save Report Type\"\r\n                                        handleSaveClick={handleSaveClick}\r\n                                        handleCancelClick={handleCancelClick}\r\n                                    >\r\n                                    </FormActions>\r\n                                </CForm>\r\n                            </CCardBody>\r\n                        </CCollapse>\r\n                    </CCard>\r\n                </CFade>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    report: selectReport(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setReport: report => dispatch(setReport(report))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReportType);\r\n","import React from 'react';\r\nimport CombinedTable from '../../goaml-tables/combined-table.component'\r\n\r\nconst fields = ['Id','FirstName', 'LastName', 'Date of Birth', 'IdNumber', 'Passport', 'status']\r\n\r\nclass ReportPerson extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            usersData : [\r\n                {\r\n                Id: 1,\r\n                FirstName: \"John\",\r\n                LastName: \"Doe\",\r\n                \"Date of Birth\": \"18/03/1992\",\r\n                IdNumber: \"A25529928\",\r\n                Passport: \"\",\r\n                status: 'Active'\r\n            }]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { usersData } = this.state;\r\n        const { name } = this.props;\r\n        \r\n        return(\r\n            <CombinedTable name=\"Reporting Person\" closed={\"true\"} fields={fields} tableData={usersData} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default ReportPerson;","import React from 'react';\r\nimport CombinedTable from '../../goaml-tables/combined-table.component'\r\n\r\nconst fields = ['Id','Address', 'City', 'State', 'Postal', 'Country']\r\n\r\nclass ReportLocation extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            usersData : [\r\n            {\r\n                Id: 1,\r\n                Address: \"Building 21\",\r\n                City: \"Victoria Island\",\r\n                State: \"Lagos\",\r\n                Postal: \"01104\",\r\n                Country: \"Nigeria\"\r\n            }]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { usersData } = this.state;\r\n        const { name } = this.props;\r\n        \r\n        return(\r\n            <CombinedTable name=\"Reporting Location\" fields={fields} tableData={usersData} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default ReportLocation;","import React from 'react';\r\nimport ReportCodeEnum from '../../goaml-enums/report-code-enum/report-code-enum.component';\r\nimport FormActions from '../../form-inputs/form-actions.component';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup,\r\n    CRow\r\n  } from '@coreui/react';\r\nimport CIcon from '@coreui/icons-react';\r\nimport { connect } from 'react-redux';\r\nimport { setReport } from '../../../redux/report/report.actions';\r\nimport { selectReport } from '../../../redux/report/report.selectors';\r\n\r\n\r\nconst ReportIndicator = ({ name, report, setReport, ...otherProps }) => {\r\n\r\n    let [collapsed, setCollapsed] = React.useState(true)\r\n    let [showElements, setShowElements] = React.useState(true)\r\n\r\n    const handleReactSelectTyeChange = event => {\r\n        let type = event.map((item) => {\r\n            return item.value\r\n        })\r\n        report.report_indicators = type;\r\n    };\r\n    \r\n    const handleSaveClick = () => {\r\n        setReport(report);\r\n    }\r\n\r\n    const handleCancelClick = () => {\r\n        console.log(\"Hello: \", report);\r\n    }\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                <CCard>\r\n                    <CCardHeader>\r\n                        {name}\r\n                        <div className=\"card-header-actions\">\r\n                            <CButton \r\n                            color=\"link\" \r\n                            className=\"card-header-action btn-minimize\" \r\n                            onClick={() => setCollapsed(!collapsed)}\r\n                            >\r\n                            <CIcon name={collapsed ? 'cil-chevron-bottom':'cil-chevron-top'} />\r\n                            </CButton>\r\n                        </div>\r\n                    </CCardHeader>\r\n                    <CCollapse show={collapsed} timeout={1000}>\r\n                    <CCardBody>\r\n                        <CForm className=\"form-horizontal\">\r\n                            <CFormGroup row>\r\n                                <CCol xs=\"12\">\r\n                                    <ReportCodeEnum name=\"report_indicators\" handleChange={handleReactSelectTyeChange} />\r\n                                </CCol>\r\n                            </CFormGroup>\r\n                            <FormActions handleSaveClick={handleSaveClick} handleCancelClick={handleCancelClick}></FormActions>\r\n                        </CForm>\r\n                    </CCardBody>\r\n                    </CCollapse>\r\n                </CCard>\r\n                </CFade>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    report: selectReport(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setReport: report => dispatch(setReport(report))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReportIndicator);\r\n","import React from 'react';\r\nimport usersData from '../../views/users/UsersData';\r\nimport CombinedTable from './combined-table.component';\r\n\r\nconst fields = ['name','registered', 'role', 'status']\r\n\r\nclass TransactionTable extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            transactionData : usersData\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { transactionData } = this.state;\r\n        // const { name } = this.props;\r\n        \r\n        return(\r\n            <CombinedTable name=\"Transactions Table\" fields={fields} tableData={transactionData} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default TransactionTable;","import React from 'react';\r\nimport {\r\n    CFormGroup,\r\n    CInput,\r\n    CLabel  } from '@coreui/react'\r\n\r\nconst FormAmount = ({ label, name, placeholder, handleChange, ...otherProps }) => (\r\n  <CFormGroup>\r\n    {label ? (\r\n      <CLabel htmlFor={name}>{label}</CLabel>\r\n    ) : null}\r\n      <CInput id={name} name={name} onChange={handleChange} {...otherProps} placeholder={placeholder} />\r\n  </CFormGroup>\r\n);\r\n\r\nexport default FormAmount;\r\n","import {\r\n    CCol, CInput,\r\n\r\n    CLabel\r\n} from '@coreui/react';\r\nimport React from 'react';\r\nimport './form-radio-text.style.css';\r\n\r\nconst FormRadioText = ({ label, name, value, checked, placeholder, width, items, handleChange }) => (\r\n    <div className=\"form-group\">\r\n                {label ? (\r\n                    <CLabel htmlFor={name}>{label}</CLabel>\r\n                ) : null}\r\n                <div className=\"row\">\r\n                    {items ? \r\n                    items.map((item) => {\r\n                        return(\r\n                            <CCol xs={width}>\r\n                                <div className=\"input-group\">\r\n                                    <span className=\"input-group-addon\">\r\n                                        <input type=\"radio\" onChange={handleChange} name={name} checked={checked} />\r\n                                    </span>\r\n                                    <CInput name={name} defaultValue={item} disabled />\r\n                                </div>\r\n                            </CCol>\r\n                        )\r\n                    }) : null}\r\n                </div>\r\n            </div>\r\n  );\r\n\r\nexport default FormRadioText;","import React from 'react';\r\nimport FormDynamicSelect from '../../form-inputs/form-dynamic-select.component'\r\n\r\nclass ClientTypeEnum extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            options: [\r\n                { value: 'ACCOUNT_CLIENT', description: 'My Client (Account)' },\r\n                { value: 'PERSON_CLIENT', description: 'My Client (Person)' },\r\n                { value: 'ENTITY_CLIENT', description: 'My Client (Entity)' },\r\n                { value: 'ACCOUNT_NOT_CLIENT', description: 'Not My Client (Account)' },\r\n                { value: 'PERSON_NOT_CLIENT', description: 'Not My Client (Person)' },\r\n                { value: 'ENTITY_NOT_CLIENT', description: 'Not My Client (Entity)' }\r\n            ]\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { options } = this.state;\r\n        const { name, label, handleChange } = this.props;\r\n\r\n        return (\r\n            <FormDynamicSelect label={label} name={name} options={options} handleChange={handleChange} />\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default ClientTypeEnum;","import React from 'react';\r\nimport FormDynamicSelect from '../../form-inputs/form-dynamic-select.component';\r\n\r\nclass ConductionTypeEnum extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            options : [\r\n                {description:'select'},\r\n                {value: 'A', description:'In-branch/Office'},\r\n                {value: 'B', description:'ATM'},\r\n                {value: 'C', description:'Electronic transaction'},\r\n                {value: 'K', description:'Cash'},\r\n                {value: 'T', description:'Courier'}\r\n            ]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { options } = this.state;\r\n        const { name, label, handleChange } = this.props;\r\n        \r\n        return(\r\n            <FormDynamicSelect label={label} name={name} options={options} handleChange={handleChange} />\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default ConductionTypeEnum;"," var TransactionFormat = {\r\n    \"transactionnumber\": \"\",\r\n    \"internal_ref_number\": \"\",\r\n    \"transaction_location\": \"\",\r\n    \"transaction_description\": \"\",\r\n    \"date_transaction\": \"0001-01-01T00:00:00\",\r\n    \"teller\": \"\",\r\n    \"authorized\": \"\",\r\n    \"late_deposit\": false,\r\n    \"date_posting\": \"0001-01-01T00:00:00\",\r\n    \"value_date\": \"0001-01-01T00:00:00\",\r\n    \"transmode_code\": \"\",\r\n    \"transmode_comment\": \"\",\r\n    \"amount_local\": 0.0,\r\n    \"involved_parties\": null,\r\n    \"t_from_my_client\": null,\r\n    \"t_from\": null,\r\n    \"t_to_my_client\": null,\r\n    \"t_to\": null,\r\n    \"goods_services\": [],\r\n    \"comments\": \"\",\r\n    \"txn_from\": \"\",\r\n    \"txn_to\": \"\"\r\n}\r\n\r\nexport default TransactionFormat;","import CIcon from '@coreui/icons-react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup,\r\n    CRow\r\n} from '@coreui/react';\r\nimport React from 'react';\r\nimport FormActions from '../../form-inputs/form-actions.component';\r\nimport FormAmount from '../../form-inputs/form-amount.component';\r\nimport FormDate from '../../form-inputs/form-date.component';\r\nimport FormInput from '../../form-inputs/form-input.component';\r\nimport FormRadioText from '../../form-inputs/form-radio-text.component';\r\nimport FormTextArea from '../../form-inputs/form-textarea-component';\r\nimport ClientTypeEnum from '../../goaml-enums/client-type-enum/client-type-enum.component';\r\nimport ConductionTypeEnum from '../../goaml-enums/conduction-type-enum/conduction-type-enum.component';\r\nimport transactionFormat from 'src/redux/transaction/transaction.format';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { setReport } from '../../../redux/report/report.actions';\r\nimport { selectReport } from '../../../redux/report/report.selectors';\r\nimport { RetrieveTransactionFromReport } from '../../../redux/goaml-utils/goaml-utils';\r\n\r\nconst TransactionInfo = ({ label, name, transRef, report, reportTransaction, setReport, handleSaveInfoClick, ...otherProps }) => {\r\n\r\n    const [collapsed, setCollapsed] = React.useState(true)\r\n    const [showElements, setShowElements] = React.useState(true)\r\n    let radioItems = [\"Yes\", \"No\"];\r\n    const [check, setCheck] = React.useState(false);\r\n    const onChecked = (e) => {\r\n        const { name, value } = e.target;\r\n        console.log({ name, value })\r\n        setCheck({ [name]: value })\r\n    }\r\n\r\n    const [touched, setTouched] = React.useState(false);\r\n    const onFocus = () => setTouched(true)\r\n    const onBlur = () => setTouched(false)\r\n\r\n    const [showError, setShowError] = React.useState({ isEmpty: false, value: '' });\r\n\r\n    const checkInputs = (e, inputState) => {\r\n        let error = false;\r\n        let val = {};\r\n        let myValidation;\r\n        if (typeof myValidation === 'string' || 'integer' || 'boolean') {\r\n            for (const [key, value] of Object.entries(inputState)) {\r\n                if (e.target.name === key) {\r\n                    value === null ? error = true : error = false;\r\n                    val = key;\r\n                }\r\n            }\r\n        }\r\n        setShowError({\r\n            isEmpty: error,\r\n            value: val\r\n        });\r\n    }\r\n    const [transaction, setTransactionState] = React.useState({\r\n        detail: transactionFormat,\r\n        txn_from: \"\",\r\n        txn_to: \"\"\r\n    })\r\n\r\n    console.log('error', showError)\r\n\r\n    const handleChange = event => {\r\n        const { name, value } = event.target;\r\n        if (name == \"txn_from\" || name == \"txn_to\")\r\n            setTransactionState({ ...transaction, [name]: value });\r\n        else\r\n            setTransactionState({ ...transaction, detail: { ...transaction.detail, [name]: value } });\r\n    };\r\n\r\n    const handleSaveClick = () => {\r\n        if (!transaction.txn_from || !transaction.txn_to) {\r\n            alert('please complete the sender and/or receiver field');\r\n        }\r\n        else if (!transaction.detail.transactionnumber || !transaction.detail.transmode_code || !transaction.detail.internal_ref_number \r\n            || !transaction.detail.date_transaction || !transaction.detail.transaction_description \r\n            || !transaction.detail.transaction_location || !transaction.detail.teller \r\n            || !transaction.detail.authorized || !transaction.detail.date_posting || !transaction.detail.amount_local) {\r\n            alert('please complete this field');\r\n        }\r\n        const existingTxn = RetrieveTransactionFromReport(report, transaction.detail.internal_ref_number);\r\n\r\n        if (existingTxn) {\r\n            console.log(\"transaction: \", transaction);\r\n            console.log(\"existingTxn: \", existingTxn);\r\n            setTransactionState({...transaction, detail: {...transaction.detail, ...existingTxn}});\r\n            let reportTxns = report.transaction.map(reportTransaction =>\r\n                reportTransaction.internal_ref_number === transaction.detail.internal_ref_number\r\n                    ? transaction.detail\r\n                    : reportTransaction\r\n            );\r\n            handleSaveInfoClick(reportTxns, transaction);\r\n        }\r\n        else {\r\n            let reportTxns = report.transaction;\r\n            reportTxns.push(transaction.detail)\r\n            handleSaveInfoClick(reportTxns, transaction);\r\n        }\r\n    }\r\n\r\n    const handleCancelClick = () => {\r\n        console.log(\"Hello: \", report);\r\n    }\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                    <CCard>\r\n                        <CCardHeader>\r\n                            {label}\r\n                            <div className=\"card-header-actions\">\r\n                                <CButton\r\n                                    color=\"link\"\r\n                                    className=\"card-header-action btn-minimize\"\r\n                                    onClick={() => setCollapsed(!collapsed)}\r\n                                >\r\n                                    <CIcon name={collapsed ? 'cil-chevron-bottom' : 'cil-chevron-top'} />\r\n                                </CButton>\r\n                            </div>\r\n                        </CCardHeader>\r\n                        <CCollapse show={collapsed} timeout={1000}>\r\n                            <CCardBody>\r\n                                <CForm method=\"post\" className=\"form-horizontal\">\r\n                                    <CFormGroup row>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormInput\r\n                                                type=\"number\"\r\n                                                label=\"Number*\"\r\n                                                placeholder=\"Enter ...\"\r\n                                                name=\"transactionnumber\"\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, transaction.detail)}\r\n                                                handleChange={handleChange}\r\n                                                value={transaction.detail.transactionnumber}\r\n                                                className={`form-control ${!transaction.detail.transactionnumber && touched && 'is-invalid'} ${transaction.detail.transactionnumber && 'is-valid'}`}\r\n                                            />\r\n                                            <FormInput\r\n                                               label=\"TransMode Comment\" \r\n                                                name=\"transmode_comment\" \r\n                                                placeholder=\"Enter ...\"\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, transaction.detail)}\r\n                                                value={transaction.detail.transmode_comment}\r\n                                                handleChange={handleChange}\r\n                                                className={`form-control ${!transaction.detail.transmode_comment && touched && 'is-invalid'} ${transaction.detail.transmode_comment && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormInput\r\n                                                label=\"Internal Reference Number\"\r\n                                                placeholder=\"Enter ...\"\r\n                                                name=\"internal_ref_number\"\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, transaction.detail)}\r\n                                                value={transaction.detail.internal_ref_number}\r\n                                                handleChange={handleChange}\r\n                                                className={`form-control ${!transaction.detail.internal_ref_number && touched && 'is-invalid'} ${transaction.detail.internal_ref_number && 'is-valid'}`}\r\n                                            />\r\n                                            <FormAmount\r\n                                                label=\"Local Amount*\"\r\n                                                name=\"amount_local\"\r\n                                                placeholder=\"0.00\"\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, transaction.detail)}\r\n                                                value={transaction.detail.amount_local}\r\n                                                handleChange={handleChange}\r\n                                                className={`form-control ${!transaction.detail.amount_local && touched && 'is-invalid'} ${transaction.detail.amount_local && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <ConductionTypeEnum\r\n                                                label=\"TransMode Code*\"\r\n                                                name=\"transmode_code\"\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, transaction.detail)}\r\n                                                handleChange={handleChange}\r\n                                                value={transaction.detail.transmode_code}\r\n                                                className={`form-control ${!transaction.detail.transmode_code && touched && 'is-invalid'} ${transaction.detail.transmode_code && 'is-valid'}`}\r\n                                            />\r\n                                            <FormDate\r\n                                                type=\"date\"\r\n                                                label=\"Trans Date*\"\r\n                                                name=\"date_transaction\"\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, transaction.detail)}\r\n                                                value={transaction.detail.date_transaction}\r\n                                                handleChange={handleChange}\r\n                                                className={`form-control ${!transaction.detail.date_transaction && touched && 'is-invalid'} ${transaction.detail.date_transaction && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormDate\r\n                                                type=\"date\"\r\n                                                label=\"Post Date*\"\r\n                                                name=\"date_posting\"\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, transaction.detail)}\r\n                                                value={transaction.detail.date_posting}\r\n                                                handleChange={handleChange}\r\n                                                className={`form-control ${!transaction.detail.date_posting && touched && 'is-invalid'} ${transaction.detail.date_posting && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormDate \r\n                                                type=\"date\"\r\n                                                label=\"Value Date*\" \r\n                                                name=\"value_date\" \r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, transaction)} \r\n                                                value={transaction.value_date} \r\n                                                handleChange={handleChange} \r\n                                                className={`form-control ${!transaction.value_date && touched && 'is-invalid'} ${transaction.value_date && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormInput \r\n                                                label=\"Teller\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                name=\"teller\" \r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                value={transaction.detail.teller}\r\n                                                onKeyUp={(e) => checkInputs(e, transaction.detail)}\r\n                                                handleChange={handleChange}\r\n                                                className={`form-control ${!transaction.detail.teller && touched && 'is-invalid'} ${transaction.detail.teller && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormInput\r\n                                                label=\"Authorised\"\r\n                                                name=\"authorized\"\r\n                                                placeholder=\"Enter ...\"\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                value={transaction.detail.authorized}\r\n                                                onKeyUp={(e) => checkInputs(e, transaction.detail)}\r\n                                                handleChange={handleChange}\r\n                                                className={`form-control ${!transaction.detail.authorized && touched && 'is-invalid'} ${transaction.detail.authorized && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <CRow>\r\n                                                <CCol xs=\"6\">\r\n                                                    <FormInput\r\n                                                        label=\"Location*\"\r\n                                                        name=\"transaction_location\"\r\n                                                        placeholder=\"Enter ...\"\r\n                                                        onBlur={onBlur}\r\n                                                        onFocus={onFocus}\r\n                                                        onKeyUp={(e) => checkInputs(e, transaction.detail)}\r\n                                                        value={transaction.detail.transaction_location}\r\n                                                        handleChange={handleChange}\r\n                                                        className={`form-control ${!transaction.detail.transaction_location && touched && 'is-invalid'} ${transaction.detail.transaction_location && 'is-valid'}`}\r\n                                                    />\r\n                                                </CCol>\r\n                                                <CCol xs=\"6\">\r\n                                                    <FormRadioText\r\n                                                        label=\"Late Deposit?\"\r\n                                                        name=\"late_deposit\"\r\n                                                        width=\"6\"\r\n                                                        items={[\"Yes\", \"No\"]}\r\n                                                        handleChange={onChecked}\r\n                                                        defaultValue={transaction.late_deposit}\r\n                                                    />\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <CRow>\r\n                                                <CCol xs=\"6\">\r\n                                                    <ClientTypeEnum\r\n                                                        handleChange={handleChange}\r\n                                                        label=\"From Party?*\"\r\n                                                        name=\"txn_from\"\r\n                                                        value={transaction.txn_from}\r\n                                                        onFocus={onFocus}\r\n                                                        onBlur={onBlur}\r\n                                                        onKeyUp={(e) => checkInputs(e, transaction)}\r\n                                                        className={`form-control ${!transaction.txn_from && touched && 'is-invalid'} ${transaction.txn_from && 'is-valid'}`}\r\n                                                    />\r\n                                                </CCol>\r\n                                                <CCol xs=\"6\">\r\n                                                    <ClientTypeEnum\r\n                                                        handleChange={handleChange}\r\n                                                        label=\"To Party?*\"\r\n                                                        name=\"txn_to\"\r\n                                                        value={transaction.txn_to}\r\n                                                        onFocus={onFocus}\r\n                                                        onBlur={onBlur}\r\n                                                        onKeyUp={(e) => checkInputs(e, transaction)}\r\n                                                        className={`form-control ${!transaction.txn_to && touched && 'is-invalid'} ${transaction.txn_to && 'is-valid'}`}\r\n                                                    />\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <FormTextArea\r\n                                                label=\"Description\"\r\n                                                name=\"transaction_description\"\r\n                                                value={transaction.detail.transaction_description}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, transaction.detail)}\r\n                                                handleChange={handleChange}\r\n                                                placeholder=\"Enter ...\"\r\n                                                className={`form-control ${!transaction.detail.transaction_description && touched && 'is-invalid'} ${transaction.detail.transaction_description && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                    </CFormGroup>\r\n                                    <FormActions\r\n                                        type=\"submit\" class=\"btn btn-primary\"\r\n                                        saveText=\"Save Overview\"\r\n                                        handleSaveClick={handleSaveClick}\r\n                                        handleCancelClick={handleCancelClick}>\r\n                                    </FormActions>\r\n                                </CForm>\r\n                            </CCardBody>\r\n                        </CCollapse>\r\n                    </CCard>\r\n                </CFade>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\n\r\nconst makeMapStateToProps = () => {\r\n    const mapStateToProps = (state, props) => {\r\n        return {\r\n            report: selectReport(state)\r\n        }\r\n    }\r\n    return mapStateToProps\r\n}\r\nconst mapDispatchToProps = dispatch => ({\r\n    setReport: report => dispatch(setReport(report))\r\n});\r\n\r\nexport default connect(makeMapStateToProps, mapDispatchToProps)(TransactionInfo);","var transactionGoodAndService = {\r\n    \"item_type\": 0,\r\n    \"item_make\": '',\r\n    \"description\": '',\r\n    \"previously_registered_to\": '',\r\n    \"presently_registered_to\": '',\r\n    \"estimated_valueSpecified\": false,\r\n    \"status_codeSpecified\": false,\r\n    \"status_comments\": '',\r\n    \"disposed_valueSpecified\": false,\r\n    \"currency_codeSpecified\": false,\r\n    \"sizeSpecified\": false,\r\n    \"size_uom\": '',\r\n    \"address\": '',\r\n    \"registration_dateSpecified\": false,\r\n    \"registration_number\": '',\r\n    \"identification_number\": '',\r\n    \"comments\": ''\r\n}\r\n\r\nexport default transactionGoodAndService;","import React from 'react';\r\nimport FormDynamicSelect from '../../form-inputs/form-dynamic-select.component';\r\n\r\nclass TransactionModeMasterEnum extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            options : [\r\n                {description:'select'},\r\n                {value: 'A', description:'In-branch/Office'},\r\n                {value: 'B', description:'ATM'},\r\n                {value: 'C', description:'Electronic transaction'},\r\n                {value: 'K', description:'Cash'},\r\n                {value: 'T', description:'Courier'}\r\n            ]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { options } = this.state;\r\n        const { name, label, handleChange } = this.props;\r\n        \r\n        return(\r\n            <FormDynamicSelect label={label} name={name} options={options} handleChange={handleChange} />\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default TransactionModeMasterEnum;","import React from 'react';\r\nimport FormDynamicSelect from '../../form-inputs/form-dynamic-select.component';\r\n\r\nclass TransactionItemTypeEnum extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            options : [\r\n                {description:'select'},\r\n                {value: 'CH', description:'Chemicals'},\r\n                {value: 'C', description:'Commodity'},\r\n                {value: 'E', description:'Equipment'},\r\n                {value: 'F', description:'Furniture'},\r\n                {value: 'G', description:'Goods'},\r\n                {value: 'J', description: 'jewellery'},\r\n                {value: 'M', description:'Machine'},\r\n                {value: 'PM', description:'Precious Metal'},\r\n                {value: 'P', description:'Property'},\r\n                {value: 'S', description:'Servicces'},\r\n                {value: 'V', description:'Vehicles'},\r\n                {value: 'W', description:'Weapon'},\r\n                {value: 'Sh', description:'share'},\r\n                {value: 'B', description:'Bond'},\r\n                {value: 'O', description:'Others'},\r\n            ]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { options } = this.state;\r\n        const { name, label, handleChange } = this.props;\r\n        \r\n        return(\r\n            <FormDynamicSelect label={label} name={name} options={options} handleChange={handleChange}/>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default TransactionItemTypeEnum;","import CIcon from '@coreui/icons-react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup,\r\n    CRow\r\n} from '@coreui/react';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport FormAmount from 'src/components/form-inputs/form-amount.component';\r\nimport transactionGoodAndService from 'src/redux/transaction-item/transaction-item.format';\r\nimport { setReport } from '../../../redux/report/report.actions';\r\nimport { selectReport } from '../../../redux/report/report.selectors';\r\nimport FormActions from '../../form-inputs/form-actions.component';\r\nimport FormDate from '../../form-inputs/form-date.component';\r\nimport FormInput from '../../form-inputs/form-input.component';\r\nimport FormTextArea from '../../form-inputs/form-textarea-component';\r\nimport CurrenciesEnum from '../../goaml-enums/currencies-enum/currencies-enum.component';\r\nimport TransactionItemStatusEnum from '../../goaml-enums/transaction-item-status-enum/transaction-item-status-enum.component';\r\nimport TransactionItemTypeEnum from '../../goaml-enums/transaction-item-type-enum/transaction-item-type-enum.component';\r\n\r\nconst TransactionItem = ({ reportType, label, name, setReportType, handleSaveInfoClick, ...otherProps }) => {\r\n\r\n    const [collapsed, setCollapsed] = React.useState(false)\r\n    const [showElements, setShowElements] = React.useState(true)\r\n    let radioItems = [\"Yes\", \"No\"];\r\n    const [transaction, setTransactionState] = React.useState(transactionGoodAndService);\r\n\r\n    const [touched, setTouched] = React.useState(false);\r\n    const onFocus = () => setTouched(true)\r\n    const onBlur = () => setTouched(false)\r\n\r\n    const [showError, setShowError] = React.useState({isEmpty: false, value: ''});\r\n\r\n    const checkData = (e, inputState) => {\r\n        let error = true;\r\n        let val = {};\r\n        let myValidation;\r\n        if (typeof myValidation === 'string' || 'integer' || 'boolean'){\r\n            for (const [key, value] of Object.entries(inputState)) {\r\n                if (e.target.name === key) {\r\n                    value === null ? error = true : error = false; \r\n                    val = key;\r\n                }\r\n            }\r\n        }\r\n        setShowError({\r\n            isEmpty: error,\r\n            value: val\r\n         });\r\n    }\r\n\r\n    console.log('error', showError)\r\n    \r\n    const handleChange = event => {\r\n        // console.log({event.target});\r\n        const { name, value } = event.target;\r\n        setTransactionState({ ...transaction, [name]: value });\r\n    };\r\n\r\n\r\n    const handleSaveClick = () => {\r\n        // if (!transaction.item_type || !transaction.previous_register_to || !transaction.status_code || !transaction.size || !transaction.registration_number ||\r\n        //     !transaction.item_make || !transaction.disposed_value || !transaction.size_UOM || !transaction.identification_number || !transaction.description ||\r\n        //     !transaction.estimate_value || !transaction.currency_code || !transaction.registration_date || !transaction.status_commets) {\r\n        //     alert('please fill this field');\r\n        // }\r\n        return setReportType({...reportType, ...transaction});\r\n    }\r\n\r\n    const handleCancelClick = () => {\r\n        console.log(\"Hello: \", reportType);\r\n    }\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                <CCard>\r\n                    <CCardHeader>\r\n                    {label}\r\n                    <div className=\"card-header-actions\">\r\n                        <CButton \r\n                        color=\"link\" \r\n                        className=\"card-header-action btn-minimize\" \r\n                        onClick={() => setCollapsed(!collapsed)}\r\n                        >\r\n                        <CIcon name={collapsed ? 'cil-chevron-bottom':'cil-chevron-top'} />\r\n                        </CButton>\r\n                    </div>\r\n                    </CCardHeader>\r\n                    <CCollapse show={collapsed} timeout={1000}>\r\n                    <CCardBody>\r\n                        <CForm  method=\"post\" className=\"form-horizontal\">\r\n                            <CFormGroup row>\r\n                                <CCol xs=\"4\">\r\n                                    <TransactionItemTypeEnum \r\n                                        label=\"Item Type*\" \r\n                                        name=\"item_Type\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange} \r\n                                        onKeyUp={(e) => checkData(e, transaction)} \r\n                                        className={`form-control ${!transaction.item_type && touched && 'is-invalid'} ${transaction.item_type && 'is-valid'}`}\r\n                                    />\r\n                                    <FormInput \r\n                                        label=\"Previously Registered To\" \r\n                                        name=\"previous_register_to\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange} \r\n                                        onKeyUp={(e) => checkData(e, transaction)} \r\n                                        value={transaction.previous_register_to}\r\n                                        className={`form-control ${!transaction.previous_register_to && touched && 'is-invalid'} ${transaction.presently_register_to && 'is-valid'}`}\r\n                                     />\r\n                                    <TransactionItemStatusEnum \r\n                                        label=\"Status Code\" \r\n                                        name=\"status_code\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange} \r\n                                        onKeyUp={(e) => checkData(e, transaction)}\r\n                                        value={transaction.status_code}\r\n                                        className={`form-control ${!transaction.status_code && touched && 'is-invalid'} ${transaction.status_code && 'is-valid'}`}\r\n                                    />\r\n                                    <FormAmount \r\n                                        label=\"Size\" \r\n                                        name=\"size\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange} \r\n                                        onKeyUp={(e) => checkData(e, transaction)}\r\n                                        value={transaction.size}\r\n                                        className={`form-control ${!transaction.size && touched && 'is-invalid'} ${transaction.size && 'is-valid'}`}\r\n                                    />\r\n                                    <FormInput\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus} \r\n                                        label=\"Registration Number\" \r\n                                        name=\"registration_number\"\r\n                                        placeholder=\"Enter ...\" \r\n                                        handleChange={handleChange} \r\n                                        onKeyUp={(e) => checkData(e, transaction)} \r\n                                        value={transaction.registration_number}\r\n                                        className={`form-control ${!transaction.registration_number && touched && 'is-invalid'} ${transaction.registration_number && 'is-valid'}`}\r\n                                    />\r\n                                </CCol>\r\n                                <CCol xs=\"4\">\r\n                                    <FormInput \r\n                                        label=\"Item Make*\" \r\n                                        name=\"item_make\"\r\n                                        placeholder=\"Enter ...\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange} \r\n                                        onKeyUp={(e) => checkData(e, transaction)} \r\n                                        value={transaction.item_make}\r\n                                        className={`form-control ${!transaction.item_make && touched && 'is-invalid'} ${transaction.item_make && 'is-valid'}`}\r\n                                    />\r\n                                    <FormAmount \r\n                                        label=\"Disposed Value\"\r\n                                        name=\"disposed_value\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange} \r\n                                        onKeyUp={(e) => checkData(e, transaction)} \r\n                                        value={transaction.disposed_value}\r\n                                        className={`form-control ${!transaction.disposed_value && touched && 'is-invalid'} ${transaction.disposed_value && 'is-valid'}`}\r\n                                    />\r\n                                    <FormInput \r\n                                        label=\"Size UOM\" \r\n                                        name=\"size_UOM\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange} \r\n                                        onKeyUp={(e) => checkData(e, transaction)} \r\n                                        value={transaction.size_UOM}\r\n                                        className={`form-control ${!transaction.size_UOM && touched && 'is-invalid'} ${transaction.size_UOM && 'is-valid'}`}\r\n                                    />\r\n                                    <FormInput \r\n                                        label=\"Identification Number\" \r\n                                        name=\"identification_number\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange} \r\n                                        onKeyUp={(e) => checkData(e, transaction)} \r\n                                        value={transaction.identification_number}\r\n                                        className={`form-control ${!transaction.identification_number && touched && 'is-invalid'} ${transaction.identification_number && 'is-valid'}`}\r\n                                    />\r\n                                    <FormTextArea \r\n                                        label=\"Comments\" \r\n                                        name=\"comments\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange} \r\n                                        onKeyUp={(e) => checkData(e, transaction)} \r\n                                        value={transaction.comments} \r\n                                        className={`form-control ${!transaction.comments && touched && 'is-invalid'} ${transaction.comments && 'is-valid'}`}\r\n                                    />\r\n                                </CCol>\r\n                                <CCol xs=\"4\">\r\n                                    <FormInput \r\n                                        label=\"Description*\" \r\n                                        name=\"description\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange} \r\n                                        onKeyUp={(e) => checkData(e, transaction)} \r\n                                        value={transaction.description}\r\n                                        className={`form-control ${!transaction.description && touched && 'is-invalid'} ${transaction.description && 'is-valid'}`}\r\n                                    />\r\n                                    <FormAmount \r\n                                        label=\"Estimated Value\" \r\n                                        name=\"estimate_value\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange} \r\n                                        onKeyUp={(e) => checkData(e, transaction)} \r\n                                        value={transaction.estimate_value}\r\n                                        className={`form-control ${!transaction.estimate_value && touched && 'is-invalid'} ${transaction.estimate_value && 'is-valid'}`}\r\n                                    />\r\n                                    <CurrenciesEnum \r\n                                        label=\"Currency Code*\" \r\n                                        name=\"currency_code\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange} \r\n                                        onKeyUp={(e) => checkData(e, transaction)} \r\n                                        value={transaction.currency_code} \r\n                                        className={`form-control ${!transaction.currency_code && touched && 'is-invalid'} ${transaction.currency_code && 'is-valid'}`}\r\n                                    />\r\n                                    <FormDate \r\n                                        label=\"Registration Date*\" \r\n                                        name=\"registration_date\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange} \r\n                                        onKeyUp={(e) => checkData(e, transaction)} \r\n                                        value={transaction.registration_date} \r\n                                        className={`form-control ${!transaction.registration_date && touched && 'is-invalid'} ${transaction.registration_date && 'is-valid'}`}\r\n                                    />\r\n                                </CCol>\r\n                                <CCol xs=\"12\">\r\n                                    <FormTextArea \r\n                                        label=\"Status Comments\" \r\n                                        name=\"status_comments\" \r\n                                        placeholder=\"Enter ...\"\r\n                                        onBlur={onBlur}\r\n                                        onFocus={onFocus}\r\n                                        handleChange={handleChange} \r\n                                        onKeyUp={(e) => checkData(e, transaction)} \r\n                                        value={transaction.status_commets} \r\n                                        className={`form-control ${!transaction.status_commets && touched && 'is-invalid'} ${transaction.status_commets && 'is-valid'}`}\r\n                                    />\r\n                                </CCol>\r\n                            </CFormGroup>\r\n                            <FormActions \r\n                                type=\"submit\" class=\"btn btn-primary\"\r\n                                saveText=\"Save Item\" \r\n                                handleSaveClick={handleSaveClick} \r\n                                handleCancelClick={handleCancelClick}>\r\n                            </FormActions>\r\n                        </CForm>\r\n                    </CCardBody>\r\n                    </CCollapse>\r\n                </CCard>\r\n                </CFade>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    reportType: selectReport(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setReportType: reportType => dispatch(setReport(reportType))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TransactionItem);\r\n","var t_from_my_client = {\r\n    \"from_funds_code\": \"\",\r\n    \"from_funds_comment\": \"\",\r\n    \"from_foreign_currency\": {\r\n        \"foreign_currency_code\": '',\r\n        \"foreign_amount\": '',\r\n        \"foreign_exchange_rate\": '',\r\n    },\r\n    \"t_conductor\": null,\r\n    \"from_account\": null,\r\n    \"from_person\": null,\r\n    \"from_entity\": null,\r\n    \"from_country\": \"\"\r\n}\r\n\r\nexport default t_from_my_client;","import React from 'react';\r\nimport FormDynamicSelect from '../../form-inputs/form-dynamic-select.component';\r\n\r\nclass FundsTypeEnum extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            options : [\r\n                {description:'select'},\r\n                {value: 'A', description:'Deposit'},\r\n                {value: 'B', description:'Electronic Funds Transfer'},\r\n                {value: 'E', description:'Bank Draft'},\r\n                {value: 'F', description:'Managers Cheque'},\r\n                {value: 'G', description:'Travelers cheque'},\r\n                {value: 'H', description:'Life insurance policy'},\r\n                {value: 'K', description:'Cash'},\r\n                {value: 'L', description:'From Account'},\r\n                {value: 'O', description:'Other'},\r\n                {value: 'DW', description:'Divided Warrant'},\r\n                {value: 'C', description:'Fx Currency Exchange'},\r\n                {value: 'MM', description:'Money Market Instrument'},\r\n                {value: 'J', description:'Securities'},\r\n                {value: 'P', description:'Cheque'}\r\n            ]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { options } = this.state;\r\n        const { name, label, handleChange } = this.props;\r\n        \r\n        return(\r\n            <FormDynamicSelect label={label} name={name} options={options} handleChange={handleChange} />\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default FundsTypeEnum;","import React from 'react';\r\nimport FormDynamicSelect from '../../form-inputs/form-dynamic-select.component'\r\n\r\nclass PartyTypeEnum extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            options: [\r\n                { value: 'Person', description: 'Person' },\r\n                { value: 'Account', description: 'Account' },\r\n                { value: 'Entity', description: 'Entity' }\r\n            ]\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { options } = this.state;\r\n        const { name, label, handleChange } = this.props;\r\n\r\n        return (\r\n            <FormDynamicSelect label={label} name={name} options={options} handleChange={handleChange} />\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default PartyTypeEnum;","import React, { useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport CombinedTable from './combined-table.component';\r\n\r\nconst PersonTable = ({ itemArray, deleteItem, ...otherProps }) => {\r\n\r\n    const fields = ['title', 'first_name', 'last_name', 'alias', 'ssn'];\r\n    var tableData =[];\r\n\r\n    if(itemArray){\r\n        \r\n        console.log(\"itemPerson: \", itemArray);\r\n        tableData.push(itemArray);\r\n    }\r\n\r\n    return(\r\n        <CombinedTable name=\"Person Table\" fields={fields} tableData={tableData} deleteItem={deleteItem} />\r\n    )\r\n}\r\n\r\nexport default PersonTable;\r\n","var t_person = {\r\n  \"gender\": '',\r\n  \"title\": '',\r\n  \"first_name\": '',\r\n  \"middle_name\": '',\r\n  \"prefix\": '',\r\n  \"last_name\": '',\r\n  \"birthdate\": '',\r\n  \"birth_place\": '',\r\n  \"mothers_name\": '',\r\n  \"alias\": '',\r\n  \"ssn\": '',\r\n  \"passport_number\": '',\r\n  \"passport_country\": '',\r\n  \"id_number\": '',\r\n  \"nationality1\": '',\r\n  \"nationality2\": '',\r\n  \"nationality3\": '',\r\n  \"residence\": '',\r\n  \"phones\": [],\r\n  \"addresses\": [],\r\n  \"email\": '',\r\n  \"occupation\": '',\r\n  \"employer_name\": '',\r\n  \"employer_address_id\": '',\r\n  \"employer_phone_id\": '',\r\n  \"identification\": [],\r\n  \"date_deceased\":'',\r\n  \"tax_number\": '',\r\n  \"tax_reg_number\": '',\r\n  \"source_of_wealth\": '',\r\n  \"comments\": ''\r\n  }\r\n\r\nexport default t_person;","import React from 'react';\r\nimport {\r\n    CFormGroup,\r\n    CInput,\r\n    CInputGroup,\r\n    CInputGroupAppend,\r\n    CInputGroupText,\r\n    CLabel  } from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\n\r\nconst FormEmail = ({ label, name, placeholder, handleChange, ...otherProps }) => (\r\n  <CFormGroup>\r\n          {label ? (\r\n            <CLabel htmlFor={name}>{label}</CLabel>\r\n          ) : null}\r\n            <CInputGroup>\r\n                <CInput type=\"email\" id={name} name={name} onChange={handleChange} {...otherProps} placeholder={placeholder} />\r\n                <CInputGroupAppend>\r\n                <CInputGroupText>\r\n                    <CIcon name=\"cil-envelope-closed\" />\r\n                </CInputGroupText>\r\n                </CInputGroupAppend>\r\n            </CInputGroup>\r\n        </CFormGroup>\r\n);\r\n\r\nexport default FormEmail;\r\n","import CIcon from '@coreui/icons-react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup,\r\n    CRow\r\n} from '@coreui/react';\r\nimport React from 'react';\r\nimport t_person from 'src/redux/transaction-person/transaction-person.format';\r\n//import { useDispatch } from 'react-redux';\r\n//import { addPerson } from 'src/redux/report-person/reportPersonAction';\r\nimport FormActions from '../../form-inputs/form-actions.component';\r\nimport FormDate from '../../form-inputs/form-date.component';\r\nimport FormEmail from '../../form-inputs/form-email.component';\r\nimport FormGenderSelect from '../../form-inputs/form-gender-select.component';\r\nimport FormInput from '../../form-inputs/form-input.component';\r\nimport FormRadioText from '../../form-inputs/form-radio-text.component';\r\nimport FormTextArea from '../../form-inputs/form-textarea-component';\r\nimport CountryCodeEnum from '../../goaml-enums/country-code-enum/country-code-enum.component';\r\nimport WrapperAddresses from '../wrapper-addresses/wrapper-addresses.component';\r\nimport WrapperIdentifications from \"../wrapper-identifications/wrapper-identifications.component\";\r\nimport WrapperPhones from '../wrapper-phones/wrapper-phones.components';\r\n\r\n\r\nconst PersonTemplate = ({ label, name, alias,  transRef, partyType, OnSave, ...otherProps }) => {\r\n\r\n    const [collapsed, setCollapsed] = React.useState(false)\r\n    const [showElements, setShowElements] = React.useState(true)\r\n    const [templatePerson, setComponentState] = React.useState(t_person)\r\n    const [touched, setTouched] = React.useState(false);\r\n    const onFocus = () => setTouched(true)\r\n    const onBlur = () => setTouched(false)\r\n\r\n    const [showError, setShowError] = React.useState({isEmpty: false, value: ''});\r\n\r\n    const checkInputs = (e, inputState) => {\r\n        let error = false;\r\n        let val = {};\r\n        let myValidation;\r\n        if (typeof myValidation === 'string' || 'integer' || 'boolean'){\r\n            for (const [key, value] of Object.entries(inputState)) {\r\n                if (e.target.name === key) {\r\n                    value === null ? error = true : error = false; \r\n                    val = key;\r\n                }\r\n            }\r\n        }\r\n        setShowError({\r\n            isEmpty: error,\r\n            value: val\r\n         });\r\n    }\r\n\r\n    const handleChange = event => {\r\n        const { name, value } = event.target;\r\n        setComponentState({ ...templatePerson, [name]: value });\r\n    };\r\n\r\n    const handleSaveClick = () => {\r\n\r\n        /* if (!templatePerson.first_name || !templatePerson.title || !templatePerson.alias || !templatePerson.mothers_name || !templatePerson.nationality1 ||\r\n            !templatePerson.nationality2 || !templatePerson.nationality3 || !templatePerson.passport_number || !templatePerson.source_of_wealth || !templatePerson.middle_name ||\r\n            !templatePerson.gender || !templatePerson.birthdate || !templatePerson.residence || !templatePerson.occupation || !templatePerson.employer_name ||\r\n            !templatePerson.last_name || !templatePerson.prefix || !templatePerson.email || !templatePerson.date_deceased\r\n            || !templatePerson.phone || !templatePerson.addresses || !templatePerson.identification\r\n        ) {\r\n            alert('please complete this field')\r\n        } */\r\n\r\n        if (!templatePerson.first_name || !templatePerson.title || !templatePerson.last_name) {\r\n            alert('please complete this field')\r\n        }\r\n        \r\n        console.log(\"templatePerson: \", templatePerson);\r\n        OnSave(templatePerson);\r\n    }\r\n    \r\n    const handleCancelClick = () => {\r\n        console.log(\"Hello: \", templatePerson);\r\n    }\r\n\r\n    const handlePhoneSave = (phone) => {\r\n        templatePerson.phones.push(phone);\r\n        handleSaveClick();\r\n    }\r\n\r\n    const handleAddressSave = (address) => {\r\n        templatePerson.addresses.push(address);\r\n        handleSaveClick();\r\n    }\r\n\r\n    const handleIdentificationSave = (identification) => {\r\n        templatePerson.identification.push(identification);\r\n        handleSaveClick();\r\n    }\r\n\r\n    const handlePhoneDelete = (phoneIndex) => {\r\n        templatePerson.phones.splice(phoneIndex, 1);\r\n        handleSaveClick();\r\n    }\r\n\r\n    const handleAddressDelete = (addressIndex) => {\r\n        templatePerson.addresses.splice(addressIndex, 1);\r\n        handleSaveClick();\r\n    }\r\n\r\n    const handleIdentificationDelete = (identificationIndex) => {\r\n        templatePerson.identification.splice(identificationIndex, 1);\r\n        handleSaveClick();\r\n    }\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                    <CCard>\r\n                        <CCardHeader>      {label}\r\n                            <div className=\"card-header-actions\">\r\n                                <CButton\r\n                                    color=\"link\"\r\n                                    className=\"card-header-action btn-minimize\"\r\n                                    onClick={() => setCollapsed(!collapsed)}\r\n                                >\r\n                                    <CIcon name={collapsed ? 'cil-chevron-bottom' : 'cil-chevron-top'} />\r\n                                </CButton>\r\n                            </div>\r\n                        </CCardHeader>\r\n                        <CCollapse show={collapsed} timeout={1000}>\r\n                            <CCardBody>\r\n                                <CForm className=\"form-horizontal\">\r\n                                    <CFormGroup row>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormInput \r\n                                                label=\"First Name*\" \r\n                                                name=\"first_name\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.first_name}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.first_name && touched && 'is-invalid'} ${templatePerson.first_name && 'is-valid'}`}\r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Title*\" \r\n                                                name=\"title\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.title}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.title && touched && 'is-invalid'} ${templatePerson.title && 'is-valid'}`}\r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Alias/Known As\" \r\n                                                name=\"alias\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.alias}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.first_name && touched && 'is-invalid'} ${templatePerson.first_name && 'is-valid'}`}\r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Mother's Name\" \r\n                                                name=\"mothers_name\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.mothers_name}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.mothers_name && touched && 'is-invalid'} ${templatePerson.mothers_name && 'is-valid'}`}\r\n                                            />\r\n                                            <CountryCodeEnum \r\n                                                label=\"Nationality 1\" \r\n                                                name=\"nationality1\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.nationality1}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.nationality1 && touched && 'is-invalid'} ${templatePerson.nationality1 && 'is-valid'}`}\r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Passport\" \r\n                                                name=\"passport_number\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.passport_number}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.passport_number && touched && 'is-invalid'} ${templatePerson.passport_number && 'is-valid'}`}\r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Source of Wealth\" \r\n                                                name=\"source_of_wealth\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.source_of_wealth}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.source_of_wealth && touched && 'is-invalid'} ${templatePerson.source_of_wealth && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormInput \r\n                                                label=\"Middle Name\" \r\n                                                name=\"middle_name\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.middle_name}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.middle_name && touched && 'is-invalid'} ${templatePerson.middle_name && 'is-valid'}`}\r\n                                            />\r\n                                            <FormGenderSelect \r\n                                                label=\"Gender\" \r\n                                                name=\"gender\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.gender}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.gender && touched && 'is-invalid'} ${templatePerson.gender && 'is-valid'}`}  \r\n                                            />\r\n                                            <FormDate \r\n                                                label=\"Birth Date\" \r\n                                                name=\"birthdate\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.birthdate}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.birthdate && touched && 'is-invalid'} ${templatePerson.birthdate && 'is-valid'}`}  \r\n                                            />\r\n                                            <CountryCodeEnum \r\n                                                label=\"Country of Residence\" \r\n                                                name=\"residence\"\r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.residence}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.residence && touched && 'is-invalid'} ${templatePerson.residence && 'is-valid'}`}\r\n                                            />\r\n                                            <CountryCodeEnum \r\n                                                label=\"Nationality 2\" \r\n                                                name=\"nationality2\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.nationality2}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.nationality2 && touched && 'is-invalid'} ${templatePerson.nationality2 && 'is-valid'}`}  \r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Occupation\" \r\n                                                name=\"occupation\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.occupation}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.occupation && touched && 'is-invalid'} ${templatePerson.occupation && 'is-valid'}`} \r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Employer Name\" \r\n                                                name=\"employer_name\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.employer_name}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.employer_name && touched && 'is-invalid'} ${templatePerson.employer_name && 'is-valid'}`} \r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormInput \r\n                                                label=\"SurName/Last Name\" \r\n                                                name=\"last_name\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.last_name}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.last_name && touched && 'is-invalid'} ${templatePerson.last_name && 'is-valid'}`} \r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Prefix\" \r\n                                                name=\"prefix\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.prefix}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.prefix && touched && 'is-invalid'} ${templatePerson.prefix && 'is-valid'}`}  \r\n                                                />\r\n                                            <FormInput \r\n                                                label=\"Birth Place\" \r\n                                                name=\"birth_place\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.birth_place}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.birth_place && touched && 'is-invalid'} ${templatePerson.birth_place && 'is-valid'}`} \r\n                                            />\r\n                                            <FormEmail \r\n                                                label=\"Email address\" \r\n                                                name=\"email\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.email}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.email && touched && 'is-invalid'} ${templatePerson.email && 'is-valid'}`}  \r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Social Security Number\" \r\n                                                name=\"ssn\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.ssn}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.ssn && touched && 'is-invalid'} ${templatePerson.ssn && 'is-valid'}`} \r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Tax Number\" \r\n                                                name=\"tax_number\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.tax_number}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.tax_number && touched && 'is-invalid'} ${templatePerson.tax_number && 'is-valid'}`}  \r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Tax Reg. Number\" \r\n                                                name=\"tax_reg_number\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.tax_reg_number}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, templatePerson)} \r\n                                                className={`from-control ${!templatePerson.tax_reg_number && touched && 'is-invalid'} ${templatePerson.tax_reg_number && 'is-valid'}`} \r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <WrapperPhones \r\n                                                label=\"Phone\" \r\n                                                name=\"phones\" \r\n                                                handlePhoneSave={handlePhoneSave}\r\n                                                handlePhoneDelete={handlePhoneDelete}\r\n                                                value={templatePerson.phones}\r\n                                            >\r\n                                            </WrapperPhones>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <WrapperAddresses \r\n                                                label=\"Address\" \r\n                                                name=\"addresses\" \r\n                                                handleAddressSave={handleAddressSave}\r\n                                                handleAddressDelete={handleAddressDelete}\r\n                                                value={templatePerson.addresses}\r\n                                            >\r\n                                            </WrapperAddresses>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <WrapperIdentifications \r\n                                                label=\"Identification\" \r\n                                                name=\"identification\" \r\n                                                handleIdentificationSave={handleIdentificationSave}\r\n                                                handleIdentificationDelete={handleIdentificationDelete}\r\n                                                value={templatePerson.identification}\r\n                                            >\r\n                                            </WrapperIdentifications>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <CRow>\r\n                                                <CCol xs=\"6\">\r\n                                                    <FormRadioText\r\n                                                        label=\"Deceased?\" \r\n                                                        name=\"deceased\" \r\n                                                        width=\"6\" items={[\"Yes\", \"No\"]} \r\n                                                        handleChange={handleChange}\r\n                                                    />\r\n                                                </CCol>\r\n                                                <CCol xs=\"6\">\r\n                                                    <FormDate \r\n                                                        type=\"date\"\r\n                                                        label=\"Date Deceased\" \r\n                                                        name=\"date_deceased\" \r\n                                                        handleChange={handleChange}\r\n                                                        value={templatePerson.date_deceased} \r\n                                                    />\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <FormTextArea \r\n                                                label=\"Comments\" \r\n                                                name=\"comments\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                value={templatePerson.comments} \r\n                                            />\r\n                                        </CCol>\r\n                                    </CFormGroup>\r\n                                    <FormActions \r\n                                        saveText={`Save ${alias}`}\r\n                                        handleSaveClick={handleSaveClick} \r\n                                        handleCancelClick={handleCancelClick}>\r\n                                    </FormActions>\r\n                                </CForm>\r\n                            </CCardBody>\r\n                        </CCollapse>\r\n                    </CCard>\r\n                </CFade>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nexport default PersonTemplate;","import React from 'react';\r\nimport PersonTable from '../../goaml-tables/table-person.component';\r\nimport PersonTemplate from '../template-person/template-person.component';\r\nimport {\r\n    CLabel,\r\n    CCard,\r\n    CCardBody,\r\n    CCol,\r\n    CFade,\r\n    CRow,\r\n    CNav,\r\n    CNavItem,\r\n    CNavLink,\r\n    CTabContent,\r\n    CTabPane,\r\n    CTabs,\r\n  } from '@coreui/react'\r\n\r\nconst WrapperPersons = ({ name, label, alias, transRef, value, onDelete, OnSave, partyType, isDeletable, ...otherProps }) => {\r\n    \r\n    let [showElements, setShowElements] = React.useState(true)\r\n    const tab1Title = `Add ${label}`;\r\n    const tab2Title = `${label} Table`;\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                {label ? (\r\n                    <CLabel htmlFor={label}>{label}</CLabel>\r\n                ) : null}\r\n                <div className=\"row\">\r\n                    <CCol xs=\"12\">\r\n                        <CTabs activeTab=\"Tab1\">\r\n                            <CNav variant=\"tabs\">\r\n                                <CNavItem>\r\n                                <CNavLink data-tab=\"Tab1\">\r\n                                    {tab1Title}\r\n                                </CNavLink>\r\n                                </CNavItem>\r\n                                <CNavItem>\r\n                                <CNavLink data-tab=\"Tab2\">\r\n                                    {tab2Title}\r\n                                </CNavLink>\r\n                                </CNavItem>\r\n                            </CNav>\r\n                            <CTabContent>\r\n                                <CTabPane data-tab=\"Tab1\">\r\n                                    <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                                        <CCard>\r\n                                            <CCardBody>\r\n                                            <CRow>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <PersonTemplate transRef={transRef} OnSave={OnSave} partyType={partyType} label={label} name={name} alias={alias}></PersonTemplate>\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                            </CCardBody>\r\n                                        </CCard>\r\n                                    </CFade>\r\n                                </CTabPane>\r\n                                <CTabPane data-tab=\"Tab2\">\r\n                                    <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                                        <CCard>\r\n                                            <CCardBody>\r\n                                            <CRow>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <PersonTable itemArray={value} deleteItem={onDelete} isDeletable={isDeletable} name={name} />\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                            </CCardBody>\r\n                                        </CCard>\r\n                                    </CFade>\r\n                                </CTabPane>\r\n                            </CTabContent>\r\n                        </CTabs>\r\n                    </CCol>\r\n                </div>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nexport default WrapperPersons;\r\n","var t_account = {\r\n    \"institution_name\": '',\r\n    \"institution_code\": '',\r\n    \"swift\": '',\r\n    \"non_banking_institution\": false,\r\n    \"branch\": '',\r\n    \"account\": '',\r\n    \"currency_code\": '',\r\n    \"account_name\": '',\r\n    \"iban\": '',\r\n    \"client_number\": 0,\r\n    \"personal_account_type\": '',\r\n    \"t_entity\": '',\r\n    \"signatory\": [],\r\n    \"is_primary\": '',\r\n    \"t_person\": '',\r\n    \"role\": '',\r\n    \"opened\": '',\r\n    \"closed\": '',\r\n    \"balance\": '',\r\n    \"date_balance\": '',\r\n    \"status_code\": '',\r\n    \"beneficiary\": '',\r\n    \"beneficiary_comment\": '',\r\n    \"comments\": '',\r\n}\r\n\r\nexport default t_account;","import React from 'react';\r\nimport FormDynamicSelect from '../../form-inputs/form-dynamic-select.component';\r\n\r\nclass AccountTypeEnum extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            options : [\r\n                {description:'select'},\r\n                {value: 'A', description:'Savings'},\r\n                {value: 'U', description:'Transit Account'},\r\n                {value: 'D', description:'Current Business'},\r\n                {value: 'E', description:'Current Personal'},\r\n                {value: 'I', description:'Fixed Deposit'},\r\n                {value: 'L', description:'Trading Account'},\r\n                {value: 'O', description:'Export Proceed Dorm'},\r\n                {value: 'C', description:'Call Deposit'},\r\n                {value: 'T', description:'Internal Account'},\r\n                {value: 'B', description:'Trust Account'},\r\n                {value: 'Y', description:'Escrow Account'},\r\n                {value: 'P', description:'Dormicilliary Account'}\r\n            ]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { options } = this.state;\r\n        const { name, label, handleChange } = this.props;\r\n        \r\n        return(\r\n            <FormDynamicSelect label={label} name={name} options={options} handleChange={handleChange} />\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default AccountTypeEnum;","var t_entity = {\r\n    \"name\": '',\r\n    \"commercial_name\": '',\r\n    \"incorporation_legal_form\": '',\r\n    \"incorporation_legal_formSpecified\": false,\r\n    \"incorporation_number\": '',\r\n    \"business\": '',\r\n    \"phones\": [],\r\n    \"addresses\": [],\r\n    \"email\": '',\r\n    \"url\": '',\r\n    \"incorporation_state\": '',\r\n    \"incorporation_country_code\": '',\r\n    \"incorporation_country_codeSpecified\": false,\r\n    \"director_id\": [],\r\n    \"incorporation_date\": '',\r\n    \"incorporation_dateSpecified\": false,\r\n    \"business_closed\": false,\r\n    \"business_closedSpecified\": false,\r\n    \"date_business_closed\": '',\r\n    \"date_business_closedSpecified\": false,\r\n    \"tax_number\": '',\r\n    \"tax_reg_number\": '',\r\n    \"comments\": ''\r\n}\r\n\r\nexport default t_entity;","import React from 'react';\r\nimport FormDynamicSelect from '../../form-inputs/form-dynamic-select.component';\r\n\r\nclass EntityLegalFormEnum extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            options : [\r\n                {value: 'A', description:'Limited Liability Company'},\r\n                {value: 'G', description:'Ordinary Business Registration'},\r\n                {value: 'B', description:'Public Liability Company'},\r\n                {value: 'R', description:'Registerred'}\r\n            ]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { options } = this.state;\r\n        const { name, label, handleChange } = this.props;\r\n        \r\n        return(\r\n            <FormDynamicSelect label={label} name={name} options={options} handleChange={handleChange} />\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default EntityLegalFormEnum;","import React from 'react';\r\nimport CombinedTable from './combined-table.component'\r\n\r\nconst DirectorTable = ({itemArray, deleteItem, ...otherProps}) => {\r\n    console.log(\"itemArray: \", itemArray);\r\n    itemArray = [\r\n        {\r\n            id: 1, title: \"Mr\", first_name: \"John\", last_name: \"Doe\", alias: \"Big Boy\", ssn: 123\r\n        }\r\n    ]\r\n    const fields = ['id', 'title','first_name', 'last_name', 'alias', 'ssn']\r\n\r\n    return(\r\n        <CombinedTable name=\"Directors Table\" fields={fields} tableData={itemArray} />\r\n    )\r\n}\r\n\r\nexport default DirectorTable;","import React from 'react';\r\nimport FormDynamicSelect from '../../form-inputs/form-dynamic-select.component';\r\n\r\nclass EntityPersonRoleEnum extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            options : [\r\n                {description:'select'},\r\n                {value: 'F', description:'Fudiciary Agent'},\r\n                {value: 'N', description:'Nominee'},\r\n                {value: 'P', description:'Pertners'},\r\n                {value: 'B', description:'Shareholders'},\r\n                {value: 'C', description:'Signatory'},\r\n                {value: 'S', description:'Sole Proprietor'}\r\n            ]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { options } = this.state;\r\n        const { name, label, handleChange } = this.props;\r\n        \r\n        return(\r\n            <FormDynamicSelect label={label} name={name} options={options} handleChange={handleChange} />\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default EntityPersonRoleEnum;","import React from 'react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup,\r\n    CRow\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport FormRadioText from '../../form-inputs/form-radio-text.component'\r\nimport EntityPersonRoleEnum from '../../goaml-enums/entity-person-role-enum/entity-person-role-enum.component'\r\nimport WrapperPersons from '../wrapper-person/wrapper-person.component'\r\nimport FormActions from '../../form-inputs/form-actions.component';\r\n\r\nconst DirectorTemplate = ({ name, transRef, OnSave, partyType, ...otherProps }) => {\r\n\r\n    const [collapsed, setCollapsed] = React.useState(false)\r\n    const [showElements, setShowElements] = React.useState(true)\r\n    const [entityDirectorInfo, setEntityDirectorInfo] = React.useState({\r\n        \"role\": 0,\r\n        \"t_person\": null\r\n    })\r\n\r\n    const handleSaveDirectorPerson = (txnRef, partyType, person) => {\r\n        setEntityDirectorInfo({ ...entityDirectorInfo, t_person: person });\r\n    };\r\n\r\n    const handleChange = event => {\r\n        const { name, value } = event.target;\r\n        setEntityDirectorInfo({ ...entityDirectorInfo, [name]: value });\r\n    };\r\n\r\n    const handleSaveClick = () => {\r\n        let director = {...entityDirectorInfo.t_person, role: entityDirectorInfo.role}\r\n        OnSave(transRef, partyType, director);\r\n    }\r\n\r\n    const handleCancelClick = () => {\r\n        console.log(\"Hello: \", entityDirectorInfo);\r\n    }\r\n    \r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                <CCard>\r\n                    <CCardHeader>\r\n                    {name}\r\n                    <div className=\"card-header-actions\">\r\n                        <CButton \r\n                        color=\"link\" \r\n                        className=\"card-header-action btn-minimize\" \r\n                        onClick={() => setCollapsed(!collapsed)}\r\n                        >\r\n                        <CIcon name={collapsed ? 'cil-chevron-bottom':'cil-chevron-top'} />\r\n                        </CButton>\r\n                    </div>\r\n                    </CCardHeader>\r\n                    <CCollapse show={collapsed} timeout={1000}>\r\n                    <CCardBody>\r\n                        <CForm className=\"form-horizontal\">\r\n                            <CFormGroup row>\r\n                                <CCol xs=\"4\">\r\n                                    <EntityPersonRoleEnum handleChange={handleChange} label=\"Role\" name=\"role\"></EntityPersonRoleEnum>\r\n                                </CCol>\r\n                                <CCol xs=\"12\">\r\n                                    <WrapperPersons OnSave={handleSaveDirectorPerson} transRef={transRef} partyType={partyType} isDeletable={false} name=\"Person\" label=\"Person\" alias=\"Person\"></WrapperPersons>\r\n                                </CCol>\r\n                            </CFormGroup>\r\n                            <FormActions saveText=\"Save Director\" handleSaveClick={handleSaveClick} handleCancelClick={handleCancelClick}></FormActions>\r\n                        </CForm>\r\n                    </CCardBody>\r\n                    </CCollapse>\r\n                </CCard>\r\n                </CFade>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nexport default DirectorTemplate;","import React from 'react';\r\nimport DirectorTable from '../../goaml-tables/table-director.component'\r\nimport DirectorTemplate from '../template-director/template-director.components'\r\nimport {\r\n    CLabel,\r\n    CCard,\r\n    CCardBody,\r\n    CCol,\r\n    CFade,\r\n    CRow,\r\n    CNav,\r\n    CNavItem,\r\n    CNavLink,\r\n    CTabContent,\r\n    CTabPane,\r\n    CTabs,\r\n  } from '@coreui/react'\r\n\r\nconst WrapperDirectors = ({ name, label, transRef, partyType, value, OnSave, onDelete, ...otherProps }) => {\r\n    \r\n    let [showElements, setShowElements] = React.useState(true)\r\n    const tab1Title = `Add ${label}`;\r\n    const tab2Title = `${label} Table`;\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                {label ? (\r\n                    <CLabel htmlFor={label}>{label}</CLabel>\r\n                ) : null}\r\n                <div className=\"row\">\r\n                    <CCol xs=\"12\">\r\n                        <CTabs activeTab=\"Tab1\">\r\n                            <CNav variant=\"tabs\">\r\n                                <CNavItem>\r\n                                <CNavLink data-tab=\"Tab1\">\r\n                                    {tab1Title}\r\n                                </CNavLink>\r\n                                </CNavItem>\r\n                                <CNavItem>\r\n                                <CNavLink data-tab=\"Tab2\">\r\n                                    {tab2Title}\r\n                                </CNavLink>\r\n                                </CNavItem>\r\n                            </CNav>\r\n                            <CTabContent>\r\n                                <CTabPane data-tab=\"Tab1\">\r\n                                    <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                                        <CCard>\r\n                                            <CCardBody>\r\n                                            <CRow>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <DirectorTemplate name=\"director\" label=\"Add a Director\" transRef={transRef} OnSave={OnSave} partyType={partyType} ></DirectorTemplate>\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                            </CCardBody>\r\n                                        </CCard>\r\n                                    </CFade>\r\n                                </CTabPane>\r\n                                <CTabPane data-tab=\"Tab2\">\r\n                                    <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                                        <CCard>\r\n                                            <CCardBody>\r\n                                            <CRow>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <DirectorTable itemArray={value} deleteItem={onDelete} name={name} />\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                            </CCardBody>\r\n                                        </CCard>\r\n                                    </CFade>\r\n                                </CTabPane>\r\n                            </CTabContent>\r\n                        </CTabs>\r\n                    </CCol>\r\n                </div>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nexport default WrapperDirectors;\r\n","import CIcon from '@coreui/icons-react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup,\r\n    CRow\r\n} from '@coreui/react';\r\nimport React from 'react';\r\nimport t_entity from 'src/redux/transaction-entity/transaction-entity.format';\r\nimport FormActions from '../../form-inputs/form-actions.component';\r\nimport FormDate from '../../form-inputs/form-date.component';\r\nimport FormEmail from '../../form-inputs/form-email.component';\r\nimport FormInput from '../../form-inputs/form-input.component';\r\nimport FormRadioText from '../../form-inputs/form-radio-text.component';\r\nimport FormTextArea from '../../form-inputs/form-textarea-component';\r\nimport CountryCodeEnum from '../../goaml-enums/country-code-enum/country-code-enum.component';\r\nimport EntityLegalFormEnum from '../../goaml-enums/entity-legal-form-enum/entity-legal-form-enum.component';\r\nimport WrapperAddresses from '../wrapper-addresses/wrapper-addresses.component';\r\nimport WrapperPhones from '../wrapper-phones/wrapper-phones.components';\r\nimport WrapperDirectors from '../wrapper-director/wrapper-director.component';\r\n\r\n\r\nconst TransactionEntity = ({ label, name, transRef, partyType, OnSave, ...otherProps }) => {\r\n\r\n    const [collapsed, setCollapsed] = React.useState(false)\r\n    const [showElements, setShowElements] = React.useState(true)\r\n    let radioItems = [\"Yes\", \"No\"];\r\n    const [templateEntity, setComponentState] = React.useState(t_entity)\r\n\r\n    const [touched, setTouched] = React.useState(false);\r\n    const onFocus = () => setTouched(true)\r\n    const onBlur = () => setTouched(false)\r\n\r\n    const [showError, setShowError] = React.useState({isEmpty: false, value: ''});\r\n\r\n    const checkInputs = (e, inputState) => {\r\n        let error = false;\r\n        let val = {};\r\n        for (const [key, value] of Object.entries(inputState)) {\r\n            if (e.target.name === key) {\r\n                value === '' ? error = true : error = false; \r\n                val = key;\r\n            }\r\n        }\r\n        setShowError({\r\n            isEmpty: error,\r\n            value: val\r\n         });\r\n    }\r\n    \r\n    console.log('error', showError)\r\n\r\n    const handleChange = event => {\r\n        const { name, value } = event.target;\r\n        setComponentState({ ...templateEntity, [name]: value });\r\n    };\r\n\r\n    const handleSaveClick = () => {\r\n        if(!templateEntity.name || !templateEntity.business || !templateEntity.incorporation_state || !templateEntity.url || !templateEntity.commercial_name ||\r\n            !templateEntity.incorporation_number || !templateEntity.incorporation_country_code || !templateEntity.incorporation_legal_form ||\r\n            !templateEntity.incorporation_date || !templateEntity.email || !templateEntity.business_closed || templateEntity.phone ||\r\n            !templateEntity.addresses || !templateEntity.director_id){\r\n            alert('please fill this field')\r\n        }\r\n        OnSave(templateEntity);\r\n    }\r\n\r\n    const handleCancelClick = () => {\r\n        console.log(\"Hello: \", templateEntity);\r\n    }\r\n\r\n    const handlePhoneSave = (phone) => {\r\n        templateEntity.phones.push(phone);\r\n        handleSaveClick();\r\n    }\r\n\r\n    const handleAddressSave = (address) => {\r\n        templateEntity.addresses.push(address);\r\n        handleSaveClick();\r\n    }\r\n\r\n    const handlePhoneDelete = (phoneIndex) => {\r\n        templateEntity.phones.splice(phoneIndex, 1);\r\n        handleSaveClick();\r\n    }\r\n\r\n    const handleAddressDelete = (addressIndex) => {\r\n        templateEntity.addresses.splice(addressIndex, 1);\r\n        handleSaveClick();\r\n    }\r\n\r\n    const handleSaveDirector = (director) => {\r\n        setComponentState({ ...templateEntity, director_id: { ...templateEntity.director_id, director } });\r\n        handleSaveClick();\r\n    }\r\n\r\n    const handleDeleteDirector = (directorIndex) =>{\r\n        let directors = templateEntity.director_id.splice(directorIndex, 1);\r\n        setComponentState({ ...templateEntity, director_id: directors });\r\n    }\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                    <CCard>\r\n                        <CCardHeader>\r\n                            {label}\r\n                            <div className=\"card-header-actions\">\r\n                                <CButton\r\n                                    color=\"link\"\r\n                                    className=\"card-header-action btn-minimize\"\r\n                                    onClick={() => setCollapsed(!collapsed)}\r\n                                >\r\n                                    <CIcon name={collapsed ? 'cil-chevron-bottom' : 'cil-chevron-top'} />\r\n                                </CButton>\r\n                            </div>\r\n                        </CCardHeader>\r\n                        <CCollapse show={collapsed} timeout={1000}>\r\n                            <CCardBody>\r\n                                <CForm className=\"form-horizontal\">\r\n                                    <CFormGroup row>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormInput \r\n                                                label=\"Name*\" \r\n                                                name=\"name\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, templateEntity)} \r\n                                                value={templateEntity.name} \r\n                                                className={`form-control ${!templateEntity.name && touched && 'is-invalid'} ${templateEntity.name && 'is-valid'}`} \r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Business Area\" \r\n                                                name=\"business\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, templateEntity)} \r\n                                                value={templateEntity.business} \r\n                                                className={`form-control ${!templateEntity.business && touched && 'is-invalid'} ${templateEntity.business && 'is-valid'}`}\r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Incorporation Province/State\" \r\n                                                name=\"incorporation_state\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, templateEntity)} \r\n                                                value={templateEntity.incorporation_state} \r\n                                                className={`form-control ${!templateEntity.incorporation_state && touched && 'is-invalid'} ${templateEntity.incorporation_state && 'is-valid'}`}\r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Entity web address\" \r\n                                                name=\"url\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, templateEntity)} \r\n                                                value={templateEntity.url} \r\n                                                className={`form-control ${!templateEntity.url && touched && 'is-invalid'} ${templateEntity.url && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormInput \r\n                                                label=\"Registered Name*\" \r\n                                                name=\"commercial_name\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, templateEntity)} \r\n                                                value={templateEntity.commercial_name} \r\n                                                className={`form-control ${!templateEntity.commercial_name && touched && 'is-invalid'} ${templateEntity.commercial_name && 'is-valid'}`}\r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Incorporation Reg Number*\" \r\n                                                name=\"incorporation_number\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, templateEntity)} \r\n                                                value={templateEntity.incorporation_number} \r\n                                                className={`form-control ${!templateEntity.incorporation_number && touched && 'is-invalid'} ${templateEntity.incorporation_number && 'is-valid'}`}\r\n                                            />\r\n                                            <CountryCodeEnum \r\n                                                label=\"Incorporation Country Code*\" \r\n                                                name=\"incorporation_country_code\" \r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, templateEntity)} \r\n                                                value={templateEntity.incorporation_country_code} \r\n                                                className={`form-control ${!templateEntity.incorporation_country_code && touched && 'is-invalid'} ${templateEntity.incorporation_country_code && 'is-valid'}`}\r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Reg. Number\" \r\n                                                name=\"tax_reg_number\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, templateEntity)} \r\n                                                value={templateEntity.tax_reg_number} \r\n                                                className={`form-control ${!templateEntity.tax_reg_number && touched && 'is-invalid'} ${templateEntity.tax_reg_number && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <EntityLegalFormEnum \r\n                                                label=\"Incorporation Legal Form*\" \r\n                                                name=\"incorporation_legal_form\" \r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, templateEntity)} \r\n                                                value={templateEntity.incorporation_legal_form} \r\n                                                className={`form-control ${!templateEntity.incorporation_legal_form && touched && 'is-invalid'} ${templateEntity.incorporation_legal_form && 'is-valid'}`}\r\n                                            />\r\n                                            <FormDate \r\n                                                label=\"Incorporation Date*\" \r\n                                                name=\"incorporation_date\" \r\n                                                type=\"date\"\r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, templateEntity)} \r\n                                                value={templateEntity.incorporation_date} \r\n                                                className={`form-control ${!templateEntity.incorporation_date && touched && 'is-invalid'} ${templateEntity.incorporation_date && 'is-valid'}`}\r\n                                            />\r\n                                            <FormEmail \r\n                                                label=\"Email\" \r\n                                                name=\"email\" \r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, templateEntity)} \r\n                                                value={templateEntity.email} \r\n                                                className={`form-control ${!templateEntity.email && touched && 'is-invalid'} ${templateEntity.email && 'is-valid'}`}\r\n                                            />\r\n                                            <FormInput \r\n                                                label=\"Tax Number\" \r\n                                                name=\"tax_number\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, templateEntity)} \r\n                                                value={templateEntity.tax_number} \r\n                                                className={`form-control ${!templateEntity.tax_number && touched && 'is-invalid'} ${templateEntity.tax_number && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"6\">\r\n                                            <FormRadioText \r\n                                                label=\"Business Closed?\" \r\n                                                name=\"business_closed\" \r\n                                                width=\"6\" items={[\"Yes\", \"No\"]} \r\n                                                handleChange={handleChange}\r\n                                                value={templateEntity.business_closed}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <WrapperPhones \r\n                                                label=\"Phones*\"\r\n                                                name=\"phones\" \r\n                                                handlePhoneSave={handlePhoneSave}\r\n                                                handlePhoneDelete={handlePhoneDelete}\r\n                                                value={templateEntity.phones}\r\n                                            ></WrapperPhones>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <WrapperAddresses \r\n                                                label=\"Addresses*\"\r\n                                                name=\"addresses\" \r\n                                                handleAddressSave={handleAddressSave}\r\n                                                handleAddressDelete={handleAddressDelete}\r\n                                                value={templateEntity.addresses}\r\n                                            ></WrapperAddresses>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <WrapperDirectors \r\n                                                label=\"Directors*\" \r\n                                                name=\"director_id\" \r\n                                                alias=\"Director\"\r\n                                                partyType={partyType} \r\n                                                transRef={transRef} \r\n                                                OnSave={handleSaveDirector}\r\n                                                onDelete ={handleDeleteDirector}\r\n                                                value={templateEntity.director_id}\r\n                                            ></WrapperDirectors>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <FormTextArea \r\n                                                label=\"Comments\" \r\n                                                name=\"comments\" \r\n                                                placeholder=\"Enter ...\" \r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, templateEntity)} \r\n                                                value={templateEntity.comments} \r\n                                                className={`form-control ${!templateEntity.comments && touched && 'is-invalid'} ${templateEntity.comments && 'is-valid'}`} \r\n                                            />\r\n                                        </CCol>\r\n                                    </CFormGroup>\r\n                                </CForm>\r\n                                <FormActions \r\n                                    saveText=\"Save Entity\" \r\n                                    handleSaveClick={handleSaveClick} \r\n                                    handleCancelClick={handleCancelClick}\r\n                                ></FormActions>\r\n                            </CCardBody>\r\n                        </CCollapse>\r\n                    </CCard>\r\n                </CFade>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nexport default TransactionEntity;\r\n","import React from 'react';\r\nimport usersData from '../../views/users/UsersData';\r\nimport CombinedTable from './combined-table.component';\r\n\r\nconst fields = ['name','registered', 'role', 'status']\r\n\r\nclass SignatoryTable extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            transactionData : usersData\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { transactionData } = this.state;\r\n        // const { name } = this.props;\r\n        \r\n        return(\r\n            <CombinedTable name=\"Signatories Table\" fields={fields} tableData={transactionData} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default SignatoryTable;","\r\nvar transactionSignatory = {\r\n    \"is_primarySpecified\": false,\r\n    \"t_person\": '',\r\n    \"roleSpecified\": false\r\n  }\r\n\r\nexport default transactionSignatory;","import React from 'react';\r\nimport FormDynamicSelect from '../../form-inputs/form-dynamic-select.component';\r\n\r\nclass AccountPersonRoleEnum extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            options : [\r\n                {description: 'select'},\r\n                {value: 'D', description:'Director'},\r\n                {value: 'F', description:'Fudiciary Agent'},\r\n                {value: 'N', description:'Nominee'},\r\n                {value: 'S', description:'Shareholders'},\r\n                {value: 'Si', description:'Signatory'}\r\n            ]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { options } = this.state;\r\n        const { name, label, handleChange } = this.props;\r\n        \r\n        return(\r\n            <FormDynamicSelect label={label} name={name} options={options} handleChange={handleChange} />\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default AccountPersonRoleEnum;","import CIcon from '@coreui/icons-react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup,\r\n    CRow\r\n} from '@coreui/react';\r\nimport React from 'react';\r\nimport transactionSignatory from 'src/redux/transaction-signatory/transaction-signatory.format';\r\nimport FormActions from '../../form-inputs/form-actions.component';\r\nimport FormRadioText from '../../form-inputs/form-radio-text.component';\r\nimport AccountPersonRoleEnum from '../../goaml-enums/account-person-role-enum/account-person-role-enum.component';\r\nimport WrapperPersons from '../wrapper-person/wrapper-person.component';\r\n\r\nconst SignatoryTemplate = ({ name, handlePhoneSave, ...otherProps }) => {\r\n\r\n    const [collapsed, setCollapsed] = React.useState(false)\r\n    const [showElements, setShowElements] = React.useState(true)\r\n    const [componentState, setComponentState] = React.useState(transactionSignatory);\r\n\r\n    const [check, setCheck] = React.useState(false);\r\n    const onChecked = (e) => {\r\n        const { name, value } = e.target;\r\n        console.log({name, value})\r\n        setCheck({[name]: value})\r\n    }\r\n\r\n    /* const handleSaveSignatoryPerson = (txnRef, partyType, person) => {\r\n        setComponentState({ ...componentState, t_person: person });\r\n    };\r\n\r\n    const handleChange = event => {\r\n        const { name, value } = event.target;\r\n        setComponentState({ ...componentState, [name]: value });\r\n    }; */\r\n\r\n    const handleSaveClick = () => {\r\n        /* let signatory = {...componentState.t_person, role: componentState.role}\r\n        OnSave(transRef, partyType, signatory); */\r\n    }\r\n\r\n    const handleCancelClick = () => {\r\n        console.log(\"Hello: \", componentState);\r\n    }\r\n    \r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                <CCard>\r\n                    <CCardHeader>\r\n                    {name}\r\n                    <div className=\"card-header-actions\">\r\n                        <CButton \r\n                        color=\"link\" \r\n                        className=\"card-header-action btn-minimize\" \r\n                        onClick={() => setCollapsed(!collapsed)}\r\n                        >\r\n                        <CIcon name={collapsed ? 'cil-chevron-bottom':'cil-chevron-top'} />\r\n                        </CButton>\r\n                    </div>\r\n                    </CCardHeader>\r\n                    <CCollapse show={collapsed} timeout={1000}>\r\n                    <CCardBody>\r\n                        <CForm className=\"form-horizontal\">\r\n                            <CFormGroup row>\r\n                                <CCol xs=\"8\">\r\n                                    <FormRadioText \r\n                                        label=\"Is Primary?\" \r\n                                        name=\"is_primary\" \r\n                                        width=\"6\" \r\n                                        items={[\"Yes\", \"No\"]}\r\n                                        handleChange={onChecked}\r\n                                        defaultValue={componentState.is_primary}\r\n                                    />\r\n                                </CCol>\r\n                                <CCol xs=\"4\">\r\n                                    <AccountPersonRoleEnum \r\n                                    label=\"Role\" \r\n                                    name=\"role\"\r\n                                    handleChange={onChecked}\r\n                                    defaultValue={componentState.role}\r\n                                    ></AccountPersonRoleEnum>\r\n                                </CCol>\r\n                                <CCol xs=\"12\">\r\n                                    <WrapperPersons \r\n                                        name=\"person\" \r\n                                        label=\"Person\" \r\n                                        alias=\"Person\"\r\n                                        handleChange={onChecked}\r\n                                        defaultValue={componentState.person}\r\n                                    ></WrapperPersons>\r\n                                </CCol>\r\n                            </CFormGroup>\r\n                            <FormActions \r\n                                saveText=\"Save Signatory\" \r\n                                handleSaveClick={handleSaveClick} \r\n                                handleCancelClick={handleCancelClick}\r\n                            ></FormActions>\r\n                        </CForm>\r\n                    </CCardBody>\r\n                    </CCollapse>\r\n                </CCard>\r\n                </CFade>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nexport default SignatoryTemplate;","import React from 'react';\r\nimport SignatoryTable from '../../goaml-tables/table-signatory.component'\r\nimport SignatoryTemplate from '../template-signatory/template-signatory.components'\r\nimport {\r\n    CLabel,\r\n    CCard,\r\n    CCardBody,\r\n    CCol,\r\n    CFade,\r\n    CRow,\r\n    CNav,\r\n    CNavItem,\r\n    CNavLink,\r\n    CTabContent,\r\n    CTabPane,\r\n    CTabs,\r\n  } from '@coreui/react'\r\n\r\nconst WrapperSignatories = ({ name, label, ...otherProps }) => {\r\n    \r\n    let [showElements, setShowElements] = React.useState(true)\r\n    const tab1Title = `Add ${label}`;\r\n    const tab2Title = `${label} Table`;\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                {label ? (\r\n                    <CLabel htmlFor={label}>{label}</CLabel>\r\n                ) : null}\r\n                <div className=\"row\">\r\n                    <CCol xs=\"12\">\r\n                        <CTabs activeTab=\"Tab1\">\r\n                            <CNav variant=\"tabs\">\r\n                                <CNavItem>\r\n                                <CNavLink data-tab=\"Tab1\">\r\n                                    {tab1Title}\r\n                                </CNavLink>\r\n                                </CNavItem>\r\n                                <CNavItem>\r\n                                <CNavLink data-tab=\"Tab2\">\r\n                                    {tab2Title}\r\n                                </CNavLink>\r\n                                </CNavItem>\r\n                            </CNav>\r\n                            <CTabContent>\r\n                                <CTabPane data-tab=\"Tab1\">\r\n                                    <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                                        <CCard>\r\n                                            <CCardBody>\r\n                                            <CRow>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <SignatoryTemplate name=\"Add a Signatory\"></SignatoryTemplate>\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                            </CCardBody>\r\n                                        </CCard>\r\n                                    </CFade>\r\n                                </CTabPane>\r\n                                <CTabPane data-tab=\"Tab2\">\r\n                                    <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                                        <CCard>\r\n                                            <CCardBody>\r\n                                            <CRow>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <SignatoryTable name={name} />\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                            </CCardBody>\r\n                                        </CCard>\r\n                                    </CFade>\r\n                                </CTabPane>\r\n                            </CTabContent>\r\n                        </CTabs>\r\n                    </CCol>\r\n                </div>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nexport default WrapperSignatories;\r\n","import CIcon from '@coreui/icons-react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup,\r\n    CRow\r\n} from '@coreui/react';\r\nimport React from 'react';\r\nimport FormActions from 'src/components/form-inputs/form-actions.component';\r\nimport t_account from 'src/redux/transaction-account/transaction-account.format';\r\nimport FormAmount from '../../form-inputs/form-amount.component';\r\nimport FormDate from '../../form-inputs/form-date.component';\r\nimport FormInput from '../../form-inputs/form-input.component';\r\nimport FormRadioText from '../../form-inputs/form-radio-text.component';\r\nimport FormTextArea from '../../form-inputs/form-textarea-component';\r\nimport AccountTypeEnum from '../../goaml-enums/account-type-enum/account-type-enum.component';\r\nimport CurrenciesEnum from '../../goaml-enums/currencies-enum/currencies-enum.component';\r\nimport TransactionEntity from '../transaction-entity/transaction-entity.components';\r\nimport WrapperSignatories from '../wrapper-signatory/wrapper-signatory.component';\r\n\r\n\r\nconst TransactionAccount = ({ name, label, transRef, partyType, OnSave, ...otherProps }) => {\r\n\r\n    const [collapsed, setCollapsed] = React.useState(false)\r\n    const [showElements, setShowElements] = React.useState(true)\r\n    let radioItems = [\"Yes\", \"No\"];\r\n    const [stateAccount, setStateAccount] = React.useState(t_account);\r\n\r\n    const [touched, setTouched] = React.useState(false);\r\n    const onFocus = () => setTouched(true)\r\n    const onBlur = () => setTouched(false)\r\n\r\n    const [showError, setShowError] = React.useState({ isEmpty: false, value: '' });\r\n\r\n    const checkInputs = (e, inputState) => {\r\n        let error = false;\r\n        let val = {};\r\n        let myValidation;\r\n        if (typeof myValidation === 'string' || 'integer' || 'boolean') {\r\n            for (const [key, value] of Object.entries(inputState)) {\r\n                if (e.target.name === key) {\r\n                    value === null ? error = true : error = false;\r\n                    val = key;\r\n                }\r\n            }\r\n        }\r\n        setShowError({\r\n            isEmpty: error,\r\n            value: val\r\n        });\r\n    }\r\n\r\n    console.log('error', showError)\r\n\r\n    const handleChange = event => {\r\n        const { name, value } = event.target;\r\n        setStateAccount({ ...stateAccount, [name]: value });\r\n    };\r\n\r\n    const handleSaveClick = () => {\r\n        if (!stateAccount.account || !stateAccount.iban || !stateAccount.non_banking_institution || !stateAccount.currency_code || !stateAccount.opened ||\r\n            !stateAccount.account_name || !stateAccount.institution_name || !stateAccount.swift || !stateAccount.balance || !stateAccount.closed ||\r\n            !stateAccount.personal_account_type || !stateAccount.branch || !stateAccount.date_balance || !stateAccount.client_number ||\r\n            !stateAccount.beneficiary || !stateAccount.beneficiary_comment) {\r\n            alert('please fill this field')\r\n        }\r\n        OnSave(transRef, partyType, stateAccount);\r\n    }\r\n\r\n    const handleCancelClick = () => {\r\n        console.log(\"Hello: \", stateAccount);\r\n    }\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                    <CCard>\r\n                        <CCardHeader>\r\n                            {label}\r\n                            <div className=\"card-header-actions\">\r\n                                <CButton\r\n                                    color=\"link\"\r\n                                    className=\"card-header-action btn-minimize\"\r\n                                    onClick={() => setCollapsed(!collapsed)}\r\n                                >\r\n                                    <CIcon name={collapsed ? 'cil-chevron-bottom' : 'cil-chevron-top'} />\r\n                                </CButton>\r\n                            </div>\r\n                        </CCardHeader>\r\n                        <CCollapse show={collapsed} timeout={1000}>\r\n                            <CCardBody>\r\n                                <CForm className=\"form-horizontal\">\r\n                                    <CFormGroup row>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormInput\r\n                                                label=\"Account*\"\r\n                                                name=\"account\"\r\n                                                placeholder=\"Enter ...\"\r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, stateAccount)}\r\n                                                value={stateAccount.account}\r\n                                                className={`form-control ${!stateAccount.account && touched && 'is-invalid'} ${stateAccount.account && 'is-valid'}`}\r\n                                            />\r\n                                            <FormInput\r\n                                                label=\"Iban\"\r\n                                                name=\"iban\"\r\n                                                placeholder=\"Enter ...\"\r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, stateAccount)}\r\n                                                value={stateAccount.iban}\r\n                                                className={`form-control ${!stateAccount.iban && touched && 'is-invalid'} ${stateAccount.iban && 'is-valid'}`}\r\n                                            />\r\n                                            <FormRadioText\r\n                                                label=\"Non Banking Institution?\"\r\n                                                name=\"non_banking_institution\"\r\n                                                width=\"6\"\r\n                                                items={[\"Yes\", \"No\"]}\r\n                                                value={stateAccount.non_banking_institution}\r\n                                                handleChange={handleChange}\r\n                                            />\r\n                                            <CurrenciesEnum\r\n                                                label=\"Currency Code*\"\r\n                                                name=\"currency_code\"\r\n                                                value={stateAccount.currency_code}\r\n                                                handleChange={handleChange}\r\n                                            />\r\n                                            <FormDate\r\n                                                label=\"Opened*\"\r\n                                                name=\"Opened\"\r\n                                                value={stateAccount.opened}\r\n                                                handleChange={handleChange}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormInput\r\n                                                label=\"Account name\"\r\n                                                name=\"account_name\"\r\n                                                placeholder=\"Enter ...\"\r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, stateAccount)}\r\n                                                value={stateAccount.account_name}\r\n                                                className={`form-control ${!stateAccount.account_name && touched && 'is-invalid'} ${stateAccount.account_name && 'is-valid'}`}\r\n                                            />\r\n                                            <FormInput\r\n                                                label=\"Institution Name*\"\r\n                                                name=\"institution_name\"\r\n                                                placeholder=\"Enter ...\"\r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, stateAccount)}\r\n                                                value={stateAccount.institution_name}\r\n                                                className={`form-control ${!stateAccount.institution_name && touched && 'is-invalid'} ${stateAccount.institution_name && 'is-valid'}`}\r\n                                            />\r\n                                            <FormRadioText\r\n                                                label=\"Code or Swift?\"\r\n                                                name=\"swift\"\r\n                                                width=\"6\"\r\n                                                items={[\"Institution Code\", \"Swift\"]}\r\n                                                handleChange={handleChange}\r\n                                                value={stateAccount.swift}\r\n                                            />\r\n                                            <FormAmount\r\n                                                label=\"Balance*\"\r\n                                                name=\"balance\"\r\n                                                placeholder=\"Enter ...\"\r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, stateAccount)}\r\n                                                value={stateAccount.balance}\r\n                                                className={`form-control ${!stateAccount.balance && touched && 'is-invalid'} ${stateAccount.balance && 'is-valid'}`}\r\n                                            />\r\n                                            <FormDate\r\n                                                label=\"Closed\"\r\n                                                name=\"closed\"\r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, stateAccount)}\r\n                                                value={stateAccount.closed}\r\n                                                className={`form-control ${!stateAccount.closedt && touched && 'is-invalid'} ${stateAccount.closed && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <AccountTypeEnum\r\n                                                label=\"Account Type*\"\r\n                                                name=\"personal_account-type\"\r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, stateAccount)}\r\n                                                value={stateAccount.personal_account_type}\r\n                                                className={`form-control ${!stateAccount.personal_account_type && touched && 'is-invalid'} ${stateAccount.personal_account_type && 'is-valid'}`}\r\n                                            />\r\n                                            <FormInput\r\n                                                label=\"Branch Code*\"\r\n                                                name=\"branch\"\r\n                                                placeholder=\"Enter ...\"\r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, stateAccount)}\r\n                                                value={stateAccount.branch}\r\n                                                className={`form-control ${!stateAccount.branch && touched && 'is-invalid'} ${stateAccount.branch && 'is-valid'}`}\r\n                                            />\r\n                                            <FormInput\r\n                                                label=\"Role*\"\r\n                                                name=\"role\"\r\n                                                placeholder=\"Enter ...\"\r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, stateAccount)}\r\n                                                value={stateAccount.role}\r\n                                                className={`form-control ${!stateAccount.role && touched && 'is-invalid'} ${stateAccount.role && 'is-valid'}`}\r\n                                            />\r\n                                            <FormDate\r\n                                                label=\"Date of Balance*\"\r\n                                                type=\"date\"\r\n                                                name=\"date_balance\"\r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, stateAccount)}\r\n                                                value={stateAccount.date_balance}\r\n                                                className={`form-control ${!stateAccount.date_balance && touched && 'is-invalid'} ${stateAccount.date_balance && 'is-valid'}`}\r\n                                            />\r\n                                            <FormInput\r\n                                                label=\"Client Number\"\r\n                                                type=\"number\"\r\n                                                name=\"client_number\"\r\n                                                placeholder=\"Enter ...\"\r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, stateAccount)}\r\n                                                value={stateAccount.client_number}\r\n                                                className={`form-control ${!stateAccount.client_number && touched && 'is-invalid'} ${stateAccount.client_number && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormInput\r\n                                                label=\"Beneficiary\"\r\n                                                name=\"beneficiary\"\r\n                                                placeholder=\"Enter ...\"\r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, stateAccount)}\r\n                                                value={stateAccount.beneficiary}\r\n                                                className={`form-control ${!stateAccount.beneficiary && touched && 'is-invalid'} ${stateAccount.beneficiary && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"8\">\r\n                                            <FormTextArea\r\n                                                label=\"Beneficiary Comment\"\r\n                                                name=\"beneficiary_comment\"\r\n                                                placeholder=\"Enter ...\"\r\n                                                handleChange={handleChange}\r\n                                                onBlur={onBlur}\r\n                                                onFocus={onFocus}\r\n                                                onKeyUp={(e) => checkInputs(e, stateAccount)}\r\n                                                value={stateAccount.beneficiary_comment}\r\n                                                className={`form-control ${!stateAccount.beneficiary_comment && touched && 'is-invalid'} ${stateAccount.beneficiary_comment && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <TransactionEntity\r\n                                                label=\"Transaction Entity\"\r\n                                                name=\"transaction_entity\"\r\n                                                handleChange={handleChange}\r\n                                                value={stateAccount.transaction_entity}\r\n                                            ></TransactionEntity>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <WrapperSignatories\r\n                                                name=\"Signatories\"\r\n                                                label=\"signatory\"\r\n                                                handleChange={handleChange}\r\n                                                value={stateAccount.signatory}\r\n                                                className=\"pb-30\"\r\n                                            ></WrapperSignatories>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <FormTextArea\r\n                                                label=\"Comments\"\r\n                                                name=\"comments\"\r\n                                                placeholder=\"Enter ...\"\r\n                                                handleChange={handleChange}\r\n                                                value={stateAccount.comments}\r\n                                            />\r\n                                        </CCol>\r\n                                    </CFormGroup>\r\n                                </CForm>\r\n                                <FormActions\r\n                                    saveText=\"Save Transaction Account\"\r\n                                    handleSaveClick={handleSaveClick}\r\n                                    handleCancelClick={handleCancelClick}></FormActions>\r\n                            </CCardBody>\r\n                        </CCollapse>\r\n                    </CCard>\r\n                </CFade>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nexport default TransactionAccount;","const TransactionsPartyTypes = {\r\n  FROM: 'FROM',\r\n  TO: 'TO',\r\n  MY_CLIENT: 'MY_CLIENT',\r\n  PERSON_CLIENT: 'PERSON_CLIENT',\r\n  ACCOUNT_CLIENT: 'ACCOUNT_CLIENT',\r\n  ENTITY_CLIENT: 'ENTITY_CLIENT',\r\n  NOT_MY_CLIENT: 'NOT_MY_CLIENT',\r\n  PERSON_NOT_CLIENT: 'PERSON_NOT_CLIENT',\r\n  ACCOUNT_NOT_CLIENT: 'ACCOUNT_NOT_CLIENT',\r\n  ENTITY_NOT_CLIENT: 'ENTITY_NOT_CLIENT'\r\n};\r\n\r\nexport default TransactionsPartyTypes;","var t_from = {\r\n    \"from_funds_code\": \"\",\r\n    \"from_funds_comment\": \"\",\r\n    \"from_foreign_currency\": {\r\n        \"foreign_currency_code\": '',\r\n        \"foreign_amount\": '',\r\n        \"foreign_exchange_rate\": '',\r\n    },\r\n    \"t_conductor\": null,\r\n    \"from_account\": null,\r\n    \"from_person\": null,\r\n    \"from_entity\": null,\r\n    \"from_country\": \"\"\r\n}\r\n\r\nexport default t_from;","import CIcon from '@coreui/icons-react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup,\r\n    CRow\r\n} from '@coreui/react';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport FormAmount from 'src/components/form-inputs/form-amount.component';\r\nimport t_from_my_client from 'src/redux/transaction-party/from-my-client.format';\r\nimport { setReport } from '../../../redux/report/report.actions';\r\nimport { selectReport } from '../../../redux/report/report.selectors';\r\nimport FormActions from '../../form-inputs/form-actions.component';\r\nimport FormInput from '../../form-inputs/form-input.component';\r\nimport CountryCodeEnum from '../../goaml-enums/country-code-enum/country-code-enum.component';\r\nimport CurrenciesEnum from '../../goaml-enums/currencies-enum/currencies-enum.component';\r\nimport FundsTypeEnum from '../../goaml-enums/funds-type-enum/funds-type-enum.component';\r\nimport PartyTypeEnum from '../../goaml-enums/party-type-enum/party-type-enum.components';\r\nimport WrapperPersons from '../wrapper-person/wrapper-person.component';\r\nimport TransactionAccount from '../transaction-account/transaction-account.components';\r\nimport TransactionEntity from '../transaction-entity/transaction-entity.components';\r\nimport TransactionsPartyTypes from './transaction-party.types'\r\n\r\nimport t_from from '../../../redux/transaction-party/from.format'\r\n\r\nconst TFrom = ({ name, transRef, clientType, partyType, handleSavePartyInfo, report, ...otherProps }) => {\r\n\r\n    const [collapsed, setCollapsed] = React.useState(true)\r\n    const [touched, setTouched] = React.useState(false);\r\n    const onFocus = () => setTouched(true)\r\n    const onBlur = () => setTouched(false)\r\n\r\n    const [collapseMulti, setCollapseMulti] = React.useState([false, false, false, false, false, false])\r\n    let [showElements, setShowElements] = React.useState(true)\r\n    const [transpartyInfo, setTranspartyInfo] = React.useState(t_from)\r\n\r\n    const [showError, setShowError] = React.useState({ isEmpty: false, value: '' });\r\n\r\n    const checkInputs = (e, inputState) => {\r\n        let error = false;\r\n        let val = {};\r\n        let myValidation;\r\n        if (typeof myValidation === 'string' || 'integer' || 'boolean') {\r\n            for (const [key, value] of Object.entries(inputState)) {\r\n                if (e.target.name === key) {\r\n                    value === null ? error = true : error = false;\r\n                    val = key;\r\n                }\r\n            }\r\n        }\r\n        setShowError({\r\n            isEmpty: error,\r\n            value: val\r\n        });\r\n    }\r\n\r\n    console.log('error', showError)\r\n\r\n    const toggleMulti = (type) => {\r\n        let newCollapse = collapseMulti.slice()\r\n        switch (type) {\r\n            case \"person-conductor\":\r\n                newCollapse[0] = !collapseMulti[0];\r\n                newCollapse[1] = false;\r\n                newCollapse[2] = false;\r\n                newCollapse[3] = false;\r\n                break;\r\n            case \"not-person-client\":\r\n                newCollapse[1] = !collapseMulti[1];\r\n                newCollapse[0] = false;\r\n                newCollapse[2] = false;\r\n                newCollapse[3] = false;\r\n                break;\r\n            case \"not-account-client\":\r\n                newCollapse[2] = !collapseMulti[2];\r\n                newCollapse[0] = false;\r\n                newCollapse[1] = false;\r\n                newCollapse[3] = false;\r\n                break;\r\n            case \"not-entity-client\":\r\n                newCollapse[3] = !collapseMulti[3];\r\n                newCollapse[0] = false;\r\n                newCollapse[1] = false;\r\n                newCollapse[2] = false;\r\n                break;\r\n            default:\r\n        }\r\n        setCollapseMulti(newCollapse)\r\n    }\r\n\r\n    const handleChange = event => {\r\n        const { name, value } = event.target;\r\n        if (name == \"foreign_currency_code\" || name == \"foreign_exchange_rate\" || name == \"foreign_amount\")\r\n            setTranspartyInfo({ ...transpartyInfo, from_foreign_currency: { ...transpartyInfo.from_foreign_currency, [name]: value } });\r\n        else\r\n            setTranspartyInfo({ ...transpartyInfo, [name]: value });\r\n    };\r\n\r\n    const handleSaveConductor = (conductor) => {\r\n        transpartyInfo.t_conductor = conductor;\r\n        setTranspartyInfo({ ...transpartyInfo });\r\n        handleSaveClick();\r\n    }\r\n\r\n    const handleSaveEntity = (entity) => {\r\n        transpartyInfo.from_entity = entity;\r\n        setTranspartyInfo({ ...transpartyInfo });\r\n        handleSaveClick();\r\n    }\r\n\r\n    const handleSaveAccount = (account) => {\r\n        transpartyInfo.from_account = account;\r\n        setTranspartyInfo({ ...transpartyInfo });\r\n        handleSaveClick();\r\n    }\r\n\r\n    const handleSavePerson = (person) => {\r\n        transpartyInfo.from_person = person;\r\n        setTranspartyInfo({ ...transpartyInfo });\r\n        handleSaveClick();\r\n    }\r\n\r\n    const handleSaveClick = () => {\r\n        if (!transpartyInfo.from_funds_code || !transpartyInfo.from_funds_comment || !transpartyInfo.from_country\r\n            || !transpartyInfo.from_foreign_currency.foreign_currency_code) {\r\n            alert('please complete this field')\r\n        }\r\n        handleSavePartyInfo(transpartyInfo);\r\n    }\r\n\r\n    const handleCancelClick = () => {\r\n        console.log(\"Hello: \", report);\r\n    }\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                    <CCard>\r\n                        <CCardHeader>\r\n                            {name}\r\n                            <div className=\"card-header-actions\">\r\n                                <CButton\r\n                                    color=\"link\"\r\n                                    className=\"card-header-action btn-minimize\"\r\n                                    onClick={() => setCollapsed(!collapsed)}\r\n                                >\r\n                                    <CIcon name={collapsed ? 'cil-chevron-bottom' : 'cil-chevron-top'} />\r\n                                </CButton>\r\n                            </div>\r\n                        </CCardHeader>\r\n                        <CCollapse show={collapsed} timeout={1000}>\r\n                            <CCardBody>\r\n                                <CForm className=\"form-horizontal\">\r\n                                    <CFormGroup row>\r\n                                        <CCol xs=\"6\">\r\n                                            <FundsTypeEnum\r\n                                                label=\"Funds Code*\"\r\n                                                name=\"from_funds_code\"\r\n                                                handleChange={handleChange}\r\n                                                value={transpartyInfo.from_funds_code}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                className={`from-control ${!transpartyInfo.from_funds_code && touched && 'is-invalid'} ${transpartyInfo.from_funds_code && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"6\">\r\n                                            <FormInput\r\n                                                label=\"Funds Comment\"\r\n                                                name=\"from_funds_comment\"\r\n                                                placeholder=\"Enter ...\"\r\n                                                handleChange={handleChange}\r\n                                                value={transpartyInfo.from_funds_comment}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                className={`from-control ${!transpartyInfo.from_funds_comment && touched && 'is-invalid'} ${transpartyInfo.from_funds_comment && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"6\">\r\n                                            <CountryCodeEnum\r\n                                                handleChange={handleChange}\r\n                                                label=\"Country*\"\r\n                                                name=\"from_country\"\r\n                                                value={transpartyInfo.from_country}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                className={`from-control ${!transpartyInfo.from_country && touched && 'is-invalid'} ${transpartyInfo.from_country && touched && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"6\">\r\n                                            \r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <CurrenciesEnum\r\n                                                handleChange={handleChange}\r\n                                                label=\"Currency Code*\"\r\n                                                name=\"foreign_currency_code\"\r\n                                                value={transpartyInfo.from_foreign_currency.foreign_currency_code}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                className={`from-control ${!transpartyInfo.from_foreign_currency.foreign_currency_code && touched && 'is-invalid'} ${transpartyInfo.from_foreign_currency.foreign_currency_code && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormAmount\r\n                                                handleChange={handleChange}\r\n                                                label=\"Exchange Rate*\"\r\n                                                name=\"foreign_exchange_rate\"\r\n                                                value={transpartyInfo.from_foreign_currency.foreign_exchange_rate}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                className={`from-control ${!transpartyInfo.from_foreign_currency.foreign_exchange_rate && touched && 'is-invalid'} ${transpartyInfo.from_foreign_currency.foreign_exchange_rate && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormAmount\r\n                                                handleChange={handleChange}\r\n                                                label=\"Amount*\"\r\n                                                name=\"foreign_amount\"\r\n                                                value={transpartyInfo.from_foreign_currency.foreign_amount}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                className={`from-control ${!transpartyInfo.from_foreign_currency.foreign_amount && touched && 'is-invalid'} ${transpartyInfo.from_foreign_currency.foreign_amount && 'is-valid'} `}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <p>\r\n                                                <button type=\"button\" onClick={() => { toggleMulti('person-conductor') }}\r\n                                                    class=\"btn btn-link\">Add Conductor</button>\r\n                                            </p>\r\n                                            <row>\r\n                                                <CCollapse show={collapseMulti[0]}>\r\n                                                    <WrapperPersons value={transpartyInfo.t_conductor} OnSave={handleSaveConductor} transRef={transRef} partyType={partyType} label=\"Add a Conductor\" name=\"conductor\" alias=\"Conductor\" ></WrapperPersons>\r\n                                                </CCollapse>\r\n                                            </row>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <p>\r\n                                                <CButton color=\"primary\" onClick={() => { toggleMulti('not-person-client') }}\r\n                                                    class=\"btn btn-link\">Add Person</CButton>{' '}\r\n                                                <CButton color=\"primary\" onClick={() => { toggleMulti('not-account-client') }}\r\n                                                    class=\"btn btn-link\">Add Account</CButton>{' '}\r\n                                                <CButton color=\"primary\" onClick={() => { toggleMulti('not-entity-client') }}\r\n                                                    class=\"btn btn-link\">Add Entity</CButton>{' '}\r\n                                            </p>\r\n                                            <CRow>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <CCollapse show={collapseMulti[1]}>\r\n                                                        <WrapperPersons value={transpartyInfo.from_person} OnSave={handleSavePerson} partyType={TransactionsPartyTypes.PERSON_NOT_CLIENT} transRef={transRef} label=\"Transaction Person\" name=\"Person-NC\" alias=\"Person\"></WrapperPersons>\r\n                                                    </CCollapse>\r\n                                                </CCol>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <CCollapse show={collapseMulti[2]}>\r\n                                                        <TransactionAccount value={transpartyInfo.from_account} OnSave={handleSaveAccount} partyType={TransactionsPartyTypes.ACCOUNT_NOT_CLIENT} transRef={transRef} name=\"TransactionAccount-NC\" label=\"Transaction Account\"></TransactionAccount>\r\n                                                    </CCollapse>\r\n                                                </CCol>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <CCollapse show={collapseMulti[3]}>\r\n                                                        <TransactionEntity value={transpartyInfo.from_entity} OnSave={handleSaveEntity} partyType={TransactionsPartyTypes.ENTITY_NOT_CLIENT} transRef={transRef} name=\"TransactionEntity-NC\" label=\"Transaction Entity\"></TransactionEntity>\r\n                                                    </CCollapse>\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                        </CCol>\r\n                                    </CFormGroup>\r\n                                </CForm>\r\n                                <FormActions\r\n                                    saveText=\"Save Party Details\"\r\n                                    handleSaveClick={handleSaveClick}\r\n                                    handleCancelClick={handleCancelClick}>\r\n                                </FormActions>\r\n                            </CCardBody>\r\n                        </CCollapse>\r\n                    </CCard>\r\n                </CFade>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    report: selectReport(state)\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(TFrom);\r\n","import CIcon from '@coreui/icons-react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup,\r\n    CRow\r\n} from '@coreui/react';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport FormAmount from 'src/components/form-inputs/form-amount.component';\r\nimport { setReport } from '../../../redux/report/report.actions';\r\nimport { selectReport } from '../../../redux/report/report.selectors';\r\nimport FormActions from '../../form-inputs/form-actions.component';\r\nimport FormInput from '../../form-inputs/form-input.component';\r\nimport CountryCodeEnum from '../../goaml-enums/country-code-enum/country-code-enum.component';\r\nimport CurrenciesEnum from '../../goaml-enums/currencies-enum/currencies-enum.component';\r\nimport FundsTypeEnum from '../../goaml-enums/funds-type-enum/funds-type-enum.component';\r\nimport WrapperPersons from '../wrapper-person/wrapper-person.component';\r\nimport TransactionAccount from '../transaction-account/transaction-account.components';\r\nimport TransactionEntity from '../transaction-entity/transaction-entity.components';\r\nimport TransactionsPartyTypes from './transaction-party.types'\r\n\r\nimport t_from_my_client from '../../../redux/transaction-party/from-my-client.format'\r\n\r\nconst TFromMyClient = ({ name, transRef, clientType, partyType, handleSavePartyInfo, report, ...otherProps }) => {\r\n\r\n    const [collapsed, setCollapsed] = React.useState(true)\r\n    const [touched, setTouched] = React.useState(false);\r\n    const onFocus = () => setTouched(true)\r\n    const onBlur = () => setTouched(false)\r\n\r\n    const [collapseMulti, setCollapseMulti] = React.useState([false, false, false, false, false, false])\r\n    let [showElements, setShowElements] = React.useState(true)\r\n    const [transpartyInfo, setTranspartyInfo] = React.useState(t_from_my_client)\r\n\r\n    const [showError, setShowError] = React.useState({ isEmpty: false, value: '' });\r\n\r\n    const checkInputs = (e, inputState) => {\r\n        let error = false;\r\n        let val = {};\r\n        let myValidation;\r\n        if (typeof myValidation === 'string' || 'integer' || 'boolean') {\r\n            for (const [key, value] of Object.entries(inputState)) {\r\n                if (e.target.name === key) {\r\n                    value === null ? error = true : error = false;\r\n                    val = key;\r\n                }\r\n            }\r\n        }\r\n        setShowError({\r\n            isEmpty: error,\r\n            value: val\r\n        });\r\n    }\r\n\r\n    console.log('error', showError)\r\n\r\n    const toggleMulti = (type) => {\r\n        let newCollapse = collapseMulti.slice()\r\n        switch (type) {\r\n            case \"person-conductor\":\r\n                newCollapse[0] = !collapseMulti[0];\r\n                newCollapse[1] = false;\r\n                newCollapse[2] = false;\r\n                newCollapse[3] = false;\r\n                break;\r\n            case \"person-client\":\r\n                newCollapse[1] = !collapseMulti[1];\r\n                newCollapse[0] = false;\r\n                newCollapse[2] = false;\r\n                newCollapse[3] = false;\r\n                break;\r\n            case \"account-client\":\r\n                newCollapse[2] = !collapseMulti[2];\r\n                newCollapse[0] = false;\r\n                newCollapse[1] = false;\r\n                newCollapse[3] = false;\r\n                break;\r\n            case \"entity-client\":\r\n                newCollapse[3] = !collapseMulti[3];\r\n                newCollapse[0] = false;\r\n                newCollapse[1] = false;\r\n                newCollapse[2] = false;\r\n                break;\r\n            default:\r\n        }\r\n        setCollapseMulti(newCollapse)\r\n    }\r\n\r\n    const handleChange = event => {\r\n        const { name, value } = event.target;\r\n        if (name == \"foreign_currency_code\" || name == \"foreign_exchange_rate\" || name == \"foreign_amount\")\r\n            setTranspartyInfo({ ...transpartyInfo, from_foreign_currency: { ...transpartyInfo.from_foreign_currency, [name]: value } });\r\n        else\r\n            setTranspartyInfo({ ...transpartyInfo, [name]: value });\r\n    };\r\n\r\n    const handleSaveConductor = (conductor) => {\r\n        transpartyInfo.t_conductor = conductor;\r\n        setTranspartyInfo({ ...transpartyInfo });\r\n        handleSaveClick();\r\n    }\r\n\r\n    const handleSaveEntity = (entity) => {\r\n        transpartyInfo.from_entity = entity;\r\n        setTranspartyInfo({ ...transpartyInfo });\r\n        handleSaveClick();\r\n    }\r\n\r\n    const handleSaveAccount = (account) => {\r\n        transpartyInfo.from_account = account;\r\n        setTranspartyInfo({ ...transpartyInfo });\r\n        handleSaveClick();\r\n    }\r\n\r\n    const handleSavePerson = (person) => {\r\n        transpartyInfo.from_person = person;\r\n        setTranspartyInfo({ ...transpartyInfo });\r\n        handleSaveClick();\r\n    }\r\n\r\n    const handleSaveClick = () => {\r\n        if (!transpartyInfo.from_funds_code || !transpartyInfo.from_funds_comment || !transpartyInfo.from_country\r\n            || !transpartyInfo.from_foreign_currency.foreign_currency_code) {\r\n            alert('please complete this field')\r\n        }\r\n        handleSavePartyInfo(transpartyInfo);\r\n    }\r\n\r\n    const handleCancelClick = () => {\r\n        console.log(\"Hello: \", report);\r\n    }\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                    <CCard>\r\n                        <CCardHeader>\r\n                            {name}\r\n                            <div className=\"card-header-actions\">\r\n                                <CButton\r\n                                    color=\"link\"\r\n                                    className=\"card-header-action btn-minimize\"\r\n                                    onClick={() => setCollapsed(!collapsed)}\r\n                                >\r\n                                    <CIcon name={collapsed ? 'cil-chevron-bottom' : 'cil-chevron-top'} />\r\n                                </CButton>\r\n                            </div>\r\n                        </CCardHeader>\r\n                        <CCollapse show={collapsed} timeout={1000}>\r\n                            <CCardBody>\r\n                                <CForm className=\"form-horizontal\">\r\n                                    <CFormGroup row>\r\n                                        <CCol xs=\"6\">\r\n                                            <FundsTypeEnum\r\n                                                label=\"Funds Code*\"\r\n                                                name=\"from_funds_code\"\r\n                                                handleChange={handleChange}\r\n                                                value={transpartyInfo.from_funds_code}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                className={`from-control ${!transpartyInfo.from_funds_code && touched && 'is-invalid'} ${transpartyInfo.from_funds_code && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"6\">\r\n                                            <FormInput\r\n                                                label=\"Funds Comment\"\r\n                                                name=\"from_funds_comment\"\r\n                                                placeholder=\"Enter ...\"\r\n                                                handleChange={handleChange}\r\n                                                value={transpartyInfo.from_funds_comment}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                className={`from-control ${!transpartyInfo.from_funds_comment && touched && 'is-invalid'} ${transpartyInfo.from_funds_comment && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"6\">\r\n                                            <CountryCodeEnum\r\n                                                handleChange={handleChange}\r\n                                                label=\"Country*\"\r\n                                                name=\"from_country\"\r\n                                                value={transpartyInfo.from_country}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                className={`from-control ${!transpartyInfo.from_country && touched && 'is-invalid'} ${transpartyInfo.from_country && touched && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"6\">\r\n                                            \r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <CurrenciesEnum\r\n                                                handleChange={handleChange}\r\n                                                label=\"Currency Code*\"\r\n                                                name=\"foreign_currency_code\"\r\n                                                value={transpartyInfo.from_foreign_currency.foreign_currency_code}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                className={`from-control ${!transpartyInfo.from_foreign_currency.foreign_currency_code && touched && 'is-invalid'} ${transpartyInfo.from_foreign_currency.foreign_currency_code && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormAmount\r\n                                                handleChange={handleChange}\r\n                                                label=\"Exchange Rate*\"\r\n                                                name=\"foreign_exchange_rate\"\r\n                                                value={transpartyInfo.from_foreign_currency.foreign_exchange_rate}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                className={`from-control ${!transpartyInfo.from_foreign_currency.foreign_exchange_rate && touched && 'is-invalid'} ${transpartyInfo.from_foreign_currency.foreign_exchange_rate && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormAmount\r\n                                                handleChange={handleChange}\r\n                                                label=\"Amount*\"\r\n                                                name=\"foreign_amount\"\r\n                                                value={transpartyInfo.from_foreign_currency.foreign_amount}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                className={`from-control ${!transpartyInfo.from_foreign_currency.foreign_amount && touched && 'is-invalid'} ${transpartyInfo.from_foreign_currency.foreign_amount && 'is-valid'} `}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <p>\r\n                                                <button type=\"button\" onClick={() => { toggleMulti('person-conductor') }}\r\n                                                    class=\"btn btn-link\">Add Conductor</button>\r\n                                            </p>\r\n                                            <row>\r\n                                                <CCollapse show={collapseMulti[0]}>\r\n                                                    <WrapperPersons value={transpartyInfo.t_conductor} OnSave={handleSaveConductor} transRef={transRef} partyType={partyType} label=\"Add a Conductor\" name=\"conductor\" alias=\"Conductor\" ></WrapperPersons>\r\n                                                </CCollapse>\r\n                                            </row>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <p>\r\n                                                <CButton color=\"primary\" onClick={() => { toggleMulti('person-client') }}\r\n                                                    class=\"btn btn-link\">Add Person</CButton>{' '}\r\n                                                <CButton color=\"primary\" onClick={() => { toggleMulti('account-client') }}\r\n                                                    class=\"btn btn-link\">Add Account</CButton>{' '}\r\n                                                <CButton color=\"primary\" onClick={() => { toggleMulti('entity-client') }}\r\n                                                    class=\"btn btn-link\">Add Entity</CButton>{' '}\r\n                                            </p>\r\n                                            <CRow>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <CCollapse show={collapseMulti[1]}>\r\n                                                        <WrapperPersons value={transpartyInfo.from_person} isDeletable={false} OnSave={handleSavePerson} partyType={TransactionsPartyTypes.PERSON_CLIENT} transRef={transRef} label=\"Transaction Person\" name=\"Person\" alias=\"Person\"></WrapperPersons>\r\n                                                    </CCollapse>\r\n                                                </CCol>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <CCollapse show={collapseMulti[2]}>\r\n                                                        <TransactionAccount value={transpartyInfo.from_account} OnSave={handleSaveAccount} partyType={TransactionsPartyTypes.ACCOUNT_CLIENT} transRef={transRef} name=\"TransactionAccount\" label=\"Transaction Account\"></TransactionAccount>\r\n                                                    </CCollapse>\r\n                                                </CCol>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <CCollapse show={collapseMulti[3]}>\r\n                                                        <TransactionEntity value={transpartyInfo.from_entity} OnSave={handleSaveEntity} partyType={TransactionsPartyTypes.ENTITY_CLIENT} transRef={transRef} name=\"TransactionEntity\" label=\"Transaction Entity\"></TransactionEntity>\r\n                                                    </CCollapse>\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                        </CCol>\r\n                                        {/* <CCol className=\"col-sm-12\">\r\n                                            <CRow>\r\n                                                {(from == TransactionsPartyTypes.ACCOUNT_CLIENT\r\n                                                    || from == TransactionsPartyTypes.PERSON_CLIENT\r\n                                                    || from == TransactionsPartyTypes.ENTITY_CLIENT) ?\r\n                                                    <TFromMyClient transRef={transRef} clientType={from} partyType={TransactionsPartyTypes.MY_CLIENT} handleSavePartyInfo={SaveTransactionFromMyClient} name=\"Expand and Fill From My Clent Overview\" />\r\n                                                    :\r\n                                                    <TFrom transRef={transRef} clientType={from} partyType={TransactionsPartyTypes.MY_CLIENT} handleSavePartyInfo={SaveTransactionFrom} name=\"Expand and Fill From Clent Overview\" />\r\n                                                }\r\n                                            </CRow>\r\n                                        </CCol> */}\r\n                                    </CFormGroup>\r\n                                </CForm>\r\n                                <FormActions\r\n                                    saveText=\"Save Party Details\"\r\n                                    handleSaveClick={handleSaveClick}\r\n                                    handleCancelClick={handleCancelClick}>\r\n                                </FormActions>\r\n                            </CCardBody>\r\n                        </CCollapse>\r\n                    </CCard>\r\n                </CFade>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    report: selectReport(state)\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(TFromMyClient);","var t_to = {\r\n    \"to_funds_code\": \"\",\r\n    \"to_funds_comment\": \"\",\r\n    \"to_foreign_currency\": {\r\n        \"foreign_currency_code\": '',\r\n        \"foreign_amount\": '',\r\n        \"foreign_exchange_rate\": '',\r\n    },\r\n    \"t_conductor\": null,\r\n    \"to_account\": null,\r\n    \"to_person\": null,\r\n    \"to_entity\": null,\r\n    \"to_country\": \"\"\r\n}\r\n\r\nexport default t_to;","import CIcon from '@coreui/icons-react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup,\r\n    CRow\r\n} from '@coreui/react';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport FormAmount from 'src/components/form-inputs/form-amount.component';\r\nimport { setReport } from '../../../redux/report/report.actions';\r\nimport { selectReport } from '../../../redux/report/report.selectors';\r\nimport FormActions from '../../form-inputs/form-actions.component';\r\nimport FormInput from '../../form-inputs/form-input.component';\r\nimport CountryCodeEnum from '../../goaml-enums/country-code-enum/country-code-enum.component';\r\nimport CurrenciesEnum from '../../goaml-enums/currencies-enum/currencies-enum.component';\r\nimport FundsTypeEnum from '../../goaml-enums/funds-type-enum/funds-type-enum.component';\r\nimport WrapperPersons from '../wrapper-person/wrapper-person.component';\r\nimport TransactionAccount from '../transaction-account/transaction-account.components';\r\nimport TransactionEntity from '../transaction-entity/transaction-entity.components';\r\nimport TransactionsPartyTypes from './transaction-party.types'\r\nimport t_to from '../../../redux/transaction-party/to.format'\r\n\r\nconst TTo = ({ name, transRef, clientType, partyType, handleSavePartyInfo, report, ...otherProps }) => {\r\n\r\n    const [collapsed, setCollapsed] = React.useState(true)\r\n    const [touched, setTouched] = React.useState(false);\r\n    const onFocus = () => setTouched(true)\r\n    const onBlur = () => setTouched(false)\r\n\r\n    const [collapseMulti, setCollapseMulti] = React.useState([false, false, false, false, false, false])\r\n    let [showElements, setShowElements] = React.useState(true)\r\n    const [transpartyInfo, setTranspartyInfo] = React.useState(t_to)\r\n\r\n    const [showError, setShowError] = React.useState({ isEmpty: false, value: '' });\r\n\r\n    const checkInputs = (e, inputState) => {\r\n        let error = false;\r\n        let val = {};\r\n        let myValidation;\r\n        if (typeof myValidation === 'string' || 'integer' || 'boolean') {\r\n            for (const [key, value] of Object.entries(inputState)) {\r\n                if (e.target.name === key) {\r\n                    value === null ? error = true : error = false;\r\n                    val = key;\r\n                }\r\n            }\r\n        }\r\n        setShowError({\r\n            isEmpty: error,\r\n            value: val\r\n        });\r\n    }\r\n\r\n    console.log('error', showError)\r\n\r\n    const toggleMulti = (type) => {\r\n        let newCollapse = collapseMulti.slice()\r\n        switch (type) {\r\n            case \"person-conductor\":\r\n                newCollapse[0] = !collapseMulti[0];\r\n                newCollapse[1] = false;\r\n                newCollapse[2] = false;\r\n                newCollapse[3] = false;\r\n                break;\r\n            case \"not-person-client\":\r\n                newCollapse[1] = !collapseMulti[1];\r\n                newCollapse[0] = false;\r\n                newCollapse[2] = false;\r\n                newCollapse[3] = false;\r\n                break;\r\n            case \"not-account-client\":\r\n                newCollapse[2] = !collapseMulti[2];\r\n                newCollapse[0] = false;\r\n                newCollapse[1] = false;\r\n                newCollapse[3] = false;\r\n                break;\r\n            case \"not-entity-client\":\r\n                newCollapse[3] = !collapseMulti[3];\r\n                newCollapse[0] = false;\r\n                newCollapse[1] = false;\r\n                newCollapse[2] = false;\r\n                break;\r\n            default:\r\n        }\r\n        setCollapseMulti(newCollapse)\r\n    }\r\n\r\n    const handleChange = event => {\r\n        const { name, value } = event.target;\r\n        if (name == \"foreign_currency_code\" || name == \"foreign_exchange_rate\" || name == \"foreign_amount\")\r\n            setTranspartyInfo({ ...transpartyInfo, to_foreign_currency: { ...transpartyInfo.to_foreign_currency, [name]: value } });\r\n        else\r\n            setTranspartyInfo({ ...transpartyInfo, [name]: value });\r\n    };\r\n\r\n    const handleSaveConductor = (conductor) => {\r\n        transpartyInfo.t_conductor = conductor;\r\n        setTranspartyInfo({ ...transpartyInfo });\r\n        handleSaveClick();\r\n    }\r\n\r\n    const handleSaveEntity = (entity) => {\r\n        transpartyInfo.to_entity = entity;\r\n        setTranspartyInfo({ ...transpartyInfo });\r\n        handleSaveClick();\r\n    }\r\n\r\n    const handleSaveAccount = (account) => {\r\n        transpartyInfo.to_account = account;\r\n        setTranspartyInfo({ ...transpartyInfo });\r\n        handleSaveClick();\r\n    }\r\n\r\n    const handleSavePerson = (person) => {\r\n        transpartyInfo.to_person = person;\r\n        setTranspartyInfo({ ...transpartyInfo });\r\n        handleSaveClick();\r\n    }\r\n\r\n    const handleSaveClick = () => {\r\n        if (!transpartyInfo.to_funds_code || !transpartyInfo.to_funds_comment || !transpartyInfo.to_country\r\n            || !transpartyInfo.to_foreign_currency.foreign_currency) {\r\n            alert('please complete this field')\r\n        }\r\n        handleSavePartyInfo(transpartyInfo);\r\n    }\r\n\r\n    const handleCancelClick = () => {\r\n        console.log(\"Hello: \", report);\r\n    }\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                    <CCard>\r\n                        <CCardHeader>\r\n                            {name}\r\n                            <div className=\"card-header-actions\">\r\n                                <CButton\r\n                                    color=\"link\"\r\n                                    className=\"card-header-action btn-minimize\"\r\n                                    onClick={() => setCollapsed(!collapsed)}\r\n                                >\r\n                                    <CIcon name={collapsed ? 'cil-chevron-bottom' : 'cil-chevron-top'} />\r\n                                </CButton>\r\n                            </div>\r\n                        </CCardHeader>\r\n                        <CCollapse show={collapsed} timeout={1000}>\r\n                            <CCardBody>\r\n                                <CForm className=\"form-horizontal\">\r\n                                    <CFormGroup row>\r\n                                        <CCol xs=\"6\">\r\n                                            <FundsTypeEnum\r\n                                                label=\"Funds Code*\"\r\n                                                name=\"from_funds_code\"\r\n                                                handleChange={handleChange}\r\n                                                value={transpartyInfo.to_funds_code}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                className={`from-control ${!transpartyInfo.to_funds_code && touched && 'is-invalid'} ${transpartyInfo.to_funds_code && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"6\">\r\n                                            <FormInput\r\n                                                label=\"Funds Comment\"\r\n                                                name=\"from_funds_comment\"\r\n                                                placeholder=\"Enter ...\"\r\n                                                handleChange={handleChange}\r\n                                                value={transpartyInfo.to_funds_comment}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                className={`from-control ${!transpartyInfo.to_funds_comment && touched && 'is-invalid'} ${transpartyInfo.to_funds_comment && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"6\">\r\n                                            <CountryCodeEnum\r\n                                                handleChange={handleChange}\r\n                                                label=\"Country*\"\r\n                                                name=\"from_country\"\r\n                                                value={transpartyInfo.to_country}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                className={`from-control ${!transpartyInfo.to_country && touched && 'is-invalid'} ${transpartyInfo.to_country && touched && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"6\">\r\n                                            \r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <CurrenciesEnum\r\n                                                handleChange={handleChange}\r\n                                                label=\"Currency Code*\"\r\n                                                name=\"foreign_currency_code\"\r\n                                                value={transpartyInfo.to_foreign_currency.foreign_currency_code}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                className={`from-control ${!transpartyInfo.to_foreign_currency.foreign_currency_code && touched && 'is-invalid'} ${transpartyInfo.to_foreign_currency.foreign_currency_code && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormAmount\r\n                                                handleChange={handleChange}\r\n                                                label=\"Exchange Rate*\"\r\n                                                name=\"foreign_exchange_rate\"\r\n                                                value={transpartyInfo.to_foreign_currency.foreign_exchange_rate}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                className={`from-control ${!transpartyInfo.to_foreign_currency.foreign_exchange_rate && touched && 'is-invalid'} ${transpartyInfo.to_foreign_currency.foreign_exchange_rate && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormAmount\r\n                                                handleChange={handleChange}\r\n                                                label=\"Amount*\"\r\n                                                name=\"foreign_amount\"\r\n                                                value={transpartyInfo.to_foreign_currency.foreign_amount}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                className={`from-control ${!transpartyInfo.to_foreign_currency.foreign_amount && touched && 'is-invalid'} ${transpartyInfo.to_foreign_currency.foreign_amount && 'is-valid'} `}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <p>\r\n                                                <button type=\"button\" onClick={() => { toggleMulti('person-conductor') }}\r\n                                                    class=\"btn btn-link\">Add Conductor</button>\r\n                                            </p>\r\n                                            <row>\r\n                                                <CCollapse show={collapseMulti[0]}>\r\n                                                    <WrapperPersons value={transpartyInfo.t_conductor} OnSave={handleSaveConductor} transRef={transRef} partyType={partyType} label=\"Add a Conductor\" name=\"conductor\" alias=\"Conductor\" ></WrapperPersons>\r\n                                                </CCollapse>\r\n                                            </row>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <p>\r\n                                                <CButton color=\"primary\" onClick={() => { toggleMulti('not-person-client') }}\r\n                                                    class=\"btn btn-link\">Add Person</CButton>{' '}\r\n                                                <CButton color=\"primary\" onClick={() => { toggleMulti('not-account-client') }}\r\n                                                    class=\"btn btn-link\">Add Account</CButton>{' '}\r\n                                                <CButton color=\"primary\" onClick={() => { toggleMulti('not-entity-client') }}\r\n                                                    class=\"btn btn-link\">Add Entity</CButton>{' '}\r\n                                            </p>\r\n                                            <CRow>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <CCollapse show={collapseMulti[1]}>\r\n                                                        <WrapperPersons value={transpartyInfo.to_person} OnSave={handleSavePerson} partyType={TransactionsPartyTypes.PERSON_NOT_CLIENT} transRef={transRef} label=\"Transaction Person\" name=\"Person-NC\" alias=\"Person\"></WrapperPersons>\r\n                                                    </CCollapse>\r\n                                                </CCol>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <CCollapse show={collapseMulti[2]}>\r\n                                                        <TransactionAccount value={transpartyInfo.to_account} OnSave={handleSaveAccount} partyType={TransactionsPartyTypes.ACCOUNT_NOT_CLIENT} transRef={transRef} name=\"TransactionAccount-NC\" label=\"Transaction Account\"></TransactionAccount>\r\n                                                    </CCollapse>\r\n                                                </CCol>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <CCollapse show={collapseMulti[3]}>\r\n                                                        <TransactionEntity value={transpartyInfo.to_entity} OnSave={handleSaveEntity} partyType={TransactionsPartyTypes.ENTITY_NOT_CLIENT} transRef={transRef} name=\"TransactionEntity-NC\" label=\"Transaction Entity\"></TransactionEntity>\r\n                                                    </CCollapse>\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                        </CCol>\r\n                                    </CFormGroup>\r\n                                </CForm>\r\n                                <FormActions\r\n                                    saveText=\"Save Party Details\"\r\n                                    handleSaveClick={handleSaveClick}\r\n                                    handleCancelClick={handleCancelClick}>\r\n                                </FormActions>\r\n                            </CCardBody>\r\n                        </CCollapse>\r\n                    </CCard>\r\n                </CFade>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    report: selectReport(state)\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(TTo);","import CIcon from '@coreui/icons-react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup,\r\n    CRow\r\n} from '@coreui/react';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport FormAmount from 'src/components/form-inputs/form-amount.component';\r\nimport { setReport } from '../../../redux/report/report.actions';\r\nimport { selectReport } from '../../../redux/report/report.selectors';\r\nimport FormActions from '../../form-inputs/form-actions.component';\r\nimport FormInput from '../../form-inputs/form-input.component';\r\nimport CountryCodeEnum from '../../goaml-enums/country-code-enum/country-code-enum.component';\r\nimport CurrenciesEnum from '../../goaml-enums/currencies-enum/currencies-enum.component';\r\nimport FundsTypeEnum from '../../goaml-enums/funds-type-enum/funds-type-enum.component';\r\nimport WrapperPersons from '../wrapper-person/wrapper-person.component';\r\nimport TransactionAccount from '../transaction-account/transaction-account.components';\r\nimport TransactionEntity from '../transaction-entity/transaction-entity.components';\r\nimport TransactionsPartyTypes from './transaction-party.types'\r\nimport t_to_my_client from '../../../redux/transaction-party/to.format'\r\n\r\nconst TToMyClient = ({ name, transRef, clientType, partyType, handleSavePartyInfo, report, ...otherProps }) => {\r\n\r\n    const [collapsed, setCollapsed] = React.useState(true)\r\n    const [touched, setTouched] = React.useState(false);\r\n    const onFocus = () => setTouched(true)\r\n    const onBlur = () => setTouched(false)\r\n\r\n    const [collapseMulti, setCollapseMulti] = React.useState([false, false, false, false, false, false])\r\n    let [showElements, setShowElements] = React.useState(true)\r\n    const [transpartyInfo, setTranspartyInfo] = React.useState(t_to_my_client)\r\n\r\n    const [showError, setShowError] = React.useState({ isEmpty: false, value: '' });\r\n\r\n    const checkInputs = (e, inputState) => {\r\n        let error = false;\r\n        let val = {};\r\n        let myValidation;\r\n        if (typeof myValidation === 'string' || 'integer' || 'boolean') {\r\n            for (const [key, value] of Object.entries(inputState)) {\r\n                if (e.target.name === key) {\r\n                    value === null ? error = true : error = false;\r\n                    val = key;\r\n                }\r\n            }\r\n        }\r\n        setShowError({\r\n            isEmpty: error,\r\n            value: val\r\n        });\r\n    }\r\n\r\n    console.log('error', showError)\r\n\r\n    const toggleMulti = (type) => {\r\n        let newCollapse = collapseMulti.slice()\r\n        switch (type) {\r\n            case \"person-conductor\":\r\n                newCollapse[0] = !collapseMulti[0];\r\n                newCollapse[1] = false;\r\n                newCollapse[2] = false;\r\n                newCollapse[3] = false;\r\n                break;\r\n            case \"person-client\":\r\n                newCollapse[1] = !collapseMulti[1];\r\n                newCollapse[0] = false;\r\n                newCollapse[2] = false;\r\n                newCollapse[3] = false;\r\n                break;\r\n            case \"account-client\":\r\n                newCollapse[2] = !collapseMulti[2];\r\n                newCollapse[0] = false;\r\n                newCollapse[1] = false;\r\n                newCollapse[3] = false;\r\n                break;\r\n            case \"entity-client\":\r\n                newCollapse[3] = !collapseMulti[3];\r\n                newCollapse[0] = false;\r\n                newCollapse[1] = false;\r\n                newCollapse[2] = false;\r\n                break;\r\n            default:\r\n        }\r\n        setCollapseMulti(newCollapse)\r\n    }\r\n\r\n    const handleChange = event => {\r\n        const { name, value } = event.target;\r\n        if (name == \"foreign_currency_code\" || name == \"foreign_exchange_rate\" || name == \"foreign_amount\")\r\n            setTranspartyInfo({ ...transpartyInfo, to_foreign_currency: { ...transpartyInfo.to_foreign_currency, [name]: value } });\r\n        else\r\n            setTranspartyInfo({ ...transpartyInfo, [name]: value });\r\n    };\r\n\r\n    const handleSaveConductor = (conductor) => {\r\n        transpartyInfo.t_conductor = conductor;\r\n        setTranspartyInfo({ ...transpartyInfo });\r\n        handleSaveClick();\r\n    }\r\n\r\n    const handleSaveEntity = (entity) => {\r\n        transpartyInfo.to_entity = entity;\r\n        setTranspartyInfo({ ...transpartyInfo });\r\n        handleSaveClick();\r\n    }\r\n\r\n    const handleSaveAccount = (account) => {\r\n        transpartyInfo.to_account = account;\r\n        setTranspartyInfo({ ...transpartyInfo });\r\n        handleSaveClick();\r\n    }\r\n\r\n    const handleSavePerson = (person) => {\r\n        transpartyInfo.to_person = person;\r\n        setTranspartyInfo({ ...transpartyInfo });\r\n        handleSaveClick();\r\n    }\r\n\r\n    const handleSaveClick = () => {\r\n        if (!transpartyInfo.to_funds_code || !transpartyInfo.to_funds_comment || !transpartyInfo.to_country\r\n            || !transpartyInfo.to_foreign_currency.foreign_currency) {\r\n            alert('please complete this field')\r\n        }\r\n        handleSavePartyInfo(transpartyInfo);\r\n    }\r\n\r\n    const handleCancelClick = () => {\r\n        console.log(\"Hello: \", report);\r\n    }\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                    <CCard>\r\n                        <CCardHeader>\r\n                            {name}\r\n                            <div className=\"card-header-actions\">\r\n                                <CButton\r\n                                    color=\"link\"\r\n                                    className=\"card-header-action btn-minimize\"\r\n                                    onClick={() => setCollapsed(!collapsed)}\r\n                                >\r\n                                    <CIcon name={collapsed ? 'cil-chevron-bottom' : 'cil-chevron-top'} />\r\n                                </CButton>\r\n                            </div>\r\n                        </CCardHeader>\r\n                        <CCollapse show={collapsed} timeout={1000}>\r\n                            <CCardBody>\r\n                                <CForm className=\"form-horizontal\">\r\n                                    <CFormGroup row>\r\n                                        <CCol xs=\"6\">\r\n                                            <FundsTypeEnum\r\n                                                label=\"Funds Code*\"\r\n                                                name=\"from_funds_code\"\r\n                                                handleChange={handleChange}\r\n                                                value={transpartyInfo.to_funds_code}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                className={`from-control ${!transpartyInfo.to_funds_code && touched && 'is-invalid'} ${transpartyInfo.to_funds_code && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"6\">\r\n                                            <FormInput\r\n                                                label=\"Funds Comment\"\r\n                                                name=\"from_funds_comment\"\r\n                                                placeholder=\"Enter ...\"\r\n                                                handleChange={handleChange}\r\n                                                value={transpartyInfo.to_funds_comment}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                className={`from-control ${!transpartyInfo.to_funds_comment && touched && 'is-invalid'} ${transpartyInfo.to_funds_comment && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"6\">\r\n                                            <CountryCodeEnum\r\n                                                handleChange={handleChange}\r\n                                                label=\"Country*\"\r\n                                                name=\"from_country\"\r\n                                                value={transpartyInfo.to_country}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                className={`from-control ${!transpartyInfo.to_country && touched && 'is-invalid'} ${transpartyInfo.to_country && touched && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"6\">\r\n                                            \r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <CurrenciesEnum\r\n                                                handleChange={handleChange}\r\n                                                label=\"Currency Code*\"\r\n                                                name=\"foreign_currency_code\"\r\n                                                value={transpartyInfo.to_foreign_currency.foreign_currency_code}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                className={`from-control ${!transpartyInfo.to_foreign_currency.foreign_currency_code && touched && 'is-invalid'} ${transpartyInfo.to_foreign_currency.foreign_currency_code && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormAmount\r\n                                                handleChange={handleChange}\r\n                                                label=\"Exchange Rate*\"\r\n                                                name=\"foreign_exchange_rate\"\r\n                                                value={transpartyInfo.to_foreign_currency.foreign_exchange_rate}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                className={`from-control ${!transpartyInfo.to_foreign_currency.foreign_exchange_rate && touched && 'is-invalid'} ${transpartyInfo.to_foreign_currency.foreign_exchange_rate && 'is-valid'}`}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"4\">\r\n                                            <FormAmount\r\n                                                handleChange={handleChange}\r\n                                                label=\"Amount*\"\r\n                                                name=\"foreign_amount\"\r\n                                                value={transpartyInfo.to_foreign_currency.foreign_amount}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onBlur}\r\n                                                onKeyUp={(e) => checkInputs(e, transpartyInfo)}\r\n                                                className={`from-control ${!transpartyInfo.to_foreign_currency.foreign_amount && touched && 'is-invalid'} ${transpartyInfo.to_foreign_currency.foreign_amount && 'is-valid'} `}\r\n                                            />\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <p>\r\n                                                <button type=\"button\" onClick={() => { toggleMulti('person-conductor') }}\r\n                                                    class=\"btn btn-link\">Add Conductor</button>\r\n                                            </p>\r\n                                            <row>\r\n                                                <CCollapse show={collapseMulti[0]}>\r\n                                                    <WrapperPersons value={transpartyInfo.t_conductor} OnSave={handleSaveConductor} transRef={transRef} partyType={partyType} label=\"Add a Conductor\" name=\"conductor\" alias=\"Conductor\" ></WrapperPersons>\r\n                                                </CCollapse>\r\n                                            </row>\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <p>\r\n                                                <CButton color=\"primary\" onClick={() => { toggleMulti('person-client') }}\r\n                                                    class=\"btn btn-link\">Add Person</CButton>{' '}\r\n                                                <CButton color=\"primary\" onClick={() => { toggleMulti('account-client') }}\r\n                                                    class=\"btn btn-link\">Add Account</CButton>{' '}\r\n                                                <CButton color=\"primary\" onClick={() => { toggleMulti('entity-client') }}\r\n                                                    class=\"btn btn-link\">Add Entity</CButton>{' '}\r\n                                            </p>\r\n                                            <CRow>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <CCollapse show={collapseMulti[1]}>\r\n                                                        <WrapperPersons value={transpartyInfo.to_person} OnSave={handleSavePerson} partyType={TransactionsPartyTypes.PERSON_CLIENT} transRef={transRef} label=\"Transaction Person\" name=\"Person\" alias=\"Person\"></WrapperPersons>\r\n                                                    </CCollapse>\r\n                                                </CCol>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <CCollapse show={collapseMulti[2]}>\r\n                                                        <TransactionAccount value={transpartyInfo.to_account} OnSave={handleSaveAccount} partyType={TransactionsPartyTypes.ACCOUNT_CLIENT} transRef={transRef} name=\"TransactionAccount\" label=\"Transaction Account\"></TransactionAccount>\r\n                                                    </CCollapse>\r\n                                                </CCol>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <CCollapse show={collapseMulti[3]}>\r\n                                                        <TransactionEntity value={transpartyInfo.to_entity} OnSave={handleSaveEntity} partyType={TransactionsPartyTypes.ENTITY_CLIENT} transRef={transRef} name=\"TransactionEntity\" label=\"Transaction Entity\"></TransactionEntity>\r\n                                                    </CCollapse>\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                        </CCol>\r\n                                    </CFormGroup>\r\n                                </CForm>\r\n                                <FormActions\r\n                                    saveText=\"Save Party Details\"\r\n                                    handleSaveClick={handleSaveClick}\r\n                                    handleCancelClick={handleCancelClick}>\r\n                                </FormActions>\r\n                            </CCardBody>\r\n                        </CCollapse>\r\n                    </CCard>\r\n                </CFade>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    report: selectReport(state)\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(TToMyClient);","import React from 'react';\r\nimport {\r\n    CLabel,\r\n    CCard,\r\n    CCardBody,\r\n    CCol,\r\n    CFade,\r\n    CRow,\r\n    CNav,\r\n    CNavItem,\r\n    CNavLink,\r\n    CTabContent,\r\n    CTabPane,\r\n    CTabs\r\n} from '@coreui/react'\r\n\r\nimport TFrom from './t-from.component'\r\nimport TFromMyClient from './t-from-my-client.component'\r\nimport TTo from './t-to.component'\r\nimport TToMyClient from './t-to-my-client.component'\r\nimport TransactionsPartyTypes from '../transaction-party/transaction-party.types'\r\n\r\nimport { connect } from 'react-redux';\r\nimport { selectReport } from '../../../redux/report/report.selectors';\r\nimport { addTFrom } from '../../../redux/report/report.actions';\r\nimport { addTFromMyClient } from '../../../redux/report/report.actions';\r\nimport { addTTo } from '../../../redux/report/report.actions';\r\nimport { addTToMyClient } from '../../../redux/report/report.actions';\r\n\r\nimport { RetrieveTransactionFromReport } from '../../../redux/goaml-utils/goaml-utils';\r\n\r\nconst TransactionParty = ({ name, label, from, to, transRef, report, addTFrom, addTTo, addTFromMyClient, addTToMyClient, displayPartyType, ...otherProps }) => {\r\n\r\n    let [showElements, setShowElements] = React.useState(true);\r\n\r\n    const SaveTransactionFromMyClient = (transparty) => {\r\n        const existingTxn = RetrieveTransactionFromReport(report, transRef);\r\n        if (existingTxn) {\r\n            console.log(\"transparty: \", transparty);\r\n            addTFromMyClient(report, existingTxn.internal_ref_number, transparty);\r\n        }\r\n        else{\r\n            alert(\"Transaction with Internal Ref Number '\", transRef, \"' cannot be found. Save failed!\");\r\n        }\r\n    }\r\n\r\n    const SaveTransactionFrom = (transparty) => {\r\n        const existingTxn = RetrieveTransactionFromReport(report, transRef);\r\n        if (existingTxn) {\r\n            addTFrom(report, existingTxn.internal_ref_number, transparty);\r\n        }\r\n        else{\r\n            alert(\"Transaction with Internal Ref Number '\", transRef, \"' cannot be found. Save failed!\");\r\n        }\r\n    }\r\n\r\n    const SaveTransactionToMyClient = (transparty) => {\r\n        const existingTxn = RetrieveTransactionFromReport(report, transRef);\r\n        if (existingTxn) {\r\n            addTToMyClient(report, existingTxn.internal_ref_number, transparty);\r\n        }\r\n        else{\r\n            alert(\"Transaction with Internal Ref Number '\", transRef, \"' cannot be found. Save failed!\");\r\n        }\r\n    }\r\n\r\n    const SaveTransactionTo = (transparty) => {\r\n        const existingTxn = RetrieveTransactionFromReport(report, transRef);\r\n        if (existingTxn) {\r\n            addTTo(report, existingTxn.internal_ref_number, transparty);\r\n        }\r\n        else{\r\n            alert(\"Transaction with Internal Ref Number '\", transRef, \"' cannot be found. Save failed!\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                {label ? (\r\n                    <CLabel htmlFor={name}>{label}</CLabel>\r\n                ) : null}\r\n                <div className=\"row\">\r\n                    <CCol xs=\"12\">\r\n                        <CTabs activeTab=\"myClient\">\r\n                            <CNav variant=\"tabs\">\r\n                                <CNavItem>\r\n                                    <CNavLink data-tab=\"myClient\">\r\n                                        Party Details\r\n                                </CNavLink>\r\n                                </CNavItem>\r\n                            </CNav>\r\n                            <CTabContent>\r\n                                <CTabPane data-tab=\"myClient\">\r\n                                    <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                                        <CCard>\r\n                                            <CCardBody>\r\n                                                {displayPartyType == TransactionsPartyTypes.FROM ?\r\n                                                    (from == TransactionsPartyTypes.ACCOUNT_CLIENT\r\n                                                        || from == TransactionsPartyTypes.PERSON_CLIENT\r\n                                                        || from == TransactionsPartyTypes.ENTITY_CLIENT) ?\r\n                                                        <TFromMyClient transRef={transRef} clientType={from} partyType={TransactionsPartyTypes.MY_CLIENT} handleSavePartyInfo={SaveTransactionFromMyClient} name=\"Expand and Fill From My Clent Overview\" />\r\n                                                        :\r\n                                                        <TFrom transRef={transRef} clientType={from} partyType={TransactionsPartyTypes.MY_CLIENT} handleSavePartyInfo={SaveTransactionFrom} name=\"Expand and Fill From Clent Overview\" />\r\n                                                    :\r\n                                                    (to == TransactionsPartyTypes.ACCOUNT_CLIENT\r\n                                                        || to == TransactionsPartyTypes.PERSON_CLIENT\r\n                                                        || to == TransactionsPartyTypes.ENTITY_CLIENT) ?\r\n                                                        <TToMyClient transRef={transRef} clientType={to} partyType={TransactionsPartyTypes.MY_CLIENT} handleSavePartyInfo={SaveTransactionToMyClient} name=\"Expand and Fill To My Clent Overview\" />\r\n                                                        :\r\n                                                        <TTo transRef={transRef} clientType={to} partyType={TransactionsPartyTypes.MY_CLIENT} handleSavePartyInfo={SaveTransactionTo} name=\"Expand and Fill To Clent Overview\" />\r\n                                                }\r\n                                            </CCardBody>\r\n                                        </CCard>\r\n                                    </CFade>\r\n                                </CTabPane>\r\n                            </CTabContent>\r\n                        </CTabs>\r\n                    </CCol>\r\n                </div>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nconst makeMapStateToProps = () => {\r\n    const mapStateToProps = (state, props) => {\r\n        return {\r\n            report: selectReport(state)\r\n        }\r\n    }\r\n    return mapStateToProps\r\n}\r\nconst mapDispatchToProps = dispatch => ({\r\n    addTFrom: (report, internal_ref_number, item) => dispatch(addTFrom(report, internal_ref_number, item)),\r\n    addTTo: (report, internal_ref_number, item) => dispatch(addTTo(report, internal_ref_number, item)),\r\n    addTFromMyClient: (report, internal_ref_number, item) => dispatch(addTFromMyClient(report, internal_ref_number, item)),\r\n    addTToMyClient: (report, internal_ref_number, item) => dispatch(addTToMyClient(report, internal_ref_number, item)),\r\n});\r\n\r\nexport default connect(makeMapStateToProps, mapDispatchToProps)(TransactionParty);","import CIcon from '@coreui/icons-react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup,\r\n    CRow\r\n} from '@coreui/react';\r\nimport React from 'react';\r\nimport TransactionInfo from '../transaction-info/transaction-info.components';\r\nimport TransactionItem from '../transaction-item/transaction-item.components';\r\nimport TransactionParty from '../transaction-party/transaction-party.component';\r\nimport TransactionsPartyTypes from '../transaction-party/transaction-party.types';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { setReport, addTransactionToReport } from '../../../redux/report/report.actions';\r\nimport { selectReport } from '../../../redux/report/report.selectors';\r\n\r\n\r\nconst TransactionTemplate = ({ name, report, transaction, addReportTransaction, ...otherProps }) => {\r\n\r\n    let [collapsed, setCollapsed] = React.useState(false)\r\n    let [showElements, setShowElements] = React.useState(true)\r\n\r\n    let [transitState, setTransitState] = React.useState({\r\n        transRef: null,\r\n        txn_from: null,\r\n        txn_to: null\r\n    })\r\n\r\n    const handleTransInfoSaveClick = (reportTxns, transaction) => {\r\n        setTransitState({ ...transitState, transRef: transaction.detail.internal_ref_number, \r\n            txn_from: transaction.txn_from, txn_to: transaction.txn_to });\r\n        addReportTransaction(reportTxns);\r\n    }\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                    <CCard>\r\n                        <CCardHeader>\r\n                            {name}\r\n                            <div className=\"card-header-actions\">\r\n                                <CButton\r\n                                    color=\"link\"\r\n                                    className=\"card-header-action btn-minimize\"\r\n                                    onClick={() => setCollapsed(!collapsed)}\r\n                                >\r\n                                    <CIcon name={collapsed ? 'cil-chevron-bottom' : 'cil-chevron-top'} />\r\n                                </CButton>\r\n                            </div>\r\n                        </CCardHeader>\r\n                        <CCollapse show={collapsed} timeout={1000}>\r\n                            <CCardBody>\r\n                                <CForm className=\"form-horizontal\">\r\n                                    <CFormGroup row>\r\n                                        <CCol xs=\"12\">\r\n                                            <TransactionInfo handleSaveInfoClick={handleTransInfoSaveClick} transRef={transitState.transRef} label=\"Transaction Overview\" name=\"TransactionOverview\" />\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <TransactionParty transRef={transitState.transRef} from={transitState.txn_from} label=\"From Party\" name=\"FromParty\" displayPartyType={TransactionsPartyTypes.FROM} />\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <TransactionParty transRef={transitState.transRef} to={transitState.txn_to} label=\"To Party\" name=\"ToParty\" displayPartyType={TransactionsPartyTypes.TO} />\r\n                                        </CCol>\r\n                                        <CCol xs=\"12\">\r\n                                            <TransactionItem transRef={transitState.transRef} label=\"Transaction Item\" name=\"goods_services\"></TransactionItem>\r\n                                        </CCol>\r\n                                    </CFormGroup>\r\n                                </CForm>\r\n                            </CCardBody>\r\n                        </CCollapse>\r\n                    </CCard>\r\n                </CFade>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state, props) => ({\r\n    report: selectReport(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setReport: report => dispatch(setReport(report)),\r\n    addReportTransaction: report => dispatch(addTransactionToReport(report))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TransactionTemplate);","import React from 'react';\r\nimport TransactionTable from '../../goaml-tables/table-transaction.component'\r\nimport TransactionTemplate from '../template-transaction/template-transaction.component'\r\nimport {\r\n    CLabel,\r\n    CCard,\r\n    CCardBody,\r\n    CCol,\r\n    CFade,\r\n    CRow,\r\n    CNav,\r\n    CNavItem,\r\n    CNavLink,\r\n    CTabContent,\r\n    CTabPane,\r\n    CTabs,\r\n  } from '@coreui/react'\r\n\r\nconst WrapperTransactions = ({ name, label, ...otherProps }) => {\r\n    \r\n    let [showElements, setShowElements] = React.useState(true)\r\n    const tab1Title = `Add ${name}`;\r\n    const tab2Title = `${name} Table`;\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                {label ? (\r\n                    <CLabel htmlFor={name}>{label}</CLabel>\r\n                ) : null}\r\n                <div className=\"row\">\r\n                    <CCol xs=\"12\">\r\n                        <CTabs activeTab=\"Tab1\">\r\n                            <CNav variant=\"tabs\">\r\n                                <CNavItem>\r\n                                <CNavLink data-tab=\"Tab1\">\r\n                                    {tab1Title}\r\n                                </CNavLink>\r\n                                </CNavItem>\r\n                                <CNavItem>\r\n                                <CNavLink data-tab=\"Tab2\">\r\n                                    {tab2Title}\r\n                                </CNavLink>\r\n                                </CNavItem>\r\n                            </CNav>\r\n                            <CTabContent>\r\n                                <CTabPane data-tab=\"Tab1\">\r\n                                    <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                                        <CCard>\r\n                                            <CCardBody>\r\n                                            <CRow>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <TransactionTemplate name=\"Add a Transaction\"></TransactionTemplate>\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                            </CCardBody>\r\n                                        </CCard>\r\n                                    </CFade>\r\n                                </CTabPane>\r\n                                <CTabPane data-tab=\"Tab2\">\r\n                                    <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                                        <CCard>\r\n                                            <CCardBody>\r\n                                            <CRow>\r\n                                                <CCol className=\"col-sm-12\">\r\n                                                    <TransactionTable name={name} />\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                            </CCardBody>\r\n                                        </CCard>\r\n                                    </CFade>\r\n                                </CTabPane>\r\n                            </CTabContent>\r\n                        </CTabs>\r\n                    </CCol>\r\n                </div>\r\n            </CCol>\r\n        </CRow>\r\n    );\r\n}\r\n\r\nexport default WrapperTransactions;","var endScopeObj = {};\r\nvar optionsObj = {\r\n    rootName: 'name of the root', // defaults to 'root'\r\n    declaration: 'auto' || '<a custom declaration>', // defaults to undefined\r\n    indentation: 'number', // defaults to 0\r\n    doctype: 'auto', // defaults to undefined\r\n    attributes: false || true // defaults to true\r\n}\r\n\r\nexport const obj2xml = function OBJtoXML(obj) {\r\n    var xml = '';\r\n    for (var prop in obj) {\r\n        xml += obj[prop] instanceof Array ? '' : \"<\" + prop + \">\";\r\n        if (obj[prop] instanceof Array) {\r\n            for (var array in obj[prop]) {\r\n                xml += \"<\" + prop + \">\";\r\n                xml += OBJtoXML(new Object(obj[prop][array]));\r\n                xml += \"</\" + prop + \">\";\r\n            }\r\n        } else if (typeof obj[prop] == \"object\") {\r\n            xml += OBJtoXML(new Object(obj[prop]));\r\n        } else {\r\n            xml += obj[prop];\r\n        }\r\n        xml += obj[prop] instanceof Array ? '' : \"</\" + prop + \">\";\r\n    }\r\n    var xml = xml.replace(/<\\/?[0-9]{1,}>/g, '');\r\n    return xml\r\n}\r\n\r\nexport const obj2xml_inverse = function (obj, opt) {\r\n    if (!opt) opt = {\r\n        rootName: 'report',\r\n        attributes: false\r\n    };\r\n    var rootName = opt.rootName || 'root';\r\n    var declaration = opt.declaration === 'auto' ? '<?xml version=\"1.0\" encoding=\"utf-8\"?>' : opt.declaration;\r\n    var indentation = opt.indentation || 0;\r\n    var generateDtd = (opt.doctype === 'auto' || opt.doctype === 'generate') && declaration;\r\n    var useAttributes = opt.attributes === false ? false : true;\r\n    var scope_indent = 0;\r\n    if (generateDtd) {\r\n        var dtdAttr = {};\r\n        var dtdElem = {};\r\n    }\r\n    var ret = [];\r\n    var tagContent, isArr, curs, _t, _ti, key, innerKey, name, queue = [obj, rootName];\r\n    while (queue.length > 0) {\r\n        name = queue.pop();\r\n        curs = queue.pop();\r\n        if (generateDtd)\r\n            dtdElem[name] = dtdElem[name] || {};\r\n        if (curs === endScopeObj) {\r\n            scope_indent--;\r\n            if (indentation > 0) ret.push('\\n', ' '.repeat(indentation * scope_indent));\r\n            ret.push('</', name, '>');\r\n            continue;\r\n        }\r\n        if (typeof curs === 'object') {\r\n            queue.push(endScopeObj);\r\n            queue.push(name);\r\n            tagContent = [name];\r\n            isArr = Array.isArray(curs);\r\n            if (isArr && generateDtd) {\r\n                dtdElem[name][name + 'Item*'] = true;\r\n            }\r\n            for (key in curs) {\r\n                if (curs.hasOwnProperty(key)) {\r\n                    if (isArr) {\r\n                        queue.push(curs[key]);\r\n                        queue.push(name + 'Item');\r\n                    } else if (typeof curs[key] == 'object' || useAttributes === false) {\r\n                        queue.push(curs[key]);\r\n                        queue.push(key);\r\n                        if (generateDtd)\r\n                            dtdElem[name][key] = true;\r\n                    } else {\r\n                        if (generateDtd) {\r\n                            dtdAttr[name] = dtdAttr[name] || {};\r\n                            dtdAttr[name][key] = true;\r\n                        }\r\n                        tagContent.push(key + '=' + '\"' + curs[key] + '\"');\r\n                    }\r\n                }\r\n            }\r\n            if (indentation > 0) ret.push('\\n', ' '.repeat(indentation * scope_indent));\r\n            ret.push('<', tagContent.join(' '), '>');\r\n            scope_indent++;\r\n        } else {\r\n            if (generateDtd)\r\n                dtdElem[name]['#PCDATA'] = true;\r\n            if (indentation > 0) ret.push('\\n', ' '.repeat(indentation * scope_indent));\r\n            ret.push('<');\r\n            ret.push(name);\r\n            ret.push('>');\r\n            ret.push(curs);\r\n            ret.push('</');\r\n            ret.push(name);\r\n            ret.push('>');\r\n        }\r\n    }\r\n    if (generateDtd) {\r\n        var dtd = ['<!DOCTYPE ', rootName, ' ['];\r\n        for (key in dtdAttr) {\r\n            if (dtdAttr.hasOwnProperty(key)) {\r\n                for (innerKey in dtdAttr[key]) {\r\n                    if (dtdAttr[key].hasOwnProperty(innerKey)) {\r\n                        if (indentation > 0) dtd.push('\\n');\r\n                        dtd.push('<!ATTLIST ', key, ' ', innerKey, ' CDATA #IMPLIED>');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (key in dtdElem) {\r\n            if (dtdElem.hasOwnProperty(key)) {\r\n                innerKey = null;\r\n                _t = ['<!ELEMENT ', key, ' ('];\r\n                _ti = [];\r\n                for (innerKey in dtdElem[key]) {\r\n                    if (dtdElem[key].hasOwnProperty(innerKey)) {\r\n                        _ti.push(innerKey);\r\n                    }\r\n                }\r\n                if (indentation > 0) dtd.push('\\n');\r\n                if (innerKey === null) // no children\r\n                    dtd.push('<!ELEMENT ', key, ' EMPTY>');\r\n                else {\r\n                    _t.push(_ti.join(', '));\r\n                    _t.push(')>');\r\n                    dtd.push.apply(dtd, _t);\r\n                }\r\n            }\r\n        }\r\n        dtd.push(']>');\r\n        ret.unshift.apply(ret, dtd);\r\n    } else if (declaration)\r\n        ret.unshift(opt.doctype ? opt.doctype : '<!DOCTYPE ' + rootName + '>');\r\n    if (declaration) ret.unshift(declaration);\r\n    return ret.join('');\r\n};\r\n","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { selectReport } from '../../redux/report/report.selectors';\r\nimport FormActions from '../form-inputs/form-actions.component';\r\nimport { obj2xml } from './converter-json-xml'\r\nimport {downloadObjectAsXml, downloadXmlAsFile } from './report-downloader'\r\n\r\nimport {\r\n    CCard,\r\n    CCardBody,\r\n    CRow,\r\n    CCol\r\n} from '@coreui/react';\r\n\r\nconst ReportGenerator = ({ name, label, reportType }) => {\r\n\r\n    const generateXMLReport = () => {\r\n        const report = \"<report>\" + obj2xml(reportType) + \"</report>\"; \r\n        downloadObjectAsXml(report, \"report\");\r\n    }\r\n\r\n    const handleCancelClick = () => {\r\n        console.log(\"Hello: \", reportType);\r\n    }\r\n\r\n    return (\r\n        <CCard>\r\n            <CCardBody>\r\n                <CRow>\r\n                    <CCol className=\"col-sm-12\">\r\n                        <FormActions saveText=\"Generate XML Report\" handleSaveClick={generateXMLReport} handleCancelClick={handleCancelClick}></FormActions>\r\n                    </CCol>\r\n                </CRow>\r\n            </CCardBody>\r\n        </CCard>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    reportType: selectReport(state)\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(ReportGenerator)","export const downloadObjectAsXml = (exportObj, exportName) => {\r\n    //This will not work without limits, though. You can only download about 1MB of data. \r\n    //For example, var storageObj = []; for (var i=0; i<1000000; ++i) storageObj.push('aaa'); \r\n    //gives \"download Failed - Network error\" in Chrome 61\r\n    \r\n    var dataStr = \"data:text/plain;charset=utf-8,\" + encodeURIComponent(exportObj);\r\n    var downloadAnchorNode = document.createElement('a');\r\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\r\n    downloadAnchorNode.setAttribute(\"download\", exportName + \".xml\");\r\n    document.body.appendChild(downloadAnchorNode); // required for firefox\r\n    downloadAnchorNode.click();\r\n    downloadAnchorNode.remove();\r\n}\r\n\r\nexport const downloadXmlAsFile = (xmltext, filename) => {\r\n    // This doesn't work in mac firefox and opens the tab with content instead of downloading in mac safari\r\n    var pom = document.createElement('a');\r\n\r\n    var filename = `${filename}.xml`;\r\n    var pom = document.createElement('a');\r\n    var bb = new Blob([xmltext], { type: 'text/plain' });\r\n\r\n    pom.setAttribute('href', window.URL.createObjectURL(bb));\r\n    pom.setAttribute('download', filename);\r\n\r\n    pom.dataset.downloadurl = ['text/plain', pom.download, pom.href].join(':');\r\n    pom.draggable = true;\r\n    pom.classList.add('dragout');\r\n\r\n    pom.click();\r\n}","import XLSX from 'xlsx';\r\n/* generate an array of column objects */\r\nexport const make_cols = refstr => {\r\n\tlet o = [], C = XLSX.utils.decode_range(refstr).e.c + 1;\r\n\tfor(var i = 0; i < C; ++i) o[i] = {name:XLSX.utils.encode_col(i), key:i}\r\n\treturn o;\r\n};","import React from 'react'\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CLabel,\r\n    CInputFile,\r\n    CRow,\r\n    CFade,\r\n    CForm,\r\n    CFormGroup\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport FormActions from '../form-inputs/form-actions.component';\r\n\r\nconst GoAmlExcelUpload = ({ id, name, accept, handleChange, handleFile, fileName, ...otherProps }) => {\r\n\r\n    let [collapsed, setCollapsed] = React.useState(true);\r\n    const [showElements] = React.useState(true)\r\n\r\n    const handleCancelClick = () => {\r\n        console.log(\"Hello: \");\r\n    }\r\n\r\n    return (\r\n        <CRow>\r\n            <CCol xs=\"12\">\r\n                <CFade timeout={300} in={showElements} unmountOnExit={true}>\r\n                    <CCard>\r\n                        <CCardHeader>\r\n                            {name}\r\n                            <div className=\"card-header-actions\">\r\n                                <CButton\r\n                                    color=\"link\"\r\n                                    className=\"card-header-action btn-minimize\"\r\n                                    onClick={() => setCollapsed(!collapsed)}\r\n                                >\r\n                                    <CIcon name={collapsed ? 'cil-chevron-bottom' : 'cil-chevron-top'} />\r\n                                </CButton>\r\n                            </div>\r\n                        </CCardHeader>\r\n                        <CCollapse show={collapsed} timeout={1000}>\r\n                            <CCardBody>\r\n                                <CForm className=\"form-horizontal\">\r\n                                    <CFormGroup>\r\n                                        <CCol xs=\"12\">\r\n                                            <CInputFile custom\r\n                                                id={id}\r\n                                                className=\"form-control\"\r\n                                                name={name}\r\n                                                accept={accept}\r\n                                                onChange={handleChange} />\r\n                                            <CLabel htmlFor=\"custom-file-input\" variant=\"custom-file\">\r\n                                                {fileName}</CLabel>\r\n                                        </CCol>\r\n                                    </CFormGroup>\r\n                                    <FormActions\r\n                                        saveText=\"Upload Excel File\"\r\n                                        handleSaveClick={handleFile}\r\n                                        handleCancelClick={handleCancelClick}\r\n                                    >\r\n                                    </FormActions>\r\n                                </CForm>\r\n                            </CCardBody>\r\n                        </CCollapse>\r\n                    </CCard>\r\n                </CFade>\r\n            </CCol>\r\n        </CRow>\r\n    )\r\n}\r\n\r\nexport default GoAmlExcelUpload\r\n","import React from 'react';\r\nimport XLSX from 'xlsx';\r\nimport { make_cols } from '../goaml-core/MakeColumns';\r\nimport { SheetJSFT } from '../goaml-core/types';\r\nimport GoAmlExcelUpload from './goaml-excel-upload.components';\r\n\r\nclass GoamlExcelFileReader extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      fileName: \"Choose file...\",\r\n      file: {},\r\n      data: [],\r\n      cols: []\r\n    }\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    const files = e.target.files;\r\n    if (files && files[0]) this.setState({ file: files[0], fileName: files[0].name });\r\n  };\r\n\r\n  handleFile = () => {\r\n    /* Boilerplate to set up FileReader */\r\n    const reader = new FileReader();\r\n    const rABS = !!reader.readAsBinaryString;\r\n\r\n    reader.onload = (e) => {\r\n      /* Parse data */\r\n      const bstr = e.target.result;\r\n      const wb = XLSX.read(bstr, { type: rABS ? 'binary' : 'array', bookVBA: true });\r\n      /* Get first worksheet */\r\n      const wsname = wb.SheetNames[0];\r\n      const ws = wb.Sheets[wsname];\r\n      /* Convert array of arrays */\r\n      const data = XLSX.utils.sheet_to_json(ws);\r\n      /* Update state */\r\n      this.setState({ data: data, cols: make_cols(ws['!ref']) }, () => {\r\n        console.log(JSON.stringify(this.state.data, null, 2));\r\n      });\r\n    };\r\n\r\n    if (rABS) {\r\n      reader.readAsBinaryString(this.state.file);\r\n    } else {\r\n      reader.readAsArrayBuffer(this.state.file);\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { name } = this.props;\r\n    return (\r\n      <GoAmlExcelUpload\r\n        name={name}\r\n        id=\"file\"\r\n        fileName={this.state.fileName}\r\n        accept=\".xls,.xlsx, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/vnd.ms-excel\"\r\n        handleChange={this.handleChange}\r\n        handleFile={this.handleFile}></GoAmlExcelUpload>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GoamlExcelFileReader;","import React from 'react';\r\nimport ReportType from '../../components/goaml-sections/report-type/report-type.component'\r\nimport ReportPerson from '../../components/goaml-sections/report-person/report-person.component'\r\nimport ReportLocation from '../../components/goaml-sections/report-location/report-location.component'\r\nimport ReportIndicator from '../../components/goaml-sections/report-indicator/report-indicator.component'\r\nimport WrapperTransactions from '../../components/goaml-sections/wrapper-transactions/wrapper-transactions.component'\r\nimport ReportGenerator from '../../components/goaml-core/report-generator.component'\r\nimport GoamlExcelFileReader from '../../components/goaml-excel-reader/goaml-excel-reader.components'\r\n\r\nconst GoAmlPage = () => (\r\n    <div>\r\n        <GoamlExcelFileReader name=\"Upload Excel\"></GoamlExcelFileReader>\r\n        <ReportType name=\"Report Type\"></ReportType>\r\n        <ReportPerson></ReportPerson>\r\n        <ReportLocation></ReportLocation>\r\n        <ReportIndicator name=\"Report Indicator\"></ReportIndicator>\r\n        <WrapperTransactions name=\"Transaction\" label=\"Report Transaction\"></WrapperTransactions>\r\n        <ReportGenerator name=\"Report Generator\" label=\"Generate GoAML Report\"></ReportGenerator>\r\n    </div>\r\n)\r\n\r\nexport default GoAmlPage;"],"sourceRoot":""}